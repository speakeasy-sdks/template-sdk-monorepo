/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteCompanyRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
};

export type DeleteCompanyResponse = {
  httpMeta: components.HTTPMetadata;
};

/** @internal */
export const DeleteCompanyRequest$inboundSchema: z.ZodType<
  DeleteCompanyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
});

/** @internal */
export type DeleteCompanyRequest$Outbound = {
  companyId: string;
};

/** @internal */
export const DeleteCompanyRequest$outboundSchema: z.ZodType<
  DeleteCompanyRequest$Outbound,
  z.ZodTypeDef,
  DeleteCompanyRequest
> = z.object({
  companyId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCompanyRequest$ {
  /** @deprecated use `DeleteCompanyRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteCompanyRequest$inboundSchema;
  /** @deprecated use `DeleteCompanyRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteCompanyRequest$outboundSchema;
  /** @deprecated use `DeleteCompanyRequest$Outbound` instead. */
  export type Outbound = DeleteCompanyRequest$Outbound;
}

export function deleteCompanyRequestToJSON(
  deleteCompanyRequest: DeleteCompanyRequest,
): string {
  return JSON.stringify(
    DeleteCompanyRequest$outboundSchema.parse(deleteCompanyRequest),
  );
}

export function deleteCompanyRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCompanyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCompanyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCompanyRequest' from JSON`,
  );
}

/** @internal */
export const DeleteCompanyResponse$inboundSchema: z.ZodType<
  DeleteCompanyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
  });
});

/** @internal */
export type DeleteCompanyResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const DeleteCompanyResponse$outboundSchema: z.ZodType<
  DeleteCompanyResponse$Outbound,
  z.ZodTypeDef,
  DeleteCompanyResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCompanyResponse$ {
  /** @deprecated use `DeleteCompanyResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteCompanyResponse$inboundSchema;
  /** @deprecated use `DeleteCompanyResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteCompanyResponse$outboundSchema;
  /** @deprecated use `DeleteCompanyResponse$Outbound` instead. */
  export type Outbound = DeleteCompanyResponse$Outbound;
}

export function deleteCompanyResponseToJSON(
  deleteCompanyResponse: DeleteCompanyResponse,
): string {
  return JSON.stringify(
    DeleteCompanyResponse$outboundSchema.parse(deleteCompanyResponse),
  );
}

export function deleteCompanyResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCompanyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCompanyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCompanyResponse' from JSON`,
  );
}
