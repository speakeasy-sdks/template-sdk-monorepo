/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountsCreate } from "../funcs/accountsCreate.js";
import { accountsGetCreateModel } from "../funcs/accountsGetCreateModel.js";
import { accountsList } from "../funcs/accountsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Accounts extends ClientSDK {
  /**
   * Create account
   *
   * @remarks
   * The *Create account* endpoint creates a new [account](https://docs.codat.io/accounting-api#/schemas/Account) for a given company's connection.
   *
   * [Accounts](https://docs.codat.io/accounting-api#/schemas/Account) are the categories a business uses to record accounting transactions.
   *
   * **Integration-specific behaviour**
   *
   * Required data may vary by integration. To see what data to post, first call [Get create account model](https://docs.codat.io/accounting-api#/operations/get-create-chartOfAccounts-model).
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=chartOfAccounts) for integrations that support creating an account.
   */
  async create(
    companyId: string,
    connectionId: string,
    timeoutInMinutes?: number | undefined,
    accountPrototype?: shared.AccountPrototype | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateAccountResponse> {
    return unwrapAsync(accountsCreate(
      this,
      companyId,
      connectionId,
      timeoutInMinutes,
      accountPrototype,
      options,
    ));
  }

  /**
   * Get create account model
   *
   * @remarks
   * The *Get create account model* endpoint returns the expected data for the request payload when creating an [account](https://docs.codat.io/accounting-api#/schemas/Account) for a given company and integration.
   *
   * [Accounts](https://docs.codat.io/accounting-api#/schemas/Account) are the categories a business uses to record accounting transactions.
   *
   * **Integration-specific behaviour**
   *
   * See the *response examples* for integration-specific indicative models.
   *
   * Check out our [coverage explorer](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=chartOfAccounts) for integrations that support creating an account.
   */
  async getCreateModel(
    companyId: string,
    connectionId: string,
    options?: RequestOptions,
  ): Promise<operations.GetCreateChartOfAccountsModelResponse> {
    return unwrapAsync(accountsGetCreateModel(
      this,
      companyId,
      connectionId,
      options,
    ));
  }

  /**
   * List accounts
   *
   * @remarks
   * The *List accounts* endpoint returns a list of [accounts](https://docs.codat.io/accounting-api#/schemas/Account) for a given company's connection.
   *
   * [Accounts](https://docs.codat.io/accounting-api#/schemas/Account) are the categories a business uses to record accounting transactions.
   *
   * Before using this endpoint, you must have [retrieved data for the company](https://docs.codat.io/codat-api#/operations/refresh-company-data).
   */
  async list(
    request: operations.ListAccountsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListAccountsResponse> {
    return unwrapAsync(accountsList(
      this,
      request,
      options,
    ));
  }
}
