/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CreateAccountRequest = {
  accountPrototype?: shared.AccountPrototype | undefined;
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  /**
   * Time limit for the push operation to complete before it is timed out.
   */
  timeoutInMinutes?: number | undefined;
};

export type CreateAccountResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Success
   */
  createAccountResponse?: shared.CreateAccountResponse | undefined;
  /**
   * The request made is not valid.
   */
  errorMessage?: shared.ErrorMessage | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const CreateAccountRequest$inboundSchema: z.ZodType<
  CreateAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountPrototype: shared.AccountPrototype$inboundSchema.optional(),
  companyId: z.string(),
  connectionId: z.string(),
  timeoutInMinutes: z.number().int().optional(),
});

/** @internal */
export type CreateAccountRequest$Outbound = {
  accountPrototype?: shared.AccountPrototype$Outbound | undefined;
  companyId: string;
  connectionId: string;
  timeoutInMinutes?: number | undefined;
};

/** @internal */
export const CreateAccountRequest$outboundSchema: z.ZodType<
  CreateAccountRequest$Outbound,
  z.ZodTypeDef,
  CreateAccountRequest
> = z.object({
  accountPrototype: shared.AccountPrototype$outboundSchema.optional(),
  companyId: z.string(),
  connectionId: z.string(),
  timeoutInMinutes: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountRequest$ {
  /** @deprecated use `CreateAccountRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAccountRequest$inboundSchema;
  /** @deprecated use `CreateAccountRequest$outboundSchema` instead. */
  export const outboundSchema = CreateAccountRequest$outboundSchema;
  /** @deprecated use `CreateAccountRequest$Outbound` instead. */
  export type Outbound = CreateAccountRequest$Outbound;
}

export function createAccountRequestToJSON(
  createAccountRequest: CreateAccountRequest,
): string {
  return JSON.stringify(
    CreateAccountRequest$outboundSchema.parse(createAccountRequest),
  );
}

export function createAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountRequest' from JSON`,
  );
}

/** @internal */
export const CreateAccountResponse$inboundSchema: z.ZodType<
  CreateAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  CreateAccountResponse: shared.CreateAccountResponse$inboundSchema.optional(),
  ErrorMessage: shared.ErrorMessage$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "CreateAccountResponse": "createAccountResponse",
    "ErrorMessage": "errorMessage",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type CreateAccountResponse$Outbound = {
  ContentType: string;
  CreateAccountResponse?: shared.CreateAccountResponse$Outbound | undefined;
  ErrorMessage?: shared.ErrorMessage$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const CreateAccountResponse$outboundSchema: z.ZodType<
  CreateAccountResponse$Outbound,
  z.ZodTypeDef,
  CreateAccountResponse
> = z.object({
  contentType: z.string(),
  createAccountResponse: shared.CreateAccountResponse$outboundSchema.optional(),
  errorMessage: shared.ErrorMessage$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    createAccountResponse: "CreateAccountResponse",
    errorMessage: "ErrorMessage",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountResponse$ {
  /** @deprecated use `CreateAccountResponse$inboundSchema` instead. */
  export const inboundSchema = CreateAccountResponse$inboundSchema;
  /** @deprecated use `CreateAccountResponse$outboundSchema` instead. */
  export const outboundSchema = CreateAccountResponse$outboundSchema;
  /** @deprecated use `CreateAccountResponse$Outbound` instead. */
  export type Outbound = CreateAccountResponse$Outbound;
}

export function createAccountResponseToJSON(
  createAccountResponse: CreateAccountResponse,
): string {
  return JSON.stringify(
    CreateAccountResponse$outboundSchema.parse(createAccountResponse),
  );
}

export function createAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountResponse' from JSON`,
  );
}
