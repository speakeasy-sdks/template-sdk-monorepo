/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ListAccountTransactionsRequest = {
  /**
   * Unique identifier for a company.
   */
  companyId: string;
  /**
   * Unique identifier for a connection.
   */
  connectionId: string;
  /**
   * Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
   */
  orderBy?: string | undefined;
  /**
   * Page number. [Read more](https://docs.codat.io/using-the-api/paging).
   */
  page?: number | undefined;
  /**
   * Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
   */
  pageSize?: number | undefined;
  /**
   * Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
   */
  query?: string | undefined;
};

export type ListAccountTransactionsResponse = {
  /**
   * Success
   */
  accountTransactions?: shared.AccountTransactions | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Your `query` parameter was not correctly formed
   */
  errorMessage?: shared.ErrorMessage | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ListAccountTransactionsRequest$inboundSchema: z.ZodType<
  ListAccountTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  orderBy: z.string().optional(),
  page: z.number().int().default(1),
  pageSize: z.number().int().default(100),
  query: z.string().optional(),
});

/** @internal */
export type ListAccountTransactionsRequest$Outbound = {
  companyId: string;
  connectionId: string;
  orderBy?: string | undefined;
  page: number;
  pageSize: number;
  query?: string | undefined;
};

/** @internal */
export const ListAccountTransactionsRequest$outboundSchema: z.ZodType<
  ListAccountTransactionsRequest$Outbound,
  z.ZodTypeDef,
  ListAccountTransactionsRequest
> = z.object({
  companyId: z.string(),
  connectionId: z.string(),
  orderBy: z.string().optional(),
  page: z.number().int().default(1),
  pageSize: z.number().int().default(100),
  query: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountTransactionsRequest$ {
  /** @deprecated use `ListAccountTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAccountTransactionsRequest$inboundSchema;
  /** @deprecated use `ListAccountTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAccountTransactionsRequest$outboundSchema;
  /** @deprecated use `ListAccountTransactionsRequest$Outbound` instead. */
  export type Outbound = ListAccountTransactionsRequest$Outbound;
}

export function listAccountTransactionsRequestToJSON(
  listAccountTransactionsRequest: ListAccountTransactionsRequest,
): string {
  return JSON.stringify(
    ListAccountTransactionsRequest$outboundSchema.parse(
      listAccountTransactionsRequest,
    ),
  );
}

export function listAccountTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountTransactionsRequest' from JSON`,
  );
}

/** @internal */
export const ListAccountTransactionsResponse$inboundSchema: z.ZodType<
  ListAccountTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  AccountTransactions: shared.AccountTransactions$inboundSchema.optional(),
  ContentType: z.string(),
  ErrorMessage: shared.ErrorMessage$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "AccountTransactions": "accountTransactions",
    "ContentType": "contentType",
    "ErrorMessage": "errorMessage",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ListAccountTransactionsResponse$Outbound = {
  AccountTransactions?: shared.AccountTransactions$Outbound | undefined;
  ContentType: string;
  ErrorMessage?: shared.ErrorMessage$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ListAccountTransactionsResponse$outboundSchema: z.ZodType<
  ListAccountTransactionsResponse$Outbound,
  z.ZodTypeDef,
  ListAccountTransactionsResponse
> = z.object({
  accountTransactions: shared.AccountTransactions$outboundSchema.optional(),
  contentType: z.string(),
  errorMessage: shared.ErrorMessage$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    accountTransactions: "AccountTransactions",
    contentType: "ContentType",
    errorMessage: "ErrorMessage",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountTransactionsResponse$ {
  /** @deprecated use `ListAccountTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAccountTransactionsResponse$inboundSchema;
  /** @deprecated use `ListAccountTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAccountTransactionsResponse$outboundSchema;
  /** @deprecated use `ListAccountTransactionsResponse$Outbound` instead. */
  export type Outbound = ListAccountTransactionsResponse$Outbound;
}

export function listAccountTransactionsResponseToJSON(
  listAccountTransactionsResponse: ListAccountTransactionsResponse,
): string {
  return JSON.stringify(
    ListAccountTransactionsResponse$outboundSchema.parse(
      listAccountTransactionsResponse,
    ),
  );
}

export function listAccountTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountTransactionsResponse' from JSON`,
  );
}
