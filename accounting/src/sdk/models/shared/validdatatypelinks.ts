/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * When querying Codat's data model, some data types return `validDatatypeLinks` metadata in the JSON response. This indicates where that object can be used as a reference—a _valid link_—when creating or updating other data.
 *
 * @remarks
 *
 * For example, `validDatatypeLinks` might indicate the following references:
 *
 * - Which tax rates are valid to use on the line item of a bill.
 * - Which items can be used when creating an invoice.
 *
 * You can use `validDatatypeLinks` to present your SMB customers with only valid choices when selecting objects from a list, for example.
 *
 * ## `validDatatypeLinks` example
 *
 * The following example uses the `Accounting.Accounts` data type. It shows that, on the linked integration, this account is valid as the account on a payment or bill payment; and as the account referenced on the line item of a direct income or direct cost. Because there is no valid link to Invoices or Bills, using this account on those data types will result in an error.
 *
 * ```json validDatatypeLinks for an account
 * {
 *             "id": "bd9e85e0-0478-433d-ae9f-0b3c4f04bfe4",
 *             "nominalCode": "090",
 *             "name": "Business Bank Account",
 *             #...
 *             "validDatatypeLinks": [
 *                 {
 *                     "property": "Id",
 *                     "links": [
 *                         "Payment.AccountRef.Id",
 *                         "BillPayment.AccountRef.Id",
 *                         "DirectIncome.LineItems.AccountRef.Id",
 *                         "DirectCost.LineItems.AccountRef.Id"
 *                     ]
 *                 }
 *             ]
 *         }
 * ```
 *
 * ## Support for `validDatatypeLinks`
 *
 * Codat currently supports `validDatatypeLinks` for some data types on our Xero, QuickBooks Online, QuickBooks Desktop, Exact (NL), and Sage Business Cloud integrations.
 *
 * If you'd like us to extend support to more data types or integrations, suggest or vote for this on our <a href="https://portal.productboard.com/codat/5-product-roadmap">Product Roadmap</a>.
 */
export type ValidDataTypeLinks = {
  /**
   * Supported `dataTypes` that the record can be linked to.
   */
  links?: Array<string> | null | undefined;
  /**
   * The property from the account that can be linked.
   */
  property?: string | null | undefined;
};

/** @internal */
export const ValidDataTypeLinks$inboundSchema: z.ZodType<
  ValidDataTypeLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  links: z.nullable(z.array(z.string())).optional(),
  property: z.nullable(z.string()).optional(),
});

/** @internal */
export type ValidDataTypeLinks$Outbound = {
  links?: Array<string> | null | undefined;
  property?: string | null | undefined;
};

/** @internal */
export const ValidDataTypeLinks$outboundSchema: z.ZodType<
  ValidDataTypeLinks$Outbound,
  z.ZodTypeDef,
  ValidDataTypeLinks
> = z.object({
  links: z.nullable(z.array(z.string())).optional(),
  property: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidDataTypeLinks$ {
  /** @deprecated use `ValidDataTypeLinks$inboundSchema` instead. */
  export const inboundSchema = ValidDataTypeLinks$inboundSchema;
  /** @deprecated use `ValidDataTypeLinks$outboundSchema` instead. */
  export const outboundSchema = ValidDataTypeLinks$outboundSchema;
  /** @deprecated use `ValidDataTypeLinks$Outbound` instead. */
  export type Outbound = ValidDataTypeLinks$Outbound;
}

export function validDataTypeLinksToJSON(
  validDataTypeLinks: ValidDataTypeLinks,
): string {
  return JSON.stringify(
    ValidDataTypeLinks$outboundSchema.parse(validDataTypeLinks),
  );
}

export function validDataTypeLinksFromJSON(
  jsonString: string,
): SafeParseResult<ValidDataTypeLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidDataTypeLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidDataTypeLinks' from JSON`,
  );
}
