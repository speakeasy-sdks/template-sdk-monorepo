/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Name of underlying data type.
 */
export enum AccountTransactionLineRecordRefDataType {
  BankTransactions = "bankTransactions",
  BillCreditNotes = "billCreditNotes",
  BillPayments = "billPayments",
  Bills = "bills",
  CreditNotes = "creditNotes",
  DirectCosts = "directCosts",
  DirectIncomes = "directIncomes",
  Invoices = "invoices",
  JournalEntries = "journalEntries",
  Payments = "payments",
  Transfers = "transfers",
}

/**
 * Links an account transaction line to the underlying record that created it.
 */
export type AccountTransactionLineRecordRef = {
  /**
   * Name of underlying data type.
   */
  dataType?: AccountTransactionLineRecordRefDataType | undefined;
  /**
   * 'id' of the underlying record or data type.
   */
  id?: string | undefined;
};

/** @internal */
export const AccountTransactionLineRecordRefDataType$inboundSchema:
  z.ZodNativeEnum<typeof AccountTransactionLineRecordRefDataType> = z
    .nativeEnum(AccountTransactionLineRecordRefDataType);

/** @internal */
export const AccountTransactionLineRecordRefDataType$outboundSchema:
  z.ZodNativeEnum<typeof AccountTransactionLineRecordRefDataType> =
    AccountTransactionLineRecordRefDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountTransactionLineRecordRefDataType$ {
  /** @deprecated use `AccountTransactionLineRecordRefDataType$inboundSchema` instead. */
  export const inboundSchema =
    AccountTransactionLineRecordRefDataType$inboundSchema;
  /** @deprecated use `AccountTransactionLineRecordRefDataType$outboundSchema` instead. */
  export const outboundSchema =
    AccountTransactionLineRecordRefDataType$outboundSchema;
}

/** @internal */
export const AccountTransactionLineRecordRef$inboundSchema: z.ZodType<
  AccountTransactionLineRecordRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataType: AccountTransactionLineRecordRefDataType$inboundSchema.optional(),
  id: z.string().optional(),
});

/** @internal */
export type AccountTransactionLineRecordRef$Outbound = {
  dataType?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const AccountTransactionLineRecordRef$outboundSchema: z.ZodType<
  AccountTransactionLineRecordRef$Outbound,
  z.ZodTypeDef,
  AccountTransactionLineRecordRef
> = z.object({
  dataType: AccountTransactionLineRecordRefDataType$outboundSchema.optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountTransactionLineRecordRef$ {
  /** @deprecated use `AccountTransactionLineRecordRef$inboundSchema` instead. */
  export const inboundSchema = AccountTransactionLineRecordRef$inboundSchema;
  /** @deprecated use `AccountTransactionLineRecordRef$outboundSchema` instead. */
  export const outboundSchema = AccountTransactionLineRecordRef$outboundSchema;
  /** @deprecated use `AccountTransactionLineRecordRef$Outbound` instead. */
  export type Outbound = AccountTransactionLineRecordRef$Outbound;
}

export function accountTransactionLineRecordRefToJSON(
  accountTransactionLineRecordRef: AccountTransactionLineRecordRef,
): string {
  return JSON.stringify(
    AccountTransactionLineRecordRef$outboundSchema.parse(
      accountTransactionLineRecordRef,
    ),
  );
}

export function accountTransactionLineRecordRefFromJSON(
  jsonString: string,
): SafeParseResult<AccountTransactionLineRecordRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountTransactionLineRecordRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountTransactionLineRecordRef' from JSON`,
  );
}
