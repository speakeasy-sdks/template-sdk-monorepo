/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PushOptionType,
  PushOptionType$inboundSchema,
  PushOptionType$outboundSchema,
} from "./pushoptiontype.js";

export type PushOptionChoice = {
  /**
   * A description of the property.
   */
  description?: string | undefined;
  /**
   * The property's display name.
   */
  displayName?: string | undefined;
  /**
   * The property is required if `True`.
   */
  required?: boolean | undefined;
  /**
   * The option type.
   */
  type?: PushOptionType | undefined;
  /**
   * Allowed value for field.
   */
  value?: string | undefined;
};

/** @internal */
export const PushOptionChoice$inboundSchema: z.ZodType<
  PushOptionChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  displayName: z.string().optional(),
  required: z.boolean().optional(),
  type: PushOptionType$inboundSchema.optional(),
  value: z.string().optional(),
});

/** @internal */
export type PushOptionChoice$Outbound = {
  description?: string | undefined;
  displayName?: string | undefined;
  required?: boolean | undefined;
  type?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const PushOptionChoice$outboundSchema: z.ZodType<
  PushOptionChoice$Outbound,
  z.ZodTypeDef,
  PushOptionChoice
> = z.object({
  description: z.string().optional(),
  displayName: z.string().optional(),
  required: z.boolean().optional(),
  type: PushOptionType$outboundSchema.optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushOptionChoice$ {
  /** @deprecated use `PushOptionChoice$inboundSchema` instead. */
  export const inboundSchema = PushOptionChoice$inboundSchema;
  /** @deprecated use `PushOptionChoice$outboundSchema` instead. */
  export const outboundSchema = PushOptionChoice$outboundSchema;
  /** @deprecated use `PushOptionChoice$Outbound` instead. */
  export type Outbound = PushOptionChoice$Outbound;
}

export function pushOptionChoiceToJSON(
  pushOptionChoice: PushOptionChoice,
): string {
  return JSON.stringify(
    PushOptionChoice$outboundSchema.parse(pushOptionChoice),
  );
}

export function pushOptionChoiceFromJSON(
  jsonString: string,
): SafeParseResult<PushOptionChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushOptionChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushOptionChoice' from JSON`,
  );
}
