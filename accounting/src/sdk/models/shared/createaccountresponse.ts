/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountStatus,
  AccountStatus$inboundSchema,
  AccountStatus$outboundSchema,
} from "./accountstatus.js";
import {
  AccountType,
  AccountType$inboundSchema,
  AccountType$outboundSchema,
} from "./accounttype.js";
import {
  DataType,
  DataType$inboundSchema,
  DataType$outboundSchema,
} from "./datatype.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import {
  PushOperationChange,
  PushOperationChange$inboundSchema,
  PushOperationChange$Outbound,
  PushOperationChange$outboundSchema,
} from "./pushoperationchange.js";
import {
  PushOperationStatus,
  PushOperationStatus$inboundSchema,
  PushOperationStatus$outboundSchema,
} from "./pushoperationstatus.js";
import {
  SupplementalData,
  SupplementalData$inboundSchema,
  SupplementalData$Outbound,
  SupplementalData$outboundSchema,
} from "./supplementaldata.js";
import {
  Validation,
  Validation$inboundSchema,
  Validation$Outbound,
  Validation$outboundSchema,
} from "./validation.js";
import {
  ValidDataTypeLinks,
  ValidDataTypeLinks$inboundSchema,
  ValidDataTypeLinks$Outbound,
  ValidDataTypeLinks$outboundSchema,
} from "./validdatatypelinks.js";

/**
 * > **Language tip:** Accounts are also referred to as **chart of accounts**, **nominal accounts**, and **general ledger**.
 *
 * @remarks
 *
 * View the coverage for accounts in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=chartOfAccounts" target="_blank">Data coverage explorer</a>.
 *
 * ## Overview
 *
 * Accounts are the categories a business uses to record accounting transactions. From the Accounts endpoints, you can retrieve a list of all accounts for a specified company.
 *
 * The categories for an account include:
 * * Asset
 * * Expense
 * * Income
 * * Liability
 * * Equity.
 *
 * The same account may have a different category based on the integration it is used in. For example, a current account (known as checking in the US) should be categorized as `Asset.Current` for Xero, and `Asset.Bank.Checking` for QuickBooks Online.
 *
 * At the same time, each integration may have its own requirements to the categories. For example, a Paypal account in Xero is of the `Asset.Bank` category and therefore requires additional properties to be provided.
 *
 * To determine the list of allowed categories for a specific integration, you can:
 * - Follow our [Create, update, delete data](https://docs.codat.io/using-the-api/push) guide and use the [Get create account model](https://docs.codat.io/accounting-api#/operations/get-create-chartOfAccounts-model).
 * - Refer to the integration's own documentation.
 *
 * > **Accounts with no category**
 * >
 * > If an account is pulled from the chart of accounts and its nominal code does not lie within the category layout for the company's accounts, then the **type** is `Unknown`. The **fullyQualifiedCategory** and **fullyQualifiedName** fields return `null`.
 * >
 * > This approach gives a true representation of the company's accounts whilst preventing distorting financials such as a company's profit and loss and balance sheet reports.
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type AccountingAccount = {
  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
   *
   * @remarks
   *
   * ## Unknown currencies
   *
   * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
   *
   * There are only a very small number of edge cases where this currency code is returned by the Codat system.
   */
  currency?: string | undefined;
  /**
   * Current balance in the account.
   */
  currentBalance?: Decimal$ | number | null | undefined;
  /**
   * Description for the account.
   */
  description?: string | null | undefined;
  /**
   * Full category of the account.
   *
   * @remarks
   *
   * For example, `Liability.Current` or `Income.Revenue`. To determine a list of possible categories for each integration, see our examples, follow our [Create, update, delete data](https://docs.codat.io/using-the-api/push) guide, or refer to the integration's own documentation.
   */
  fullyQualifiedCategory?: string | null | undefined;
  /**
   * Full name of the account, for example:
   *
   * @remarks
   * - `Cash On Hand`
   * - `Rents Held In Trust`
   * - `Fixed Asset`
   */
  fullyQualifiedName?: string | null | undefined;
  /**
   * Identifier for the account, unique for the company.
   */
  id?: string | undefined;
  /**
   * Confirms whether the account is a bank account or not.
   */
  isBankAccount?: boolean | undefined;
  metadata?: Metadata | undefined;
  modifiedDate?: string | undefined;
  /**
   * Name of the account.
   */
  name?: string | null | undefined;
  /**
   * Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
   */
  nominalCode?: string | null | undefined;
  sourceModifiedDate?: string | undefined;
  /**
   * Status of the account
   */
  status?: AccountStatus | undefined;
  /**
   * Supplemental data is additional data you can include in our standard data types.
   *
   * @remarks
   *
   * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
   */
  supplementalData?: SupplementalData | undefined;
  /**
   * Type of account
   */
  type?: AccountType | undefined;
  /**
   * The validDatatypeLinks can be used to determine whether an account can be correctly mapped to another object; for example, accounts with a `type` of `income` might only support being used on an Invoice and Direct Income. For more information, see [Valid Data Type Links](/accounting-api#/schemas/ValidDataTypeLinks).
   */
  validDatatypeLinks?: Array<ValidDataTypeLinks> | null | undefined;
};

export type CreateAccountResponse = {
  /**
   * Contains a single entry that communicates which record has changed and the manner in which it changed.
   */
  changes?: Array<PushOperationChange> | null | undefined;
  /**
   * Unique identifier for your SMB in Codat.
   */
  companyId: string;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  completedOnUtc?: string | undefined;
  data?: AccountingAccount | null | undefined;
  /**
   * Unique identifier for a company's data connection.
   */
  dataConnectionKey: string;
  /**
   * Available data types
   */
  dataType?: DataType | undefined;
  /**
   * A message about the error.
   */
  errorMessage?: string | null | undefined;
  /**
   * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
   */
  pushOperationKey: string;
  /**
   * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
   *
   * @remarks
   *
   * ```
   * 2020-10-08T22:40:50Z
   * 2021-01-01T00:00:00
   * ```
   *
   * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
   *
   * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
   * - Unqualified local time: `2021-11-15T01:00:00`
   * - UTC time offsets: `2021-11-15T01:00:00-05:00`
   *
   * > Time zones
   * >
   * > Not all dates from Codat will contain information about time zones.
   * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   */
  requestedOnUtc: string;
  /**
   * The current status of the push operation.
   */
  status: PushOperationStatus;
  /**
   * Push status code.
   */
  statusCode: number;
  /**
   * Number of minutes the push operation must complete within before it times out.
   */
  timeoutInMinutes?: number | null | undefined;
  /**
   * Number of seconds the push operation must complete within before it times out.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  timeoutInSeconds?: number | null | undefined;
  /**
   * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
   */
  validation?: Validation | undefined;
};

/** @internal */
export const AccountingAccount$inboundSchema: z.ZodType<
  AccountingAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  currentBalance: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
  description: z.nullable(z.string()).optional(),
  fullyQualifiedCategory: z.nullable(z.string()).optional(),
  fullyQualifiedName: z.nullable(z.string()).optional(),
  id: z.string().optional(),
  isBankAccount: z.boolean().optional(),
  metadata: Metadata$inboundSchema.optional(),
  modifiedDate: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  nominalCode: z.nullable(z.string()).optional(),
  sourceModifiedDate: z.string().optional(),
  status: AccountStatus$inboundSchema.optional(),
  supplementalData: SupplementalData$inboundSchema.optional(),
  type: AccountType$inboundSchema.optional(),
  validDatatypeLinks: z.nullable(z.array(ValidDataTypeLinks$inboundSchema))
    .optional(),
});

/** @internal */
export type AccountingAccount$Outbound = {
  currency?: string | undefined;
  currentBalance?: number | null | undefined;
  description?: string | null | undefined;
  fullyQualifiedCategory?: string | null | undefined;
  fullyQualifiedName?: string | null | undefined;
  id?: string | undefined;
  isBankAccount?: boolean | undefined;
  metadata?: Metadata$Outbound | undefined;
  modifiedDate?: string | undefined;
  name?: string | null | undefined;
  nominalCode?: string | null | undefined;
  sourceModifiedDate?: string | undefined;
  status?: string | undefined;
  supplementalData?: SupplementalData$Outbound | undefined;
  type?: string | undefined;
  validDatatypeLinks?: Array<ValidDataTypeLinks$Outbound> | null | undefined;
};

/** @internal */
export const AccountingAccount$outboundSchema: z.ZodType<
  AccountingAccount$Outbound,
  z.ZodTypeDef,
  AccountingAccount
> = z.object({
  currency: z.string().optional(),
  currentBalance: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  fullyQualifiedCategory: z.nullable(z.string()).optional(),
  fullyQualifiedName: z.nullable(z.string()).optional(),
  id: z.string().optional(),
  isBankAccount: z.boolean().optional(),
  metadata: Metadata$outboundSchema.optional(),
  modifiedDate: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  nominalCode: z.nullable(z.string()).optional(),
  sourceModifiedDate: z.string().optional(),
  status: AccountStatus$outboundSchema.optional(),
  supplementalData: SupplementalData$outboundSchema.optional(),
  type: AccountType$outboundSchema.optional(),
  validDatatypeLinks: z.nullable(z.array(ValidDataTypeLinks$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAccount$ {
  /** @deprecated use `AccountingAccount$inboundSchema` instead. */
  export const inboundSchema = AccountingAccount$inboundSchema;
  /** @deprecated use `AccountingAccount$outboundSchema` instead. */
  export const outboundSchema = AccountingAccount$outboundSchema;
  /** @deprecated use `AccountingAccount$Outbound` instead. */
  export type Outbound = AccountingAccount$Outbound;
}

export function accountingAccountToJSON(
  accountingAccount: AccountingAccount,
): string {
  return JSON.stringify(
    AccountingAccount$outboundSchema.parse(accountingAccount),
  );
}

export function accountingAccountFromJSON(
  jsonString: string,
): SafeParseResult<AccountingAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingAccount' from JSON`,
  );
}

/** @internal */
export const CreateAccountResponse$inboundSchema: z.ZodType<
  CreateAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  changes: z.nullable(z.array(PushOperationChange$inboundSchema)).optional(),
  companyId: z.string(),
  completedOnUtc: z.string().optional(),
  data: z.nullable(z.lazy(() => AccountingAccount$inboundSchema)).optional(),
  dataConnectionKey: z.string(),
  dataType: DataType$inboundSchema.optional(),
  errorMessage: z.nullable(z.string()).optional(),
  pushOperationKey: z.string(),
  requestedOnUtc: z.string(),
  status: PushOperationStatus$inboundSchema,
  statusCode: z.number().int(),
  timeoutInMinutes: z.nullable(z.number().int()).optional(),
  timeoutInSeconds: z.nullable(z.number().int()).optional(),
  validation: Validation$inboundSchema.optional(),
});

/** @internal */
export type CreateAccountResponse$Outbound = {
  changes?: Array<PushOperationChange$Outbound> | null | undefined;
  companyId: string;
  completedOnUtc?: string | undefined;
  data?: AccountingAccount$Outbound | null | undefined;
  dataConnectionKey: string;
  dataType?: string | undefined;
  errorMessage?: string | null | undefined;
  pushOperationKey: string;
  requestedOnUtc: string;
  status: string;
  statusCode: number;
  timeoutInMinutes?: number | null | undefined;
  timeoutInSeconds?: number | null | undefined;
  validation?: Validation$Outbound | undefined;
};

/** @internal */
export const CreateAccountResponse$outboundSchema: z.ZodType<
  CreateAccountResponse$Outbound,
  z.ZodTypeDef,
  CreateAccountResponse
> = z.object({
  changes: z.nullable(z.array(PushOperationChange$outboundSchema)).optional(),
  companyId: z.string(),
  completedOnUtc: z.string().optional(),
  data: z.nullable(z.lazy(() => AccountingAccount$outboundSchema)).optional(),
  dataConnectionKey: z.string(),
  dataType: DataType$outboundSchema.optional(),
  errorMessage: z.nullable(z.string()).optional(),
  pushOperationKey: z.string(),
  requestedOnUtc: z.string(),
  status: PushOperationStatus$outboundSchema,
  statusCode: z.number().int(),
  timeoutInMinutes: z.nullable(z.number().int()).optional(),
  timeoutInSeconds: z.nullable(z.number().int()).optional(),
  validation: Validation$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountResponse$ {
  /** @deprecated use `CreateAccountResponse$inboundSchema` instead. */
  export const inboundSchema = CreateAccountResponse$inboundSchema;
  /** @deprecated use `CreateAccountResponse$outboundSchema` instead. */
  export const outboundSchema = CreateAccountResponse$outboundSchema;
  /** @deprecated use `CreateAccountResponse$Outbound` instead. */
  export type Outbound = CreateAccountResponse$Outbound;
}

export function createAccountResponseToJSON(
  createAccountResponse: CreateAccountResponse,
): string {
  return JSON.stringify(
    CreateAccountResponse$outboundSchema.parse(createAccountResponse),
  );
}

export function createAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountResponse' from JSON`,
  );
}
