openapi: 3.1.0
servers:
  - description: Production
    url: 'https://api.codat.io'
info:
  title: Lending API
  description: |-
    Our Lending API helps you make smarter credit decisions on small businesses by enabling you to pull your customers' latest data from accounting, banking, and commerce platforms they are already using. It also includes features to help providers verify the accuracy of data and process it more efficiently.

    The Lending API is built on top of the latest accounting, commerce, and banking data, providing you with the most important data points you need to get a full picture of SMB creditworthiness and make a comprehensive assessment of your customers.

    [Explore product](https://docs.codat.io/lending/overview) | [See OpenAPI spec](https://github.com/codatio/oas)

    <!-- Start Codat Tags Table -->
    ## Endpoints

    | Endpoints | Description |
    | :- |:- |
    | Companies | Create and manage your SMB users' companies. |
    | Connections | Create new and manage existing data connections for a company. |
    | Bank statements | Retrieve banking data from linked bank accounts. |
    | Sales | Retrieve standardized sales data from a linked commerce platform. |
    | Financial statements | Financial data and reports from a linked accounting platform. |
    | Liabilities | Debt and other liabilities. |
    | Accounts payable | Data from a linked accounting platform representing money the business owes money to its suppliers. |
    | Accounts receivable | Data from a linked accounting platform representing money owed to the business for sold goods or services. |
    | Transactions | Data from a linked accounting platform representing transactions. |
    | Company info | View company information fetched from the source platform. |
    | Data integrity | Match mutable accounting data with immutable banking data to increase confidence in financial data. |
    | Excel reports | Download reports in Excel format. |
    | Manage data | Control how data is retrieved from an integration. |
    | File upload | Endpoints to manage uploaded files. |
    | Loan writeback | Implement the [loan writeback](https://docs.codat.io/lending/guides/loan-writeback/introduction) procedure in your lending process to maintain an accurate position of a loan during the entire lending cycle. |
    <!-- End Codat Tags Table -->
  version: 3.0.0
  contact:
    name: Codat
    email: support@codat.io
  termsOfService: 'https://www.codat.io/legals/'
security:
  - auth_header: []
x-speakeasy-retries:
  strategy: backoff
  backoff:
    initialInterval: 500
    maxInterval: 60000
    maxElapsedTime: 3600000
    exponent: 1.5
  statusCodes:
    - 408
    - 429
    - 5XX
  retryConnectionErrors: true
x-speakeasy-name-override:
  - operationId: ^list-.*?
    methodNameOverride: list
  - operationId: ^list-.*?-attachments
    methodNameOverride: list-attachments
  - operationId: ^get-.*?
    methodNameOverride: get
  - operationId: ^get-create-.*?-model
    methodNameOverride: get-create-model
  - operationId: ^get-create-update.*?-model
    methodNameOverride: get-create-update-model
  - operationId: ^get-.*?-attachment
    methodNameOverride: get-attachment
  - operationId: ^update-.*?
    methodNameOverride: update
  - operationId: ^create-.*?
    methodNameOverride: create
  - operationId: ^delete-.*?
    methodNameOverride: delete
  - operationId: ^delete-.*?-attachment
    methodNameOverride: delete-attachment
  - operationId: ^download-.*?-attachment
    methodNameOverride: download-attachment
  - operationId: ^upload-.*?-attachment
    methodNameOverride: upload-attachment
x-codat-docs-path: lending-api
x-codat-keep-docs-paths-local: true
x-codat-speakeasy-pagination:
  type: offsetLimit
  inputs:
    - name: page
      in: parameters
      type: page
  outputs:
    results: $.results
tags:
  - name: Companies
    description: Create and manage your SMB users' companies.
  - name: Connections
    description: Create new and manage existing data connections for a company.
  - name: Bank statements
    description: Retrieve banking data from linked bank accounts.
  - name: Sales
    description: Retrieve standardized sales data from a linked commerce platform.
  - name: Financial statements
    description: Financial data and reports from a linked accounting platform.
  - name: Liabilities
    description: Debt and other liabilities.
  - name: Accounts payable
    description: Data from a linked accounting platform representing money the business owes money to its suppliers.
  - name: Accounts receivable
    description: Data from a linked accounting platform representing money owed to the business for sold goods or services.
  - name: Accounting bank data
    description: Access bank transactions from an accounting platform.
  - name: Transactions
    description: Data from a linked accounting platform representing transactions.
  - name: Company info
    description: View company information fetched from the source platform.
  - name: Data integrity
    description: Match mutable accounting data with immutable banking data to increase confidence in financial data.
  - name: Excel reports
    description: Download reports in Excel format.
  - name: Manage data
    description: Control how data is retrieved from an integration.
  - name: File upload
    description: Endpoints to manage uploaded files.
  - name: Loan writeback
    description: 'Implement the [loan writeback](https://docs.codat.io/lending/guides/loan-writeback/introduction) procedure in your lending process to maintain an accurate position of a loan during the entire lending cycle.'
paths:
  '/companies/{companyId}':
    put:
      summary: Update company
      description: "\uFEFFUse the *Update company* endpoint to update both the name and description of the company. \nIf you use [groups](https://docs.codat.io/lending-api#/schemas/Group) to manage a set of companies, use the [Add company](https://docs.codat.io/lending-api#/operations/add-company-to-group) or [Remove company](https://docs.codat.io/lending-api#/operations/remove-company-from-group) endpoints to add or remove a company from a group.\n\nA [company](https://docs.codat.io/lending-api#/schemas/Company) represents a business sharing access to their data.\nEach company can have multiple [connections](https://docs.codat.io/lending-api#/schemas/Connection) to different data sources, such as one connection to Xero for accounting data, two connections to Plaid for two bank accounts, and a connection to Zettle for POS data."
      operationId: update-company
      parameters:
        - $ref: '#/components/parameters/companyId'
      tags:
        - Companies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          $ref: '#/components/responses/Payment-Required'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not-Found'
        '429':
          $ref: '#/components/responses/Too-Many-Requests'
        '500':
          $ref: '#/components/responses/Internal-Server-Error'
        '503':
          $ref: '#/components/responses/Service-Unavailable'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyRequestBody'
            examples:
              Update name:
                value:
                  name: New Name
              Update description:
                value:
                  name: Same name
                  description: Additional documents required
    delete:
      summary: Delete a company
      operationId: delete-company
      parameters:
        - $ref: '#/components/parameters/companyId'
      description: "\uFEFFThe *Delete company* endpoint permanently deletes a [company](https://docs.codat.io/lending-api#/schemas/Company), its [connections](https://docs.codat.io/lending-api#/schemas/Connection) and any cached data. This operation is irreversible.\n\nA [company](https://docs.codat.io/lending-api#/schemas/Company) represents a business sharing access to their data.\nEach company can have multiple [connections](https://docs.codat.io/lending-api#/schemas/Connection) to different data sources, such as one connection to Xero for accounting data, two connections to Plaid for two bank accounts, and a connection to Zettle for POS data.\n"
      tags:
        - Companies
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          $ref: '#/components/responses/Payment-Required'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not-Found'
        '429':
          $ref: '#/components/responses/Too-Many-Requests'
        '500':
          $ref: '#/components/responses/Internal-Server-Error'
        '503':
          $ref: '#/components/responses/Service-Unavailable'
    get:
      summary: Get company
      operationId: get-company
      description: "\uFEFFThe *Get company* endpoint returns a single company for a given `companyId`.\n\nA [company](https://docs.codat.io/lending-api#/schemas/Company) represents a business sharing access to their data.\nEach company can have multiple [connections](https://docs.codat.io/lending-api#/schemas/Connection) to different data sources, such as one connection to Xero for accounting data, two connections to Plaid for two bank accounts, and a connection to Zettle for POS data.\n"
      parameters:
        - $ref: '#/components/parameters/companyId'
      tags:
        - Companies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
              examples:
                Simple company:
                  value:
                    id: ab12c58d-a678-4ebf-a159-ae99e1807bd0
                    name: My First Company
                    description: ''
                    platform: ''
                    redirect: 'https://link.codat.io/company/ab12c58d-a678-4ebf-a159-ae99e1807bd0'
                    dataConnections: []
                    created: '2022-11-10T10:45:18Z'
                    createdByUserName: Dan Tzabar
                With groups:
                  value:
                    id: ab12c58d-a678-4ebf-a159-ae99e1807bd0
                    name: My First Company
                    description: ''
                    platform: ''
                    redirect: 'https://link.codat.io/company/ab12c58d-a678-4ebf-a159-ae99e1807bd0'
                    dataConnections: []
                    created: '2022-11-10T10:45:18Z'
                    createdByUserName: Dan Tzabar
                    groups:
                      - id: f8a6f6ed-9812-4d1e-ba48-4346348403c8
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          $ref: '#/components/responses/Payment-Required'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not-Found'
        '429':
          $ref: '#/components/responses/Too-Many-Requests'
        '500':
          $ref: '#/components/responses/Internal-Server-Error'
        '503':
          $ref: '#/components/responses/Service-Unavailable'
components:
  schemas:
    AccountCategoriesUpdatedWebhook:
      title: Account categories updated webhook
      description: Webhook request body for the "Account categories updated" event.
      x-internal: true
      type: object
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/properties/ClientId'
        ClientName:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/properties/ClientName'
        CompanyId:
          $ref: '#/components/parameters/companyId/schema'
        DataConnectionId:
          $ref: '#/components/parameters/connectionId/schema'
        RuleId:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/properties/RuleId'
        RuleType:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/properties/RuleType'
        AlertId:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/properties/AlertId'
        Message:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/properties/Message'
        Data:
          $ref: '#/components/schemas/AccountCategoriesUpdatedWebhook/definitions/AccountCategoriesUpdatedWebhookData'
      definitions:
        AccountCategoriesUpdatedWebhookData:
          type: object
          title: Account categories updated webhook data
          properties:
            modifiedDate:
              description: The date on which the company's account categories were last modified in Codat.
              type: string
              example: '2022-10-23'
              title: Date
      examples:
        - ClientId: bae71d36-ff47-420a-b4a6-f8c9ddf41140
          ClientName: Bank of Dave
          CompanyId: 8a210b68-6988-11ed-a1eb-0242ac120002
          DataConnectionId: 2e9d2c44-f675-40ba-8049-353bfcb5e171
          RuleId: 70af3071-65d9-4ec3-b3cb-5283e8d55dac
          RuleType: Account Categories Updated
          AlertId: a9367074-b5c3-42c4-9be4-be129f43577e
          Message: Account categories updated for company f1c35bdc-1546-41b9-baf4-3f31135af968.
          Data:
            modifiedDate: '2019-08-24T14:15:22Z'
    AccountingAccount:
      title: 'Accounting: Account'
      description: "\uFEFF> **Language tip:** Accounts are also referred to as **chart of accounts**, **nominal accounts**, and **general ledger**.\n\nView the coverage for accounts in the <a className=\"external\" href=\"https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=chartOfAccounts\" target=\"_blank\">Data coverage explorer</a>.\n\n## Overview\n\nAccounts are the categories a business uses to record accounting transactions. From the Accounts endpoints, you can retrieve a list of all accounts for a specified company.\n\nThe categories for an account include:\n* Asset\n* Expense\n* Income\n* Liability\n* Equity.\n\nThe same account may have a different category based on the integration it is used in. For example, a current account (known as checking in the US) should be categorized as `Asset.Current` for Xero, and `Asset.Bank.Checking` for QuickBooks Online.\n\nAt the same time, each integration may have its own requirements to the categories. For example, a Paypal account in Xero is of the `Asset.Bank` category and therefore requires additional properties to be provided.\n\nTo determine the list of allowed categories for a specific integration, you can:\n- Follow our [Create, update, delete data](https://docs.codat.io/using-the-api/push) guide and use the [Get create account model](https://docs.codat.io/lending-api#/operations/get-create-chartOfAccounts-model).\n- Refer to the integration's own documentation.\n\n> **Accounts with no category**\n>\n> If an account is pulled from the chart of accounts and its nominal code does not lie within the category layout for the company's accounts, then the **type** is `Unknown`. The **fullyQualifiedCategory** and **fullyQualifiedName** fields return `null`.\n>\n> This approach gives a true representation of the company's accounts whilst preventing distorting financials such as a company's profit and loss and balance sheet reports."
      allOf:
        - properties:
            id:
              type: string
              description: 'Identifier for the account, unique for the company.'
              example: 1b6266d1-1e44-46c5-8eb5-a8f98e03124e
        - $ref: '#/components/schemas/AccountingAccount/definitions/accountPrototype'
        - properties:
            metadata:
              $ref: '#/components/schemas/Metadata'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        accountPrototype:
          title: Account prototype
          type: object
          properties:
            nominalCode:
              type: string
              nullable: true
              description: Reference given to each nominal account for a business. It ensures money is allocated to the correct account. This code isn't a unique identifier in the Codat system.
              example: '610'
            name:
              type: string
              nullable: true
              description: Name of the account.
              example: Accounts Receivable
            description:
              type: string
              nullable: true
              description: Description for the account.
              example: Invoices the business has issued but has not yet collected payment on.
            fullyQualifiedCategory:
              type: string
              nullable: true
              description: "Full category of the account. \r\n\r\nFor example, `Liability.Current` or `Income.Revenue`. To determine a list of possible categories for each integration, see our examples, follow our [Create, update, delete data](https://docs.codat.io/using-the-api/push) guide, or refer to the integration's own documentation."
              example: Asset.Current
            fullyQualifiedName:
              type: string
              nullable: true
              description: |-
                Full name of the account, for example:
                - `Cash On Hand`
                - `Rents Held In Trust`
                - `Fixed Asset`
              examples:
                - Cash On Hand
                - Fixed Asset
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
            currentBalance:
              type: number
              format: decimal
              nullable: true
              description: Current balance in the account.
              example: 0
            type:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountType'
            status:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountStatus'
            isBankAccount:
              type: boolean
              description: Confirms whether the account is a bank account or not.
            validDatatypeLinks:
              type: array
              nullable: true
              description: 'The validDatatypeLinks can be used to determine whether an account can be correctly mapped to another object; for example, accounts with a `type` of `income` might only support being used on an Invoice and Direct Income. For more information, see [Valid Data Type Links](/lending-api#/schemas/ValidDataTypeLinks).'
              items:
                title: Valid data type links
                description: |-
                  When querying Codat's data model, some data types return `validDatatypeLinks` metadata in the JSON response. This indicates where that object can be used as a reference—a _valid link_—when creating or updating other data.

                  For example, `validDatatypeLinks` might indicate the following references:

                  - Which tax rates are valid to use on the line item of a bill.
                  - Which items can be used when creating an invoice. 

                  You can use `validDatatypeLinks` to present your SMB customers with only valid choices when selecting objects from a list, for example.

                  ## `validDatatypeLinks` example

                  The following example uses the `Accounting.Accounts` data type. It shows that, on the linked integration, this account is valid as the account on a payment or bill payment; and as the account referenced on the line item of a direct income or direct cost. Because there is no valid link to Invoices or Bills, using this account on those data types will result in an error.

                  ```json validDatatypeLinks for an account
                  {
                              "id": "bd9e85e0-0478-433d-ae9f-0b3c4f04bfe4",
                              "nominalCode": "090",
                              "name": "Business Bank Account",
                              #...
                              "validDatatypeLinks": [
                                  {
                                      "property": "Id",
                                      "links": [
                                          "Payment.AccountRef.Id",
                                          "BillPayment.AccountRef.Id",
                                          "DirectIncome.LineItems.AccountRef.Id",
                                          "DirectCost.LineItems.AccountRef.Id"
                                      ]
                                  }
                              ]
                          }
                  ```



                  ## Support for `validDatatypeLinks`

                  Codat currently supports `validDatatypeLinks` for some data types on our Xero, QuickBooks Online, QuickBooks Desktop, Exact (NL), and Sage Business Cloud integrations. 

                  If you'd like us to extend support to more data types or integrations, suggest or vote for this on our <a href="https://portal.productboard.com/codat/5-product-roadmap">Product Roadmap</a>.
                type: object
                properties:
                  property:
                    type: string
                    nullable: true
                    description: The property from the account that can be linked.
                  links:
                    type: array
                    nullable: true
                    description: Supported `dataTypes` that the record can be linked to.
                    items:
                      type: string
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        accountRef:
          title: Account reference
          type: object
          description: 'Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.'
          properties:
            id:
              type: string
              description: '''id'' from the Accounts data type.'
            name:
              type: string
              description: '''name'' from the Accounts data type.'
        accountType:
          title: Account type
          enum:
            - Unknown
            - Asset
            - Expense
            - Income
            - Liability
            - Equity
          type: string
          description: Type of account
          example: Asset
        accountStatus:
          title: Account status
          enum:
            - Unknown
            - Active
            - Archived
            - Pending
          type: string
          description: Status of the account
          example: Active
      type: object
    AccountingAccounts:
      title: 'Accounting: Accounts'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingAccount'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingAccountTransaction:
      title: 'Accounting: Account transaction'
      description: |-
        > **Language tip:** In Codat, account transactions represent all transactions posted to a bank account within an accounting platform. For bank transactions posted within a banking platform, refer to [Banking transactions](https://docs.codat.io/lending-api#/operations/list-all-banking-transactions).

        > View the coverage for account transactions in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=accountTransactions" target="_blank">Data coverage explorer</a>.

        ## Overview

        In Codat’s data model, account transactions represent bank activity within an accounting platform. All transactions that go through a bank account are recorded as account transactions.

        Account transactions are created as a result of different business activities, for example:

        * Payments: for example, receiving money for payment against an invoice.
        * Bill payments: for example, spending money for a payment against a bill.
        * Direct costs: for example, withdrawing money from a bank account, either for cash purposes or to make a payment.
        * Direct incomes: for example, selling an item directly to a contact and receiving payment at point of sale.
        * Transfers: for example, transferring money between two bank accounts.

        Account transactions is the parent data type of [payments](https://docs.codat.io/lending-api#/schemas/Payment), [bill payments](https://docs.codat.io/lending-api#/schemas/BillPayment), [direct costs](https://docs.codat.io/lending-api#/schemas/DirectCost), [direct incomes](https://docs.codat.io/lending-api#/schemas/DirectIncome), and [transfers](https://docs.codat.io/lending-api#/schemas/Transfer).
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Identifier of the direct cost (unique to the company).
            transactionId:
              type: string
              nullable: true
              description: Identifier of the transaction (unique to the company).
            note:
              type: string
              nullable: true
              description: 'Additional information about the account transaction, if available.'
            bankAccountRef:
              $ref: '#/components/schemas/AccountingBankAccount/definitions/bankAccountRef'
              description: Reference to the bank account the account transaction is recorded against.
            date:
              $ref: '#/components/schemas/DateTime'
              description: The date the account transaction was recorded in the platform.
            status:
              enum:
                - Unknown
                - Unreconciled
                - Reconciled
                - Void
              type: string
              description: The status of the account transaction.
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
            lines:
              type: array
              nullable: true
              description: Array of account transaction lines.
              items:
                $ref: '#/components/schemas/AccountingAccountTransaction/definitions/accountTransactionLine'
            totalAmount:
              type: number
              format: decimal
              description: 'Total amount of the account transactions, inclusive of tax.'
            metadata:
              $ref: '#/components/schemas/Metadata'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        accountTransactionLine:
          type: object
          properties:
            description:
              type: string
              nullable: true
              description: Description of the account transaction.
            recordRef:
              $ref: '#/components/schemas/AccountingAccountTransaction/definitions/accountTransactionLineRecordRef'
            amount:
              type: number
              format: decimal
              description: Amount in the bill payment currency.
        accountTransactionLineRecordRef:
          type: object
          title: Record reference
          description: Links an account transaction line to the underlying record that created it.
          properties:
            id:
              type: string
              description: '''id'' of the underlying record or data type.'
            dataType:
              type: string
              description: Name of underlying data type.
              enum:
                - bankTransactions
                - billCreditNotes
                - billPayments
                - bills
                - creditNotes
                - directCosts
                - directIncomes
                - invoices
                - journalEntries
                - payments
                - transfers
              example: transfers
    AccountingAccountTransactions:
      title: 'Accounting: Account transactions'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingAccountTransaction'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingAddress:
      title: 'Accounting: Address'
      x-internal: true
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AccountingAddress/definitions/accountingAddressType'
        line1:
          type: string
          nullable: true
          description: Line 1 of the customer address.
        line2:
          type: string
          nullable: true
          description: Line 2 of the customer address.
        city:
          type: string
          nullable: true
          description: City of the customer address.
        region:
          type: string
          nullable: true
          description: Region of the customer address.
        country:
          type: string
          nullable: true
          description: Country of the customer address.
        postalCode:
          type: string
          nullable: true
          description: Postal code or zip code.
      required:
        - type
      definitions:
        accountingAddressType:
          description: The type of the address
          type: string
          enum:
            - Unknown
            - Billing
            - Delivery
    AccountingAgedCreditorReport:
      title: 'Accounting: Aged creditors report'
      description: |-
        The Aged Creditors report shows the total balance owed by a business to its suppliers over time.

        You can generate it for a company based on recently synced data from your customers' accounting platforms. The report is available in the **Reports** tab in the Codat portal.

        Total assets or liabilities are grouped into 30-day periods for each supplier, up to the current date. You can adjust the report date, period length, and number of periods to show on each report. The data can be grouped by customer or currency.

        > It is not guaranteed that write-offs are included in the Aged Creditors report.

        ## Underlying data

        The Aged Creditors report is generated from a set of required data types: [Suppliers](https://docs.codat.io/lending-api#/schemas/Supplier), [Bills](https://docs.codat.io/lending-api#/schemas/Bill), [Bill credit notes](https://docs.codat.io/lending-api#/schemas/BillCreditNote), and [Bill payments](https://docs.codat.io/lending-api#/schemas/BillPayment).

        To generate the report, the underlying data types must have been synced within 24 hours of each other. Otherwise an error is displayed when you try to run the report. Sync the required data types by clicking the link in the error, and then run the report again.

        > The Aged Creditor report runs based on the **issue dates** of the underlying data types rather than the due date.

        ## Accessing the Aged Creditors report in Portal

        Apart from returning the report via the API as JSON and query, you can also return the Aged Creditors report in the Codat portal.

        1. In the navigation bar, click **Companies**.
        2. Click the name of the company you want to generate the report for. The company's data page is displayed.
        3. Click the **Accounting** tab then click **Reports**.
        4. Select **Aged Creditors**.
        5. _(Optional)_ Edit the default reporting parameters.
           a. You can change the report date in the **Date** box. By default, the report includes transactions that occurred up to, but not including, today's date. To include transactions for today, enter tomorrow's date. 
           b. In the **Period Length Days** box, select the default period length for each column (the default is 30 days).
           b. In the **Number of Periods** box, enter the number of periods to show as columns in the report (the default is 4 periods).
        6. To run the report, click **Load aged creditors**.
        7. The report is generated and displayed at the bottom of the page.

        The report will be grouped per supplier and depending on the periods requested. The details indicates whether the amounts owed come from outstanding bills or bill credit notes.
      type: object
      properties:
        generated:
          $ref: '#/components/schemas/DateTime'
          description: Date and time the report was generated.
        reportDate:
          $ref: '#/components/schemas/DateTime'
          description: Date the report is generated up to.
        data:
          type: array
          description: Array of aged creditor.
          items:
            $ref: '#/components/schemas/AccountingAgedCreditorReport/definitions/agedCreditor'
      examples:
        - generated: '2022-10-23T00:00:00Z'
          reportDate: '2022-10-23T00:00:00Z'
          data:
            - customerId: f594cefb-7750-4c3a-bab2-b5322026dee9
              customerName: John Doe
              agedCurrencyOutstanding:
                - currency: GBP
                  agedOutstandingAmounts:
                    - fromDate: '2022-10-01T00:00:00Z'
                      toDate: '2022-10-31T00:00:00Z'
                      amount: 1547.5
                      details:
                        - name: Bills
                          amount: 1547.5
      definitions:
        agedCreditor:
          title: Aged creditor
          type: object
          properties:
            supplierId:
              type: string
              description: Supplier ID of the aged creditor.
              example: f594cefb-7750-4c3a-bab2-b5322026dee9
            supplierName:
              type: string
              description: Supplier name of the aged creditor.
              example: John Doe
            agedCurrencyOutstanding:
              type: array
              description: Array of aged creditors by currency.
              items:
                $ref: '#/components/schemas/AgedCurrencyOutstanding'
    AccountingAgedDebtorReport:
      type: object
      title: 'Accounting: Aged debtors report'
      description: |-
        The Aged Debtors report shows the total outstanding balance due from customers to the business over time. 

        You can generate it for a company based on recently synced data from your customers' accounting platforms. The report is available in the **Reports** tab in the Codat portal.

        Total assets or liabilities are grouped into 30-day periods for each customer, up to the current date. You can adjust the report date, period length, and number of periods to show on each report. The data can be grouped by customer or currency.

        > It is not guaranteed that write-offs are included in the Aged Debtors report.

        ## Underlying data

        The Aged Debtors report is generated from a set of required data types: [Customers](https://docs.codat.io/lending-api#/schemas/Customer), [Invoices](https://docs.codat.io/lending-api#/schemas/Invoice), [Credit notes](https://docs.codat.io/lending-api#/schemas/CreditNote), and [Payments](https://docs.codat.io/lending-api#/schemas/Payment).

        To generate the report, the underlying data types must have been synced within 24 hours of each other. Otherwise an error is displayed when you try to run the report. Sync the required data types by clicking the link in the error, and then run the report again.

        > The Aged Debtors report runs based on the **issue dates** of the underlying data types rather than the due date.

        ## Accessing the Aged Debtors report in Portal

        Apart from returning the report via the API as JSON and query, you can also return the Aged Debtors report in the Codat portal.

        1. In the navigation bar, click **Companies**.
        2. Click the name of the company you want to generate the report for. The company's data page is displayed.
        3. Click the **Accounting** tab then click **Reports**.
        4. Select **Aged Debtors**.
        5. _(Optional)_ Edit the default reporting parameters.
           a. You can change the report date in the **Date** box. By default, the report includes transactions that occurred up to, but not including, today's date. To include transactions for today, enter tomorrow's date. 
           b. In the **Period Length Days** box, select the default period length for each column (the default is 30 days).
           b. In the **Number of Periods** box, enter the number of periods to show as columns in the report (the default is 4 periods).
        6. To run the report, click **Load aged debtors**.
        7. The report is generated and displayed at the bottom of the page.

        The report will be grouped per supplier and depending on the periods requested. The details indicates whether the amounts owed come from outstanding invoices or credit notes.
      properties:
        generated:
          $ref: '#/components/schemas/DateTime'
          description: Date and time the report was generated.
        reportDate:
          $ref: '#/components/schemas/DateTime'
          description: Date the report is generated up to.
        data:
          type: array
          description: Array of aged debtors.
          items:
            $ref: '#/components/schemas/AccountingAgedDebtorReport/definitions/agedDebtor'
      definitions:
        agedDebtor:
          title: Aged debtor
          type: object
          properties:
            customerId:
              type: string
              description: Customer ID of the aged debtor.
              example: f594cefb-7750-4c3a-bab2-b5322026dee9
            customerName:
              type: string
              description: Customer name of the aged debtor.
              example: John Doe
            agedCurrencyOutstanding:
              type: array
              description: Array of aged debtors by currency.
              items:
                $ref: '#/components/schemas/AgedCurrencyOutstanding'
      examples:
        - generated: '2022-10-23T00:00:00Z'
          reportDate: '2022-10-23T00:00:00Z'
          data:
            - customerId: f594cefb-7750-4c3a-bab2-b5322026dee9
              customerName: John Doe
              agedCurrencyOutstanding:
                - currency: GBP
                  agedOutstandingAmounts:
                    - fromDate: '2022-10-01T00:00:00Z'
                      toDate: '2022-10-31T00:00:00Z'
                      amount: 1547.5
                      details:
                        - name: Invoices
                          amount: 1547.5
    AccountingAttachment:
      title: 'Accounting: Attachment'
      description: |
        The Codat API supports pulling and pushing of file attachments for invoices, bills, direct costs, and direct incomes.

        > **Retrieving attachments**
        > 
        > If a company is authorized, you can query the Codat API to read, download, and upload attachments without requiring a fresh sync of data.

        Unlike other data types, Codat doesn't support [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings) for attachments.

        Note that different integrations have different requirements to file size and extension of attachments.

        | Integration       | File size | File extension                                                                                                                                               |
        |-------------------|-----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|
        | Xero              | 4 MB      | 7Z, BMP, CSV, DOC, DOCX, EML, GIF, JPEG, JPG, KEYNOTE, MSG, NUMBERS, ODF,   ODS, ODT, PAGES, PDF, PNG, PPT, PPTX, RAR, RTF, TIF, TIFF, TXT, XLS, XLSX,   ZIP |
        | QuickBooks Online | 100 MB    | AI, CSV, DOC, DOCX, EPS, GIF, JPEG, JPG, ODS, PAGES, PDF, PNG, RTF, TIF,   TXT, XLS, XLSX, XML                                                               |
        | NetSuite          | 100 MB    | BMP, CSV, XLS, XLSX, JSON, PDF, PJPG, PJPEG, PNG, TXT, SVG, TIF, TIFF,   DOC, DOCX, ZIP                                                                      |
        | Dynamics 365 Business Central          | 350 MB    | Dynamics do not explicitly outline which file types are supported but they do state <a className="external" href="https://learn.microsoft.com/en-gb/dynamics365/business-central/ui-how-add-link-to-record#to-attach-a-file-to-a-purchase-invoice" target="_blank">here</a> that "You can attach any type of file, such as text, image, or video files".                                                                   |

        View the coverage for each integration in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting" target="_blank">Data coverage explorer</a>.
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 'Identifier for the attachment, unique for the company in the accounting platform.'
            name:
              type: string
              nullable: true
              description: Name of the attachment file.
            contentType:
              type: string
              nullable: true
              description: |-
                File type of the attachment. This is represented by appending the file type to the [IETF standard file naming requirements](https://tools.ietf.org/html/rfc6838). For example, for a jpeg file the output is **image/jpeg**.

                Supported file types vary per platform. 
            dateCreated:
              $ref: '#/components/schemas/DateTime'
            fileSize:
              type: integer
              format: int32
              nullable: true
              description: 'File size in bytes. For example, if this reads **46153**, then the file size is 46kb.'
            includeWhenSent:
              type: boolean
              description: 'If `true`, then the attachment is included with the associated invoice, bill or direct costs when it is printed, emailed, or sent to a customer, if the underlying accounting platform allows this.'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      examples: []
      definitions:
        attachments:
          title: Attachments
          type: object
          properties:
            attachments:
              description: An array of attachments related to the record.
              type: array
              items:
                $ref: '#/components/schemas/AccountingAttachment'
              nullable: true
    AccountingBalanceSheet:
      title: 'Accounting: Balance sheet'
      description: |-
        > View the coverage for balance sheet in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=balanceSheet" target="_blank">Data coverage explorer</a>.

        ## Overview

        The balance sheet is a snapshot of a company's accounts at a single point in time that provides a statement of the assets, liabilities and equity of an organization. It gives interested parties an idea of the company's financial position, in addition to displaying what the company owns and owes.

        > **Balance sheet or profit and loss report?**
        >
        > A profit and loss report summarises the total revenue, expenses, and profit or loss during a specified time period. A balance sheet report shows the financial position of a company at a specific moment in time.

        **Structure of this report**
        This report will reflect the structure and line descriptions that the business has set in their own accounting platform.

        **History**
        By default, Codat pulls (up to) 24 months of balance sheets for a company. You can adjust this to fetch more history, where available, by updating the `monthsToSync` value for `balanceSheet` on the [data type settings endpoint](https://docs.codat.io/lending-api#/operations/update-sync-settings).

        **Want to pull this in a standardised structure?**
        Our [Enhanced Financials](https://docs.codat.io/assess/enhanced-financials/overview) endpoints provide the same report under standardized headings, allowing you to pull it in the same format for all of your business customers.
      type: object
      additionalProperties: false
      properties:
        currency:
          $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
          description: Currency of the balance sheet.
        reports:
          type: array
          description: An array of balance sheet reports.
          items:
            $ref: '#/components/schemas/AccountingBalanceSheet/definitions/balanceSheet'
        mostRecentAvailableMonth:
          $ref: '#/components/schemas/DateTime'
          nullable: true
          description: Most recent available monthly report data.
        earliestAvailableMonth:
          $ref: '#/components/schemas/DateTime'
          nullable: true
          description: Earliest available monthly report data.
      required:
        - currency
        - reports
      definitions:
        balanceSheet:
          type: object
          properties:
            date:
              $ref: '#/components/schemas/DateTime'
              description: Point in time when a snapshot of a company's financial position is taken.
            assets:
              $ref: '#/components/schemas/ReportLine'
              description: 'ReportLines for assets. For example, fixed and current assets.'
            liabilities:
              $ref: '#/components/schemas/ReportLine'
              description: 'ReportLines for liabilities. For example, current liabilities.'
            netAssets:
              type: number
              format: decimal
              description: Value of net assets for a company in their base currency.
            equity:
              $ref: '#/components/schemas/ReportLine'
              description: 'ReportLines for equities. For example, retained and current year earnings. See below.'
          required:
            - netAssets
    AccountingBankAccount:
      title: 'Accounting: Bank account'
      description: |-
        > **Accessing Bank Accounts through Banking API**
        > 
        > This datatype was originally used for accessing bank account data both in accounting integrations and open banking aggregators. 
        > 
        > To view bank account data through the Banking API, please refer to the new datatype [here](https://docs.codat.io/lending-api#/schemas/Account)

        > View the coverage for bank accounts in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bankAccounts" target="_blank">Data coverage explorer</a>.

        ## Overview

        A list of bank accounts associated with a company and a specific data connection.

        Bank accounts data includes:
        * The name and ID of the account in the accounting platform.
        * The currency and balance of the account.
        * The sort code and account number.
      type: object
      allOf:
        - properties:
            id:
              type: string
              description: 'Identifier for the account, unique for the company in the accounting platform.'
        - $ref: '#/components/schemas/AccountingBankAccount/definitions/bankAccountPrototype'
        - properties:
            metadata:
              $ref: '#/components/schemas/Metadata'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        bankAccountPrototype:
          title: Bank account prototype
          type: object
          properties:
            accountName:
              type: string
              nullable: true
              description: Name of the bank account in the accounting platform.
            accountType:
              $ref: '#/components/schemas/AccountingBankAccountType'
            nominalCode:
              type: string
              nullable: true
              description: Code used to identify each nominal account for a business.
            sortCode:
              type: string
              nullable: true
              description: |-
                Sort code for the bank account.

                Xero integrations
                The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
            accountNumber:
              type: string
              nullable: true
              description: |-
                Account number for the bank account.

                Xero integrations
                Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.

                FreeAgent integrations
                For Credit accounts, only the last four digits are required. For other types, the field is optional.
            iBan:
              type: string
              nullable: true
              description: International bank account number of the account. Often used when making or receiving international payments.
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: Base currency of the bank account.
            balance:
              type: number
              format: decimal
              nullable: true
              description: Balance of the bank account.
            institution:
              type: string
              nullable: true
              description: The institution of the bank account.
            availableBalance:
              type: number
              format: decimal
              nullable: true
              description: Total available balance of the bank account as reported by the underlying data source. This may take into account overdrafts or pending transactions for example.
            overdraftLimit:
              type: number
              format: decimal
              nullable: true
              description: |-
                Pre-arranged overdraft limit of the account.

                The value is always positive. For example, an overdraftLimit of `1000` means that the balance of the account can go down to `-1000`.
        bankAccountCreateResponse:
          title: Create bank account response
          allOf:
            - properties:
                data:
                  allOf:
                    - $ref: '#/components/schemas/AccountingBankAccount'
                    - deprecated: true
            - $ref: '#/components/schemas/PushOperation'
        bankAccountRef:
          title: Bank account reference
          type: object
          properties:
            id:
              type: string
              description: Bank account 'id' for the account transaction.
            name:
              type: string
              description: bank account 'name' for the account transaction.
          description: Links to the Account transactions data type.
        bankAccounts:
          title: 'Accounting: Bank accounts'
          allOf:
            - type: object
              properties:
                results:
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountingBankAccount'
            - $ref: '#/components/schemas/PagingInfo'
    AccountingBankAccounts:
      x-internal: true
      title: 'Accounting: Bank accounts'
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingBankAccount'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingBankAccountType:
      title: Bank Account Type
      x-internal: true
      enum:
        - Unknown
        - Credit
        - Debit
      type: string
      description: |-
        The type of transactions and balances on the account.  
        For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
        For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
    AccountingBankTransaction:
      title: 'Accounting: Bank account transaction'
      description: |-
        > **Accessing Bank Accounts through Banking API**
        > 
        > This datatype was originally used for accessing bank account data both in accounting integrations and open banking aggregators. 
        >
        > To view bank account data through the Banking API, please refer to the new datatype [here](https://docs.codat.io/lending-api#/operations/list-all-banking-transactions)

        > View the coverage for bank transactions in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bankTransactions" target="_blank">Data coverage explorer</a>.

        ## Overview

        Transactional banking data for a specific company and account.

        Bank transactions include the:
        * Amount of the transaction.
        * Current account balance.
        * Transaction type, for example, credit, debit, or transfer.
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 'Identifier for the bank transaction, unique to the company in the accounting platform.'
            accountId:
              type: string
              nullable: true
              description: Unique identifier to the `accountId` the bank transactions originates from.
            clearedOnDate:
              $ref: '#/components/schemas/DateTime'
            description:
              type: string
              nullable: true
              description: Description of the bank transaction.
            reconciled:
              type: boolean
              description: '`True` if the bank transaction has been [reconciled](https://www.xero.com/uk/guides/what-is-bank-reconciliation/) in the accounting platform.'
            amount:
              type: number
              format: decimal
              description: The amount transacted in the bank transaction.
            balance:
              type: number
              format: decimal
              description: The remaining balance in the account with ID `accountId`.
            transactionType:
              $ref: '#/components/schemas/AccountingBankTransaction/definitions/bankTransactionType'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        bankTransactionType:
          title: Bank transaction type
          description: Type of transaction for the bank statement line.
          type: string
          enum:
            - Unknown
            - Credit
            - Debit
            - Int
            - Div
            - Fee
            - SerChg
            - Dep
            - Atm
            - Pos
            - Xfer
            - Check
            - Payment
            - Cash
            - DirectDep
            - DirectDebit
            - RepeatPmt
            - Other
    AccountingBankTransactions:
      title: 'Accounting: Accounting bank transactions'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingBankTransaction'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingBill:
      title: 'Accounting: Bill'
      description: |-
        > **Invoices or bills?**
        >
        > We distinguish between invoices where the company *owes money* vs. *is owed money*. If the company has received an invoice, and owes money to someone else (accounts payable) we call this a Bill.
        >
        > See [Invoices](https://docs.codat.io/lending-api#/schemas/Invoice) for the accounts receivable equivalent of bills.

        View the coverage for bills in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills" target="_blank">Data coverage explorer</a>.

        ## Overview

        In Codat, a bill contains details of:
        * When the bill was recorded in the accounting system.
        * How much the bill is for and the currency of the amount.
        * Who the bill was received from — the *supplier*.
        * What the bill is for — the *line items*.

        Some accounting platforms give a separate name to purchases where the payment is made immediately, such as something bought with a credit card or online payment. One example of this would be QuickBooks Online's *expenses*.

        You can find these types of transactions in our [Direct costs](https://docs.codat.io/lending-api#/schemas/DirectCost) data model.
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 'Identifier for the bill, unique for the company in the accounting platform.'
            reference:
              type: string
              nullable: true
              description: User-friendly reference for the bill.
            supplierRef:
              $ref: '#/components/schemas/AccountingSupplier/definitions/supplierRef'
            purchaseOrderRefs:
              type: array
              nullable: true
              items:
                title: Purchase order Reference
                type: object
                additionalProperties: false
                properties:
                  id:
                    type: string
                    description: 'Identifier for the purchase order, unique for the company in the accounting platform.'
                  purchaseOrderNumber:
                    type: string
                    nullable: true
                    description: 'Friendly reference for the purchase order, commonly generated by the accounting platform.'
            issueDate:
              allOf:
                - description: Date of the bill as recorded in the accounting platform.
                - $ref: '#/components/schemas/DateTime'
            dueDate:
              allOf:
                - description: Date the supplier is due to be paid.
                - $ref: '#/components/schemas/DateTime'
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
            lineItems:
              type: array
              nullable: true
              description: Array of Bill line items.
              items:
                $ref: '#/components/schemas/AccountingBill/definitions/billLineItem'
            withholdingTax:
              type: array
              nullable: true
              items:
                type: object
                properties:
                  name:
                    minLength: 1
                    type: string
                    description: Name assigned to withheld tax.
                  amount:
                    type: number
                    format: decimal
                    description: Amount of tax withheld.
                required:
                  - amount
                  - name
            status:
              $ref: '#/components/schemas/AccountingBill/definitions/billStatus'
            subTotal:
              type: number
              format: decimal
              description: 'Total amount of the bill, excluding any taxes.'
            taxAmount:
              type: number
              format: decimal
              description: Amount of tax on the bill.
            totalAmount:
              type: number
              format: decimal
              description: 'Amount of the bill, including tax.'
            amountDue:
              type: number
              format: decimal
              nullable: true
              description: Amount outstanding on the bill.
            note:
              type: string
              nullable: true
              description: 'Any private, company notes about the bill, such as payment information.'
            paymentAllocations:
              type: array
              nullable: true
              description: An array of payment allocations.
              items:
                $ref: '#/components/schemas/AccountingPaymentAllocation'
            metadata:
              $ref: '#/components/schemas/Metadata'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - issueDate
        - status
        - subTotal
        - taxAmount
        - totalAmount
      definitions:
        billStatus:
          description: Current state of the bill.
          type: string
          enum:
            - Unknown
            - Open
            - PartiallyPaid
            - Paid
            - Void
            - Draft
        billLineItem:
          title: Bill line item
          type: object
          properties:
            lineNumber:
              type: string
              nullable: true
              description: The bill line's number.
            description:
              type: string
              nullable: true
              description: Friendly name of the goods or services received.
            unitAmount:
              type: number
              format: decimal
              description: Price of each unit of goods or services.
            quantity:
              type: number
              format: decimal
              description: Number of units of goods or services received.
            unitOfMeasurement:
              type: string
              nullable: true
              description: 'The measurement which defines a unit for this item (e.g. ''kilogram'', ''litre'').'
            discountAmount:
              type: number
              format: decimal
              nullable: true
              description: |-
                Numerical value of any discounts applied.

                Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
            subTotal:
              type: number
              format: decimal
              nullable: true
              description: 'Amount of the line, inclusive of discounts but exclusive of tax.'
            taxAmount:
              type: number
              format: decimal
              nullable: true
              description: Amount of tax for the line.
            totalAmount:
              type: number
              format: decimal
              nullable: true
              description: 'Total amount of the line, including tax.'
            discountPercentage:
              type: number
              format: decimal
              nullable: true
              description: Percentage rate of any discount applied to the bill.
            accountRef:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountRef'
              description: Reference to the account to which the line item is linked.
            taxRateRef:
              $ref: '#/components/schemas/AccountingBillCreditNote/definitions/billCreditNoteLineItem/properties/taxRateRef'
              description: Reference to the tax rate to which the line item is linked.
            itemRef:
              $ref: '#/components/schemas/AccountingBillCreditNote/definitions/billCreditNoteLineItem/properties/itemRef'
              description: 'Reference to the product, service type, or inventory item to which the line item is linked.'
            purchaseOrderLineRef:
              allOf:
                - type: object
                  x-internal: true
                  title: Record line reference
                  description: |-
                    Links the current record line to the underlying record line that created it. 

                    For example, if a bill is generated from a purchase order, this property allows you to connect the bill line item to the purchase order line item in our data model. 
                  properties:
                    id:
                      type: string
                      description: '''id'' of the underlying record.'
                    dataType:
                      type: string
                      description: Allowed name of the 'dataType'.
                      enum:
                        - purchaseOrders
                        - bills
                    lineNumber:
                      type: string
                      description: Line number of the underlying record.
                - description: Reference to the purchase order line this line was generated from.
            trackingCategoryRefs:
              type: array
              nullable: true
              description: Collection of categories against which this item is tracked.
              items:
                $ref: '#/components/schemas/AccountingTrackingCategory/definitions/trackingCategoryRef'
            tracking:
              $ref: '#/components/schemas/AccountsPayableTracking'
            isDirectCost:
              type: boolean
              description: The bill is a direct cost if `True`.
          required:
            - unitAmount
            - quantity
    AccountingBillCreditNote:
      title: 'Accounting: Bill credit note'
      description: |-
        > **Bill credit notes or credit notes?**
        > 
        > In Codat, bill credit notes represent accounts payable only. For accounts receivable, see [Credit notes](https://docs.codat.io/lending-api#/schemas/CreditNote).

        View the coverage for bill credit notes in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=billCreditNotes" target="_blank">Data coverage explorer</a>.

        ## Overview

        A bill credit note is issued by a supplier for the purpose of recording credit. For example, if a supplier was unable to fulfil an order that was placed by a business, or delivered damaged goods, they would issue a bill credit note. A bill credit note reduces the amount a business owes to the supplier. It can be refunded to the business or used to pay off future bills.

        In the Codat API, a bill credit note is an accounts payable record issued by a [supplier](https://docs.codat.io/lending-api#/schemas/Supplier). 

        A bill credit note includes details of:
        * The original and remaining credit.
        * Any allocations of the credit against other records, such as [bills](https://docs.codat.io/lending-api#/schemas/Bill).
        * The supplier that issued the bill credit note.
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Identifier for the bill credit note that is unique to a company in the accounting platform.
              example: 1509398f-98e2-436d-8a5d-c042e0c74ffc
            billCreditNoteNumber:
              type: string
              nullable: true
              description: Friendly reference for the bill credit note.
              example: 91fe2a83-e161-4c21-929d-c5c10c4b07e5
            supplierRef:
              $ref: '#/components/schemas/AccountingSupplier/definitions/supplierRef'
            withholdingTax:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/AccountingBill/allOf/0/properties/withholdingTax/items'
            totalAmount:
              type: number
              format: decimal
              description: 'Total amount of credit that has been applied to the business'' account with the supplier, including discounts and tax.'
              example: 805.78
            totalDiscount:
              type: number
              format: decimal
              description: Total value of any discounts applied.
              example: 0
            subTotal:
              type: number
              format: decimal
              description: 'Total amount of the bill credit note, including discounts but excluding tax.'
              example: 805.78
            totalTaxAmount:
              type: number
              format: decimal
              description: Amount of tax included in the bill credit note.
              example: 0
            discountPercentage:
              type: number
              format: decimal
              description: Percentage rate of any discount applied to the bill credit note.
              example: 0
            remainingCredit:
              type: number
              format: decimal
              description: Amount of the bill credit note that is still outstanding.
              example: 0
            status:
              $ref: '#/components/schemas/AccountingBillCreditNote/definitions/billCreditNoteStatus'
            issueDate:
              $ref: '#/components/schemas/DateTime'
              description: Date the bill credit note was issued by the supplier.
              example: '2022-03-15T00:00:00'
            allocatedOnDate:
              $ref: '#/components/schemas/DateTime'
              nullable: true
              description: Date the bill credit note was fully refunded or allocated.
              example: '2022-09-15T16:35:00'
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: Currency of the bill credit note.
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
            lineItems:
              type: array
              nullable: true
              description: 'An array of line '
              items:
                $ref: '#/components/schemas/AccountingBillCreditNote/definitions/billCreditNoteLineItem'
            paymentAllocations:
              nullable: true
              type: array
              description: An array of payment allocations.
              items:
                $ref: '#/components/schemas/AccountingPaymentAllocation'
            createdFromRefs:
              nullable: true
              type: array
              description: An array of records the credit note was created from.
              items:
                $ref: '#/components/schemas/AccountsReceivableTracking/properties/recordRef'
            note:
              type: string
              nullable: true
              description: Any additional information about the bill credit note.
              example: 'Bill Credit Note with 1 line items, totaling 805.78'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
            metadata:
              $ref: '#/components/schemas/Metadata'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - totalAmount
        - totalDiscount
        - subTotal
        - totalTaxAmount
        - discountPercentage
        - status
      definitions:
        billCreditNoteStatus:
          type: string
          description: Current state of the bill credit note
          enum:
            - Unknown
            - Draft
            - Submitted
            - Paid
            - Void
            - PartiallyPaid
          example: Paid
        billCreditNoteLineItem:
          type: object
          properties:
            description:
              type: string
              nullable: true
              description: 'Friendly name of each line item. For example, the goods or service for which credit has been received.'
            unitAmount:
              type: number
              format: decimal
              description: Unit price of the goods or service.
            quantity:
              type: number
              format: decimal
              description: Number of units of the goods or service for which credit has been received.
            unitOfMeasurement:
              type: string
              nullable: true
              description: 'The measurement which defines a unit for this item (e.g. ''kilogram'', ''litre'').'
            discountAmount:
              type: number
              format: decimal
              nullable: true
              description: Value of any discounts applied.
            subTotal:
              type: number
              format: decimal
              nullable: true
              description: 'Amount of credit associated with the line item, including discounts but excluding tax.'
            taxAmount:
              type: number
              format: decimal
              nullable: true
              description: Amount of tax associated with the line item.
            totalAmount:
              type: number
              format: decimal
              nullable: true
              description: 'Total amount of the line item, including discounts and tax.'
            accountRef:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountRef'
            discountPercentage:
              type: number
              format: decimal
              nullable: true
              description: Percentage rate of any discount applied to the line item.
            taxRateRef:
              title: Tax rate reference
              type: object
              description: |-
                Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.

                Found on:

                - Bill line items
                - Bill Credit Note line items
                - Credit Note line items
                - Direct incomes line items
                - Invoice line items
                - Items
              properties:
                id:
                  type: string
                  description: Unique identifier for the tax rate in the accounting platform.
                name:
                  type: string
                  description: Name of the tax rate in the accounting platform.
                effectiveTaxRate:
                  type: number
                  format: decimal
                  description: Applicable tax rate.
            itemRef:
              description: Reference to the item the line is linked to.
              title: Item reference
              type: object
              properties:
                id:
                  minLength: 1
                  type: string
                  description: Unique identifier for the item in the accounting platform.
                name:
                  type: string
                  nullable: true
                  description: Name of the item in the accounting platform.
              required:
                - id
            createdFromLineRef:
              $ref: '#/components/schemas/AccountingBill/definitions/billLineItem/properties/purchaseOrderLineRef/allOf/0'
              description: Reference to the line of the item that the current line was created from.
            trackingCategoryRefs:
              type: array
              nullable: true
              deprecated: true
              description: Reference to the tracking categories to which the line item is linked.
              items:
                $ref: '#/components/schemas/AccountingTrackingCategory/definitions/trackingCategoryRef'
            tracking:
              $ref: '#/components/schemas/AccountsPayableTracking'
          required:
            - unitAmount
            - quantity
      examples:
        - id: 6a0e9dfb-87b0-47d3-aaaf-9753ae9e757d
          billCreditNoteNumber: '14763237'
          totalAmount: 693
          remainingCredit: 693
          status: Submitted
          issueDate: '2019-02-18T16:03:07.268Z'
          note: Track separately
          currency: USD
          lineItems:
            - description: AcmeMagnet
              unitAmount: 25
              discountAmount: 0
              quantity: 4
              subTotal: 100
              taxAmount: 10
              totalAmount: 110
              itemRef:
                id: '3'
              taxRateRef:
                id: 6c88aff3-7cb9-4980-a3d3-443e72e02498
              accountRef:
                id: 3f267b10-757d-44c0-bef9-20f70cc8fbe3
              trackingCategoryRefs:
                - id: department_1
                  name: ACMERockets
                - id: costcode_2
                  name: ACM2-ACMESigns
              createdFromLineRef:
                - id: '8462'
                  dataType: bill
                  lineNumber: 1
            - description: ACMEDisintegratingPistol
              unitAmount: 25
              discountAmount: 0
              quantity: 3
              subTotal: 75
              taxAmount: 7.5
              totalAmount: 82.5
              itemRef:
                id: 3abf0883-03f7-44c6-bc15-1372522d25e1
              taxRateRef:
                id: 6c88aff3-7cb9-4980-a3d3-443e72e02498
              accountRef:
                id: 3f267b10-757d-44c0-bef9-20f70cc8fbe3
            - description: ACMEWhippedCreamDispenser
              unitAmount: 52
              discountAmount: 0
              quantity: 6
              subTotal: 312
              taxAmount: 31.2
              totalAmount: 343.2
              itemRef:
                id: 3691f3d9-0ff7-4358-8a93-bed31c1b4b03
              taxRateRef:
                id: 6c88aff3-7cb9-4980-a3d3-443e72e02498
              accountRef:
                id: 3f267b10-757d-44c0-bef9-20f70cc8fbe3
            - description: ACMEJetPropelledPogoStick
              unitAmount: 130
              discountAmount: 0
              quantity: 1
              subTotal: 130
              taxAmount: 27.3
              totalAmount: 157.3
              itemRef:
                id: 075410d4-7edc-4936-ba52-9e1e43cbe300
              taxRateRef:
                id: d606732b-db18-44d7-823b-7f15f42c32ea
              accountRef:
                id: 3f267b10-757d-44c0-bef9-20f70cc8fbe3
          supplierRef:
            id: 67C6A7A1-5E84-4AC4-B950-24A114E379D0
            supplierName: Chin's Gas and Oil
          createdFromLineRef:
            id: '8462'
            dataType: bills
            line: 1
    AccountingBillCreditNotes:
      title: 'Accounting: Bill credit notes'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingBillCreditNote'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingBillPayment:
      title: 'Accounting: Bill payment'
      description: |
        > **Bill payments or payments?**  
        > 
        > We distinguish between transactions where the company received money vs. paid money. If the transaction represents a company spending money (accounts payable) we call this a Bill payment.
        >
        > See [payments](https://docs.codat.io/lending-api#/schemas/Payment) for the accounts receivable equivalent of Bill payments, which covers [invoices](https://docs.codat.io/lending-api#/schemas/Invoice) and [credit notes](https://docs.codat.io/lending-api#/schemas/CreditNote).

        > View the coverage for bill payments in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=billPayments" target="_blank">Data coverage explorer</a>.

        ## Overview

        Bill payments include all accounts payable transaction data ([bills](https://docs.codat.io/lending-api#/schemas/Bill) and [credit notes against bills](https://docs.codat.io/lending-api#/schemas/BillCreditNote)).

        A bill payment in Codat usually represents an allocation of money within any customer accounts payable account. This includes, but is not strictly limited to:

        - A payment made against a bill — for example, a credit card payment, cheque payment, or cash payment.
        - An allocation of a supplier's credit note to a bill or perhaps a refund.
        - A bill payment made directly to an accounts payable account. This could be an overpayment or a prepayment, or a refund of a payment made directly to an accounts payable account.

        Depending on the bill payments which are allowed by the underlying accounting package, some of these types may be combined. Please see the example data section for samples of what these cases look like.

        In Codat, a bill payment contains details of:

        - When the bill payment was recorded in the accounting system.
        - How much it is for and in the currency.
        - Who the payment has been paid to, the _supplier_.
        - The types of bill payments, the _line items_.  

        Some accounting platforms give a separate name to purchases where the payment is made immediately, such as something bought with a credit card or online payment. One example of this would be QuickBooks Online's _expenses_. You can find these types of transactions in our [Direct costs](https://docs.codat.io/lending-api#/schemas/DirectCost) data model.

        Bill payments is a child data type of [account transactions](https://docs.codat.io/lending-api#/schemas/AccountTransaction).

        ---

        ## Bill payment types

        ### Payment of a bill

        A payment paying a single bill should have the following properties:

        - A `totalAmount` indicating the amount of the bill that was paid. This is always positive.
        - A `lines` array containing one element with the following properties:
          - An `amount` equal to the `totalAmount` above.
          - A `links` array containing one element with the following properties:
            - A `type` indicating the type of link, in this case a `Bill`.
            - An `id` containing the ID of the bill that was paid.
            - An amount of `-totalAmount` (negative `totalAmount`), indicating that the entirety of the paid amount is allocated to the bill.

        ### Payment of multiple bills

        It is possible for one payment to pay multiple bills. This can be represented using two possible formats, depending on how the supplier keeps their books:

        1. The payment has multiple entries in its **lines** array, one for each bill that is paid. Each line will follow the above example for paying a bill, and the rules detailed in the data model.
        2. The payment has a line with multiple links to each bill. This occurs when the proportion of the original payment allocated to each bill is not available.

        Each line is the same as those described above, with the **amount** indicating how much of the payment is allocated to the bill. The **amount** on the lines sum to the **totalAmount** on the payment.

        > Pushing batch payments to Xero
        > 
        > When pushing a single bill payment to Xero to pay multiple bills, only the first format is supported—multiple entries in the payment **lines** array.

        ### Payments and refunds on account

        A payment on account, that is a payment that doesn’t pay a specific bill, has one entry in its lines array.

        The line has the following properties:

        - A **totalAmount** indicating the amount paid by a supplier or refunded to them by a company. A payment to the supplier is always negative. A refund is always positive.
        - A **links** array containing one element with the following properties:
          - A **type** indicating the type of link. For a payment this is `PaymentOnAccount`. For a refund this is `Refund`.
          - The **id** containing the ID of the supplier.
          - An amount for the link is `0` **totalAmount** or the amount of the payment or refund.

        It is possible to have a payment that is part on account and part allocated to a bill. Each line should follow the examples above.

        ### Using a credit note to pay a bill

        The payment of a bill using a credit note has one entry in its `lines` array. This **line** has the following properties:

        - An **amount** indicating the amount of money moved, which in this case is `0`, as the credit note and bill allocation must balance each other.
        - A **links** array containing two elements:
          - The first link has:
            - A **type** indicating the type of link, in this case a `Bill`.
            - An **id** containing the ID of the bill that was paid.
          - The second link has:
            - A **type** indicating the type of link, in this case a `CreditNote`.
            - An **id** containing the ID of the credit note used by this payment.

        The **amount** field on the **line** equals the **totalAmount** on the payment.

        ### Refunding a credit note

        A bill payment refunding a credit note has one entry in its **lines** array. This line has the following properties:

        - An **amount** indicating the amount of the credit note that was refunded. This is always negative, indicating that it is a refund.
        - A **links** array containing one element with the following properties:
          - A **type** indicating the type of `link`, in this case a `CreditNote`.
          - An **id** containing the ID of the credit note that was refunded.

        The **totalAmount** field on the payment equals the line's **amount** field. These are both negative, as this is money leaving accounts payable.

        ### Refunding a payment

        If a payment is refunded, for example, when a company overpaid a bill and the overpayment is returned, there are two payment records: 

        - One for the incoming overpayment.
        - Another for the outgoing refund.

        The payment issuing the refund is identified by the fact that the **totalAmount** is negative. This payment has one entry in its lines array that have the following properties:

        - An **amount** indicating the amount that was refunded. This is always negative.
        - A **links** array containing one element with the following properties:
          - A **type** indicating the type of a the link, in this case a `BillPayment`.
          - An **id** containing the ID of the payment that was refunded.

        The **amount** field on the line equals the **totalAmount** on the payment and is negative as this is money leaving accounts payable.

        The payment that was refunded can be identified as it has a line where the `amount` on its `line` is positive and the type of the link is `Refund`. This payment may have several entries in its **lines** array if it was partly used to pay an bill. For example, a £1,050 payment paying a £1,000 bill with a refund of £50 has two lines: 

        - One for £1,000 linked to the bill that was paid
        - Another for £50 linked to the payment that refunded the over payment. This link is of type `Refund` but the ID corresponds to a bill payment.

        The line linked to the bill payment has the following properties:

        - An **amount** indicating the amount that was refunded. This is positive as its money that was added to accounts payable, but is balanced out by the negative amount of the refund.
        - A **links** array containing one element with the following properties:
          - A **type** indicating the type of the link, in this case a `Refund`.
          - An **id** containing the ID of the payment that refunded this line.

        > Linked payments
        > 
        > Not all accounting packages support linked payments in this way. In these platforms you may see a payment on account and a refund on account.

        ## Foreign currencies

        There are two types of currency rate that are detailed in the bill payments data type: 

        Payment currency rate: 

        - Base currency of the accounts payable account.
        - Foreign currency of the bill payment.

        Payment line link currency rate: 

        - Base currency of the item that the link represents.
        - Foreign currency of the payment.

        These two rates allow the calculation of currency loss or gain for any of the transactions affected by the payment lines. The second rate is used when a bill payment is applied to an item in a currency that does not match either:

        - The base currency for the accounts payable account. 
        - The currency of the item.
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 'Identifier for the bill payment, unique for the company in the accounting platform.'
              example: 3d5a8e00-d108-4045-8823-7f342676cffa
            supplierRef:
              allOf:
                - $ref: '#/components/schemas/AccountingSupplier/definitions/supplierRef'
                - description: Supplier against which the payment is recorded in the accounting platform.
            accountRef:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountRef'
              description: Account the payment is linked to in the accounting platform.
            totalAmount:
              type: number
              format: decimal
              description: Amount of the payment in the payment currency. This value never changes and represents the amount of money that is paid into the supplier's account.
              example: 1329.54
            currency:
              allOf:
                - $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
                - description: ISO currency code in which the bill payment is recorded in the accounting platform.
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
            date:
              allOf:
                - $ref: '#/components/schemas/DateTime'
                - description: Date the bill payment was recorded in the accounting software.
            note:
              type: string
              nullable: true
              description: Additional information associated with the payment.
              example: Bill Payment against bill c13e37b6-dfaa-4894-b3be-9fe97bda9f44
            paymentMethodRef:
              allOf:
                - $ref: '#/components/schemas/PaymentMethodRef'
                - description: The Payment Method to which the payment is linked in the accounting platform.
            lines:
              type: array
              nullable: true
              description: An array of bill payment lines.
              items:
                $ref: '#/components/schemas/AccountingBillPayment/definitions/billPaymentLine'
            reference:
              type: string
              nullable: true
              description: Additional information associated with the payment.
            metadata:
              $ref: '#/components/schemas/Metadata'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - date
      definitions:
        billPaymentLine:
          type: object
          properties:
            amount:
              type: number
              format: decimal
              description: Amount in the bill payment currency.
            links:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/AccountingBillPayment/definitions/billPaymentLineLink'
            allocatedOnDate:
              $ref: '#/components/schemas/DateTime'
              description: AllocatedOnDate must be specified and be later than the issue date of the bill.
          required:
            - amount
        billPaymentLineLink:
          type: object
          properties:
            type:
              $ref: '#/components/schemas/AccountingBillPayment/definitions/billPaymentLineLinkType'
            id:
              type: string
              nullable: true
              description: Unique identifier of the transaction represented by the link.
            amount:
              type: number
              format: decimal
              nullable: true
              description: |-
                Amount by which the balance of the linked entity is altered, in the currency of the linked entity.

                - A negative link amount reduces the outstanding amount on the accounts payable account.
                - A positive link amount increases the outstanding amount on the accounts payable account.
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
          required:
            - type
        billPaymentLineLinkType:
          description: Types of links to bill payment lines.
          type: string
          enum:
            - Unknown
            - Unlinked
            - Bill
            - Other
            - CreditNote
            - BillPayment
            - PaymentOnAccount
            - Refund
            - ManualJournal
            - Discount
      examples:
        - totalAmount: 1000
          lines:
            - amount: 1000
              links:
                - type: Bill
                  id: x
                  amount: -1000
        - totalAmount: 0
          lines:
            - amount: 0
              links:
                - type: Bill
                  id: x
                  amount: -1000
                - type: CreditNote
                  id: 'y'
                  amount: 1000
        - totalAmount: 2000
          lines:
            - amount: 1000
              links:
                - type: Bill
                  id: x
                  amount: -1000
            - amount: 1000
              links:
                - type: PaymentOnAccount
                  id: 'y'
                  amount: -1000
        - totalAmount: -1000
          lines:
            - amount: -1000
              links:
                - type: CreditNote
                  id: 'y'
                  amount: 1000
        - totalAmount: -1000
          lines:
            - amount: -1000
              links:
                - type: PaymentOnAccount
                  id: 'y'
                  amount: 1000
        - totalAmount: 250
          lines:
            - amount: 0
              links:
                - type: Bill
                  id: x
                  amount: -750
                - type: CreditNote
                  id: 'y'
                  amount: 750
            - amount: 250
              links:
                - type: Bill
                  id: x
                  amount: -250
        - totalAmount: 1000
          lines:
            - amount: 1000
              links:
                - type: Bill
                  id: x
                  amount: -1000
          modifiedDate: '2022-10-23T00:00:00Z'
          sourceModifiedDate: '2022-10-23T00:00:00Z'
        - totalAmount: 2000
          lines:
            - amount: 0
              links:
                - type: Bill
                  id: x
                  amount: -1000
                - type: CreditNote
                  id: 'y'
                  amount: 1000
            - amount: 0
              links:
                - type: Bill
                  id: x
                  amount: -1000
                - type: CreditNote
                  id: z
                  amount: 1000
            - amount: 1000
              links:
                - type: Bill
                  id: x
                  amount: -1000
            - amount: 1000
              links:
                - type: PaymentOnAccount
                  id: customer-001
                  amount: -1000
        - totalAmount: 0
          lines:
            - amount: 0
              links:
                - type: Bill
                  id: w
                  amount: -1000
                - type: Bill
                  id: x
                  amount: -1000
                - type: CreditNote
                  id: 'y'
                  amount: 1000
                - type: CreditNote
                  id: z
                  amount: 1000
        - totalAmount: 1000
          lines:
            - amount: 1000
              links:
                - type: Bill
                  id: x
                  amount: -1000
          modifiedDate: '2022-10-23T00:00:00Z'
          sourceModifiedDate: '2022-10-23T00:00:00Z'
        - id: '001'
          totalAmount: 5000
          date: '1901-01-01'
          lines:
            - amount: 1000
              links:
                - type: Bill
                  id: x
                  amount: -1000
            - amount: 4000
              links:
                - type: PaymentOnAccount
                  id: 'y'
                  amount: -4000
        - id: '001'
          totalAmount: 5000
          date: '1901-01-01'
          lines:
            - amount: 1000
              links:
                - type: Bill
                  id: x
                  amount: -1000
            - amount: 1000
              links:
                - type: Bill
                  id: 'y'
                  amount: -1000
            - amount: 3000
              links:
                - type: PaymentOnAccount
                  id: 'y'
                  amount: -3000
        - totalAmount: 500
          lines:
            - amount: 500
              links:
                - type: Bill
                  id: a
                  amount: -1000
                - type: Bill
                  id: b
                  amount: -1000
                - type: CreditNote
                  id: 'y'
                  amount: 750
                - type: CreditNote
                  id: z
                  amount: 750
    AccountingBillPayments:
      title: 'Accounting: Bill payments'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingBillPayment'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingBills:
      title: 'Accounting: Bills'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingBill'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingCashFlowStatement:
      title: 'Accounting: Cash flow statement'
      description: |-
        > View the coverage for cash flow statement in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=cashFlowStatement" target="_blank">Data coverage explorer</a>.

        > **Operating activities only**  
        > 
        > Currently, the cash flow statement shows cash that flows into and out of the company from operating activities *only*. Operating activities generate cash from the sale of goods or services.

        ## Overview

        A cash flow statement is a financial report that records all cash that is received or spent by a company during a given period. It gives you a clearer picture of the company’s performance, and their ability to pay creditors and finance growth.

        > **Cash flow statement or balance sheet?**
        > 
        > Look at the cash flow statement to understand a company's ability to pay its bills. Although the balance sheet may show healthy earnings at a specific point in time, the cash flow statement allows you to see whether the company is meeting its financial commitments, such as paying creditors or its employees.
      type: object
      properties:
        reports:
          description: Array of cash flow statements.
          type: array
          items:
            $ref: '#/components/schemas/AccountingCashFlowStatement/definitions/cashFlowStatement'
        reportBasis:
          $ref: '#/components/schemas/AccountingCashFlowStatement/definitions/reportBasis'
        reportInput:
          $ref: '#/components/schemas/AccountingCashFlowStatement/definitions/reportInput'
        currency:
          $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
          description: Currency of all values in the cash flow statement.
        mostRecentAvailableMonth:
          $ref: '#/components/schemas/DateTime'
          nullable: true
        earliestAvailableMonth:
          $ref: '#/components/schemas/DateTime'
          nullable: true
      required:
        - reports
        - reportBasis
        - reportInput
        - currency
      definitions:
        reportBasis:
          title: Report basis
          description: 'Accounting method used when aggregating the report data. In this case, `Cash`.'
          type: string
          enum:
            - Unknown
            - Accrual
            - Cash
        reportInput:
          description: Accounting method used to prepare the cash flow statement.
          type: string
          enum:
            - Unknown
            - Indirect
            - Direct
        cashFlowStatement:
          title: Cash flow statement
          type: object
          properties:
            fromDate:
              $ref: '#/components/schemas/DateTime'
              description: Start date for the reporting period.
            toDate:
              $ref: '#/components/schemas/DateTime'
              description: End date for the reporting period.
            cashReceipts:
              $ref: '#/components/schemas/ReportLine'
              description: ReportLines for cash receipts from the sale of goods.
            cashPayments:
              $ref: '#/components/schemas/ReportLine'
              description: ReportLines for cash payments to suppliers for the purchase of goods or services.
    AccountingCompanyInfo:
      title: 'Accounting: Company profile'
      description: |-
        > View the coverage for company profile in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=cashFlowStatement" target="_blank">Data coverage explorer</a>.

        Company info provides standard details about a linked company such as their address, phone number, and company registration.

        > **Company information or companies?**
        > 
        > Company profile is standard information that is held in the accounting platform about a company. `Companies` is an endpoint that lists businesses in the Codat system that have linked and shared their data sources.
      type: object
      properties:
        companyName:
          type: string
          nullable: true
          description: Name of the linked company.
        accountingPlatformRef:
          type: string
          nullable: true
          description: Identifier or reference for the company in the accounting platform.
        companyLegalName:
          type: string
          nullable: true
          description: Registered legal name of the linked company.
        addresses:
          type: array
          nullable: true
          description: An array of Addresses.
          items:
            $ref: '#/components/schemas/AccountingAddress'
        phoneNumbers:
          type: array
          nullable: true
          description: An array of phone numbers.
          items:
            $ref: '#/components/schemas/PhoneNumber'
        webLinks:
          type: array
          nullable: true
          description: An array of weblinks.
          items:
            $ref: '#/components/schemas/WebLink'
        ledgerLockDate:
          $ref: '#/components/schemas/DateTime'
          description: 'If set in the accounting platform, the date (in the ISO 8601 date/time format) after which accounting transactions cannot be edited. Commonly used when books are closed at year-end.'
        registrationNumber:
          type: string
          nullable: true
          description: Registration number given to the linked company by the companies authority in the country of origin. In the UK this is Companies House.
        taxNumber:
          type: string
          nullable: true
          description: Company tax number.
        financialYearStartDate:
          $ref: '#/components/schemas/DateTime'
          description: Start date of the financial year for the company.
        baseCurrency:
          type: string
          nullable: true
          description: Currency set in the accounting platform of the linked company. Used by the currency rate.
        sourceUrls:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
          description: |-
            URL addresses for the accounting source.

            For example, for Xero integrations two URLs are returned. These have many potential use cases, such as [deep linking](https://developer.xero.com/documentation/api-guides/deep-link-xero).
        createdDate:
          $ref: '#/components/schemas/DateTime'
          description: Date the linked company was created in the accounting platform.
        supplementalData:
          $ref: '#/components/schemas/SupplementalData'
      examples:
        - companyName: ACME Corporation
          accountingPlatformRef: 4444e827-401b-4925-92cb-d79086bf3b6b
          companyLegalName: ACME Corporation Ltd.
          addresses:
            - type: Billing
              line1: Warner House
              line2: 98 Theobald's Road
              city: London
              region: ''
              country: United Kingdom
              postalcode: WC1X 8WB
            - type: Unknown
              line1: 123 Sierra Way
              line2: ''
              city: San Pablo
              region: CA
              country: ''
              postalCode: '87999'
          phoneNumbers:
            - number: 010 1234 5678
              type: Landline
          webLinks:
            - type: Website
              url: 'https://www.wbsl.com/'
          ledgerLockDate: '2019-03-04T12:08:01.881Z'
          registrationNumber: '1234567890'
          taxNumber: GB 123456789
          financialYearStartDate: '2019-04-01T00:00:00Z'
          baseCurrency: USD
          sourceUrls:
            url1: 'https://go.xero.com/organisationlogin/default.aspx?shortcode=!rxs0Q'
            url2: 'https://reporting.xero.com/!rxs0Q'
          createdDate: '2020-02-03T16:42:02Z'
    AccountingCreateAccountResponse:
      title: 'Accounting: Create account response'
      x-internal: true
      allOf:
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/AccountingAccount'
                - deprecated: true
        - $ref: '#/components/schemas/PushOperation'
    AccountingCreateBankAccountResponse:
      title: 'Accounting: Create bank account response'
      x-internal: true
      allOf:
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/AccountingBankAccount'
                - deprecated: true
        - $ref: '#/components/schemas/PushOperation'
    AccountingCreateBankTransactions:
      title: 'Accounting: Create bank account transactions'
      type: object
      properties:
        accountId:
          type: string
          description: Unique identifier for a bank account.
          examples:
            - 13d946f0-c5d5-42bc-b092-97ece17923ab
            - 9wg4lep4ush5cxs79pl8sozmsndbaukll3ind4g7buqbm1h2
            - '7110701885'
            - EILBDVJVNUAGVKRQ
            - Checking 0202
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/AccountingCreateBankTransactions/definitions/CreateBankAccountTransaction'
      definitions:
        CreateBankAccountTransaction:
          title: Bank account transaction
          type: object
          properties:
            id:
              type: string
              description: 'Identifier for the bank account transaction, unique for the company in the accounting platform.'
            amount:
              type: number
              format: decimal
              description: The amount transacted in the bank transaction.
            date:
              $ref: '#/components/schemas/DateTime'
            description:
              nullable: false
              type: string
              description: Description of the bank transaction.
            balance:
              type: number
              format: decimal
              description: The remaining balance in the account with ID `accountId`.
    AccountingCreateBankTransactionsResponse:
      title: 'Accounting: Create/update bank transaction response'
      x-internal: true
      allOf:
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/AccountingCreateBankTransactions'
                - deprecated: true
        - $ref: '#/components/schemas/PushOperation'
    AccountingCreateDirectCostResponse:
      title: 'Accounting: Create direct cost response'
      x-internal: true
      allOf:
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/AccountingDirectCost'
                - deprecated: true
        - $ref: '#/components/schemas/PushOperation'
    AccountingCreatePaymentResponse:
      title: 'Accounting: Create payment response'
      x-internal: true
      allOf:
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/AccountingPayment'
                - deprecated: true
        - $ref: '#/components/schemas/PushOperation'
    AccountingCreateSupplierResponse:
      title: 'Accounting: Create supplier response'
      x-internal: true
      allOf:
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/AccountingSupplier'
                - deprecated: true
        - $ref: '#/components/schemas/PushOperation'
    AccountingCreateTransferResponse:
      title: 'Accounting: Create transfer response'
      x-internal: true
      allOf:
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/AccountingTransfer'
                - deprecated: true
        - $ref: '#/components/schemas/PushOperation'
    AccountingCreditNote:
      title: 'Accounting: Credit note'
      description: |-
        > View the coverage for credit notes in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=creditNotes" target="_blank">Data coverage explorer</a>.

        ## Overview

        Think of a credit note as a voucher issued to a customer. It is a reduction that can be applied against one or multiple invoices. A credit note can either reduce the amount owed or cancel out an invoice entirely.

        In the Codat system a credit note is issued to a [customer's](https://docs.codat.io/lending-api#/schemas/Customer) accounts receivable. 

        It contains details of:
        * The amount of credit remaining and its status.
        * Payment allocations against the payments type, in this case an invoice.
        * Which customers the credit notes have been issued to.
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 'Identifier for the credit note, unique to the company in the accounting platform.'
            creditNoteNumber:
              type: string
              nullable: true
              description: Friendly reference for the credit note.
            customerRef:
              $ref: '#/components/schemas/AccountingCustomer/definitions/accountingCustomerRef'
              description: Reference to the customer the credit note has been issued to.
            withholdingTax:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/AccountingBill/allOf/0/properties/withholdingTax/items'
            totalAmount:
              type: number
              format: decimal
              description: Total amount of credit that has been applied to the customer's accounts receivable
            totalDiscount:
              type: number
              format: decimal
              description: Any discounts applied to the credit note amount.
            subTotal:
              type: number
              format: decimal
              description: 'Value of the credit note, including discounts and excluding tax.'
            additionalTaxAmount:
              type: number
              format: decimal
              description: Additional tax amount applied to credit note.
            additionalTaxPercentage:
              type: number
              format: decimal
              description: Percentage rate of any additional tax applied to the credit note.
            totalTaxAmount:
              type: number
              format: decimal
              description: Any tax applied to the credit note amount.
            discountPercentage:
              type: number
              format: decimal
              description: Percentage rate (from 0 to 100) of discounts applied to the credit note.
            remainingCredit:
              type: number
              format: decimal
              description: Unused balance of totalAmount originally raised.
            status:
              $ref: '#/components/schemas/AccountingCreditNote/definitions/creditNoteStatus'
              description: Current state of the credit note.
            issueDate:
              $ref: '#/components/schemas/DateTime'
              description: Date of the credit note as recorded in the accounting system.
            allocatedOnDate:
              $ref: '#/components/schemas/DateTime'
              description: Date on which the credit note was fully allocated.
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: Currency of the credit note.
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
            lineItems:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/AccountingCreditNote/definitions/creditNoteLineItem'
            paymentAllocations:
              type: array
              nullable: true
              description: An array of payment allocations.
              items:
                $ref: '#/components/schemas/AccountingPaymentAllocation'
            note:
              type: string
              nullable: true
              description: 'Any additional information about the credit note. Where possible, Codat links to a data field in the accounting platform that is publicly available. This means that the contents of the note field are included when a credit note is emailed from the accounting platform to the customer.'
            metadata:
              $ref: '#/components/schemas/Metadata'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - totalAmount
        - totalDiscount
        - subTotal
        - totalTaxAmount
        - discountPercentage
        - remainingCredit
        - status
      definitions:
        creditNoteStatus:
          title: Credit note status
          description: Current state of the credit note.
          type: string
          enum:
            - Unknown
            - Draft
            - Submitted
            - Paid
            - Void
            - PartiallyPaid
        creditNoteLineItem:
          type: object
          properties:
            description:
              type: string
              nullable: true
              description: 'Friendly name of each line item. For example, the goods or service for which credit has been issued.'
            unitAmount:
              type: number
              format: decimal
              description: Unit price of the goods or service.
            quantity:
              type: number
              format: decimal
              description: Number of units of the goods or service for which credit has been issued.
            discountAmount:
              type: number
              format: decimal
              nullable: true
              description: Value of any discounts applied.
            subTotal:
              type: number
              format: decimal
              nullable: true
              description: 'Amount of credit associated with the line item, including discounts but excluding tax.'
            taxAmount:
              type: number
              format: decimal
              nullable: true
              description: Amount of tax associated with the line item.
            totalAmount:
              type: number
              format: decimal
              nullable: true
              description: 'Total amount of the line item, including discounts and tax.'
            accountRef:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountRef'
              description: Reference to the account to which the line item is linked.
            discountPercentage:
              type: number
              format: decimal
              nullable: true
              description: Percentage rate of any discount applied to the line item.
            taxRateRef:
              $ref: '#/components/schemas/AccountingBillCreditNote/definitions/billCreditNoteLineItem/properties/taxRateRef'
              description: Reference to the tax rate to which the line item is linked.
            itemRef:
              $ref: '#/components/schemas/AccountingBillCreditNote/definitions/billCreditNoteLineItem/properties/itemRef'
              description: Reference to the item the line is linked to.
            trackingCategoryRefs:
              type: array
              nullable: true
              deprecated: true
              description: Reference to the tracking categories to which the line item is linked.
              items:
                $ref: '#/components/schemas/AccountingTrackingCategory/definitions/trackingCategoryRef'
            tracking:
              $ref: '#/components/schemas/AccountsReceivableTracking'
            isDirectIncome:
              type: boolean
              description: The credit note is a direct income if `True`.
          required:
            - unitAmount
            - quantity
      examples:
        - - id: 0316bd24-8a01-4a3a-a0e5-a73f14ebcbec
            creditNoteNumber: '5239277'
            customerRef:
              id: b5511228-b9ef-4713-91b1-ad2cf60eadb1
              companyName: Tool Hire Company
            totalAmount: 550
            totalDiscount: 0
            subTotal: 0
            totalTaxAmount: 0
            discountPercentage: 0
            remainingCredit: 550
            status: Submitted
            issueDate: '2018-03-28T21:28:58.249Z'
            allocatedOnDate: null
            note: More information available on request.
            currency: USD
            currencyRate: null
            lineItems:
              - description: Anvil10000Lb
                unitAmount: 50
                quantity: 10
                discountAmount: 0
                subTotal: 500
                taxAmount: 50
                totalAmount: 550
                accountRef:
                  id: 3f267b10-757d-44c0-bef9-20f70cc8fbe3
                  name: null
                discountPercentage: null
                taxRateRef:
                  id: 6c88aff3-7cb9-4980-a3d3-443e72e02498
                  name: null
                itemRef:
                  id: '1'
                  name: null
            paymentAllocations: []
            modifiedDate: null
            sourceModifiedDate: null
    AccountingCreditNotes:
      title: 'Accounting: Credit notes'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingCreditNote'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingCustomer:
      title: 'Accounting: Customer'
      description: |
        > View the coverage for customers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=customers" target="_blank">Data coverage explorer</a>.

        ## Overview

        A customer is a person or organisation that buys goods or services. From the Customers endpoints, you can retrieve a [list of all the customers of a company](https://api.codat.io/swagger/index.html#/Customers/get_companies__companyId__data_customers).

        Customers' data links to accounts receivable [invoices](https://docs.codat.io/lending-api#/schemas/Invoice).
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 'Identifier for the customer, unique to the company in the accounting platform.'
            customerName:
              type: string
              nullable: true
              description: 'Name of the customer as recorded in the accounting system, typically the company name.'
            contactName:
              type: string
              nullable: true
              description: Name of the main contact for the identified customer.
            emailAddress:
              type: string
              nullable: true
              description: Email address the customer can be contacted by.
            defaultCurrency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: Default currency the transactional data of the customer is recorded in.
            phone:
              type: string
              nullable: true
              description: Phone number the customer can be contacted by.
            addresses:
              type: array
              nullable: true
              description: An array of Addresses.
              items:
                $ref: '#/components/schemas/AccountingAddress'
            contacts:
              type: array
              nullable: true
              description: An array of Contacts.
              items:
                $ref: '#/components/schemas/AccountingCustomer/definitions/contact'
            registrationNumber:
              type: string
              nullable: true
              description: 'Company number. In the UK, this is typically the Companies House company registration number.'
            taxNumber:
              type: string
              nullable: true
              description: Company tax number.
            status:
              $ref: '#/components/schemas/AccountingCustomer/definitions/customerStatus'
              description: Current state of the customer.
            metadata:
              $ref: '#/components/schemas/Metadata'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - status
      definitions:
        accountingCustomerRef:
          type: object
          properties:
            id:
              minLength: 1
              type: string
              description: '`id` from the Customers data type'
            companyName:
              type: string
              nullable: true
              description: '`customerName` from the Customer data type'
          required:
            - id
        customerStatus:
          description: Status of customer.
          type: string
          enum:
            - Unknown
            - Active
            - Archived
        contact:
          type: object
          properties:
            name:
              type: string
              nullable: true
              description: Name of a contact for a customer.
            email:
              type: string
              nullable: true
              description: Email of a contact for a customer.
            phone:
              type: array
              nullable: true
              description: An array of Phone numbers.
              items:
                $ref: '#/components/schemas/PhoneNumber'
            address:
              $ref: '#/components/schemas/AccountingAddress'
              description: An object of Address information.
            status:
              $ref: '#/components/schemas/AccountingCustomer/definitions/customerStatus'
            modifiedDate:
              $ref: '#/components/schemas/DateTime'
          required:
            - status
    AccountingCustomers:
      title: 'Accounting: Customers'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingCustomer'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingDirectCost:
      title: 'Accounting: Direct cost'
      description: |-
        > **Language tip:** Direct costs may also be referred to as **Spend transactions**, **Spend money transactions**, or **Payments** in various accounting platforms.

        > View the coverage for direct costs in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=directCosts" target="_blank">Data coverage explorer</a>.

        ## Overview

        Direct costs are the expenses associated with a business' operations. For example, purchases of raw materials and service fees are considered direct costs.

        Direct costs include:
          * Purchasing an item and paying it off at the point of the purchase
          * Receiving cash from a refunded item if the refund is made by the supplier
          * Withdrawing money from a bank account 
          * Writing a cheque

        Direct costs is a child data type of [account transactions](https://docs.codat.io/lending-api#/schemas/AccountTransaction).
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 'Identifier of the direct cost, unique for the company.'
        - $ref: '#/components/schemas/AccountingDirectCost/definitions/directCostPrototype'
        - properties:
            metadata:
              $ref: '#/components/schemas/Metadata'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        directCostPrototype:
          type: object
          properties:
            reference:
              type: string
              nullable: true
              description: User-friendly reference for the direct cost.
            note:
              type: string
              nullable: true
              description: A note attached to the direct cost.
            contactRef:
              description: A customer or supplier associated with the direct cost.
              title: Contact reference
              type: object
              properties:
                id:
                  minLength: 1
                  type: string
                  description: Unique identifier for a customer or supplier.
                dataType:
                  type: string
                  nullable: true
                  description: Allowed name of the 'dataType'.
                  enum:
                    - customers
                    - suppliers
              required:
                - id
            issueDate:
              $ref: '#/components/schemas/DateTime'
              description: Date of the direct cost as recorded in the accounting platform.Date of the direct cost as recorded in the accounting platform.
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: Currency of the direct cost.
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
            lineItems:
              type: array
              description: An array of line items.
              items:
                $ref: '#/components/schemas/AccountingDirectCost/definitions/directCostLineItem'
            paymentAllocations:
              type: array
              description: An array of payment allocations.
              items:
                $ref: '#/components/schemas/AccountingPaymentAllocation'
            subTotal:
              type: number
              format: decimal
              description: 'The total amount of the direct costs, excluding any taxes.'
            taxAmount:
              type: number
              format: decimal
              description: The total amount of tax on the direct costs.
            totalAmount:
              type: number
              format: decimal
              description: 'The amount of the direct costs, inclusive of tax.'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
          required:
            - issueDate
            - currency
            - lineItems
            - paymentAllocations
            - subTotal
            - taxAmount
            - totalAmount
        directCostLineItem:
          type: object
          properties:
            description:
              type: string
              nullable: true
              description: Friendly name of the goods or services.
            unitAmount:
              type: number
              format: decimal
              description: |-
                Price of each unit of goods or services.
                Note: If the platform does not provide this information, the unit amount will be mapped to the total amount.
            quantity:
              type: number
              format: decimal
              description: |-
                Number of units of goods or services received.

                Note: If the platform does not provide this information, the quantity will be mapped as 1.
            discountAmount:
              type: number
              format: decimal
              nullable: true
              description: Discount amount for the line before tax.
            discountPercentage:
              type: number
              format: decimal
              nullable: true
              description: Discount percentage for the line before tax.
            subTotal:
              type: number
              format: decimal
              nullable: true
              description: 'Amount of the line, inclusive of discounts but exclusive of tax.'
            taxAmount:
              type: number
              format: decimal
              nullable: true
              description: Amount of tax for the line.
            totalAmount:
              type: number
              format: decimal
              nullable: true
              description: 'Total amount of the line, including tax.'
            accountRef:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountRef'
              description: Reference to the account to which the line item is linked.
            taxRateRef:
              $ref: '#/components/schemas/AccountingBillCreditNote/definitions/billCreditNoteLineItem/properties/taxRateRef'
              description: Reference to the tax rate to which the the line item is linked.
            itemRef:
              $ref: '#/components/schemas/AccountingBillCreditNote/definitions/billCreditNoteLineItem/properties/itemRef'
              description: 'Reference to the product, service type, or inventory item to which the direct cost is linked.'
            trackingCategoryRefs:
              type: array
              nullable: true
              deprecated: true
              description: Collection of categories against which this direct cost is tracked.
              items:
                $ref: '#/components/schemas/AccountingTrackingCategory/definitions/trackingCategoryRef'
            tracking:
              $ref: '#/components/schemas/AccountingDirectCost/definitions/tracking'
          required:
            - unitAmount
            - quantity
        tracking:
          title: Invoiceable tracking
          required:
            - recordRefs
          type: object
          properties:
            recordRefs:
              type: array
              items:
                $ref: '#/components/schemas/AccountingJournalEntry/definitions/journalLine/properties/tracking/definitions/trackingRecordRef'
            invoiceTo:
              $ref: '#/components/schemas/AccountsReceivableTracking/properties/recordRef'
          additionalProperties: false
        invoiceTo:
          type: object
          title: Invoice to
          description: Links to the customer the direct cost is associated.
          properties:
            id:
              type: string
              description: '''id'' of the underlying record or data type.'
            dataType:
              type: string
              description: Name of underlying data type.
              enum:
                - customers
              example: customers
    AccountingDirectCosts:
      title: 'Accounting: Direct costs'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingDirectCost'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingDirectIncome:
      title: 'Accounting: Direct income'
      description: |
        > **Language tip:**  Direct incomes may also be referred to as **Receive transactions**, **Receive money transactions**, **Sales receipts**, or **Cash sales** in various accounting platforms.

        > View the coverage for direct incomes in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=directIncomes" target="_blank">Data coverage explorer</a>.

        ## Overview

        Direct incomes are incomes received directly from the business' operations. For example, cash sales of items to a customer, referral commissions, and service fee refunds are considered direct incomes.

        Direct incomes include: 

        - Selling an item directly to a contact, and receiving payment at the point of the sale.
        - Refunding an item in cash to a contact.
        - Depositing money into a bank account.

        Direct incomes is a child data type of [account transactions](https://docs.codat.io/lending-api#/schemas/AccountTransaction).
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 'Identifier of the direct income, unique for the company.'
            reference:
              type: string
              nullable: true
              description: User-friendly reference for the direct income.
            note:
              type: string
              nullable: true
              description: An optional note on the direct income that can be used to assign the direct income with a reference ID in your application.
            contactRef:
              $ref: '#/components/schemas/AccountingDirectCost/definitions/directCostPrototype/properties/contactRef'
              description: A customer or supplier associated with the direct income.
            issueDate:
              $ref: '#/components/schemas/DateTime'
              description: The date of the direct income as recorded in the accounting platform.
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: The currency of the direct income.
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
            lineItems:
              type: array
              description: An array of line items.
              items:
                $ref: '#/components/schemas/AccountingDirectIncome/definitions/directIncomeLineItem'
            paymentAllocations:
              type: array
              items:
                $ref: '#/components/schemas/AccountingPaymentAllocation'
            subTotal:
              type: number
              format: decimal
              description: 'The total amount of the direct incomes, excluding any taxes.'
            taxAmount:
              type: number
              format: decimal
              description: The total amount of tax on the direct incomes.
            totalAmount:
              type: number
              format: decimal
              description: 'The amount of the direct incomes, inclusive of tax.'
            metadata:
              $ref: '#/components/schemas/Metadata'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - issueDate
        - currency
        - lineItems
        - paymentAllocations
        - subTotal
        - taxAmount
        - totalAmount
      definitions:
        directIncomeLineItem:
          type: object
          properties:
            description:
              type: string
              nullable: true
              description: A user-friendly name of the goods or services.
            unitAmount:
              type: number
              format: decimal
              description: |-
                The price of each unit of goods or services.
                Note: If the platform does not provide this information, the unit amount will be mapped to the total amount.
            quantity:
              type: number
              format: decimal
              description: |-
                The number of units of goods or services received.

                Note: If the platform does not provide this information, the quantity will be mapped as 1.
            discountAmount:
              type: number
              format: decimal
              nullable: true
              description: Discount amount for the line before tax.
            discountPercentage:
              type: number
              format: decimal
              nullable: true
              description: Discount percentage for the line before tax.
            subTotal:
              type: number
              format: decimal
              nullable: true
              description: 'The amount of the line, inclusive of discounts, but exclusive of tax.'
            taxAmount:
              type: number
              format: decimal
              nullable: true
              description: |-
                The amount of tax for the line.
                Note: If the platform does not provide this information, the quantity will be mapped as 0.00.
            totalAmount:
              type: number
              format: decimal
              nullable: true
              description: 'The total amount of the line, including tax.'
            accountRef:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountRef'
              description: Reference to the account to which the line item is linked.
            taxRateRef:
              $ref: '#/components/schemas/AccountingBillCreditNote/definitions/billCreditNoteLineItem/properties/taxRateRef'
              description: Reference to the tax rate to which the line item is linked.
            itemRef:
              $ref: '#/components/schemas/AccountingBillCreditNote/definitions/billCreditNoteLineItem/properties/itemRef'
              description: 'Reference to the product, service type, or inventory item to which the direct cost is linked.'
            trackingCategoryRefs:
              type: array
              nullable: true
              description: An array of categories against which this direct cost is tracked.
              items:
                $ref: '#/components/schemas/AccountingTrackingCategory/definitions/trackingCategoryRef'
          required:
            - unitAmount
            - quantity
    AccountingDirectIncomes:
      title: 'Accounting: Direct incomes'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingDirectIncome'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingInvoice:
      title: 'Accounting: Invoice'
      description: |-
        > **Invoices or bills?**
        >
        > We distinguish between invoices where the company *owes money* vs. *is owed money*. If the company issued an invoice, and is owed money (accounts receivable) we call this an Invoice.
        >
        > See [Bills](https://docs.codat.io/lending-api#/schemas/Bill) for the accounts payable equivalent of bills.

        View the coverage for invoices in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=invoices" target="_blank">Data coverage explorer</a>.

        ## Overview

        An invoice is an itemized record of goods sold or services provided to a [customer](https://docs.codat.io/lending-api#/schemas/Customer).

        In Codat, an invoice contains details of:

        - The timeline of the invoice—when it was raised, marked as paid, last edited, and so on.
        - How much the invoice is for, what portion of the invoice is tax or discounts, and what currency the amounts are represented in. 
        - Who the invoice has been raised to; the _customer_.
        - The breakdown of what the invoice is for; the _line items_.
        - Any [payments](https://docs.codat.io/lending-api#/schemas/Payment) assigned to the invoice; the _payment allocations_.

        > **Invoice PDF downloads**  
        >
        > You can <a className="external" href="https://docs.codat.io/lending-api#/operations/get-invoice-pdf" target="_blank">download a PDF version</a> of an invoice for supported integrations.
        > 
        > The filename will be invoice-{number}.pdf.

        > **Referencing an invoice in Sage 50 and ClearBooks**
        >
        > In Sage 50 and ClearBooks, you may prefer to use the **invoiceNumber** to identify an invoice rather than the invoice **id**. Each time a draft invoice is submitted or printed, the draft **id** becomes void and a submitted invoice with a new **id** exists in its place. In both platforms, the **invoiceNumber** should remain the same.
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 'Identifier for the invoice, unique to the company in the accounting platform.'
            invoiceNumber:
              type: string
              nullable: true
              description: 'Friendly reference for the invoice. If available, this appears in the file name of invoice attachments.'
            customerRef:
              $ref: '#/components/schemas/AccountingCustomer/definitions/accountingCustomerRef'
              description: Reference to the customer the invoice has been issued to.
            salesOrderRefs:
              type: array
              nullable: true
              description: List of references to related Sales orders.
              items:
                title: Sales order reference
                type: object
                properties:
                  id:
                    type: string
                    description: Unique identifier to a record in `dataType`.
                  dataType:
                    type: string
                    description: The underlying data type associated to the reference `id`.
                    enum:
                      - salesOrders
            issueDate:
              $ref: '#/components/schemas/DateTime'
              description: Date of the invoice as recorded in the accounting system.
            dueDate:
              $ref: '#/components/schemas/DateTime'
              description: Date the customer is due to be paid by.
            paidOnDate:
              $ref: '#/components/schemas/DateTime'
              description: 'Date the invoice was marked as paid in the accounting system. If this field is not available from the accounting software, it is calculated by Codat using associated payments.'
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: Currency of the invoice.
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
            lineItems:
              type: array
              nullable: true
              description: An array of line items.
              items:
                $ref: '#/components/schemas/AccountingInvoice/definitions/invoiceLineItem'
            paymentAllocations:
              type: array
              nullable: true
              description: An array of payment allocations.
              items:
                $ref: '#/components/schemas/AccountingPaymentAllocation'
            withholdingTax:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/AccountingBill/allOf/0/properties/withholdingTax/items'
            totalDiscount:
              type: number
              format: decimal
              nullable: true
              description: Numerical value of discounts applied to the invoice.
            subTotal:
              type: number
              format: decimal
              nullable: true
              description: Total amount of the invoice excluding any taxes.
            additionalTaxAmount:
              type: number
              format: decimal
              description: Additional tax amount applied to invoice.
            additionalTaxPercentage:
              type: number
              format: decimal
              description: Percentage rate of any additional tax applied to the invoice.
            totalTaxAmount:
              type: number
              format: decimal
              description: Amount of tax on the invoice.
            totalAmount:
              type: number
              format: decimal
              description: 'Amount of the invoice, inclusive of tax.'
            amountDue:
              type: number
              format: decimal
              description: Amount outstanding on the invoice.
            discountPercentage:
              type: number
              format: decimal
              nullable: true
              description: 'Percentage rate (from 0 to 100) of discounts applied to the invoice. For example: A 5% discount will return a value of `5`, not `0.05`.'
            status:
              $ref: '#/components/schemas/AccountingInvoice/definitions/invoiceStatus'
            note:
              type: string
              nullable: true
              description: 'Any additional information about the invoice. Where possible, Codat links to a data field in the accounting platform that is publicly available. This means that the contents of the note field are included when an invoice is emailed from the accounting platform to the customer.'
            metadata:
              $ref: '#/components/schemas/Metadata'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - issueDate
        - totalTaxAmount
        - totalAmount
        - amountDue
        - status
      definitions:
        invoiceLineItem:
          type: object
          properties:
            description:
              type: string
              nullable: true
              description: Friendly name of the goods or services provided.
            unitAmount:
              type: number
              format: decimal
              description: Price of each unit of goods or services.
            quantity:
              type: number
              format: decimal
              description: Number of units of goods or services provided.
            discountAmount:
              type: number
              format: decimal
              nullable: true
              description: Numerical value of any discounts applied.
            subTotal:
              type: number
              format: decimal
              nullable: true
              description: 'Amount of the line, inclusive of discounts but exclusive of tax.'
            taxAmount:
              type: number
              format: decimal
              nullable: true
              description: Amount of tax for the line.
            totalAmount:
              type: number
              format: decimal
              nullable: true
              description: 'Total amount of the line, including tax. When pushing invoices to Xero, the total amount is exclusive of tax to allow automatic calculations if a tax rate or tax amount is not specified.'
            accountRef:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountRef'
              description: Reference to the account to which the line item is linked.
            discountPercentage:
              type: number
              format: decimal
              nullable: true
              description: Percentage rate (from 0 to 100) of any discounts applied to the unit amount.
            taxRateRef:
              $ref: '#/components/schemas/AccountingBillCreditNote/definitions/billCreditNoteLineItem/properties/taxRateRef'
              description: Reference to the tax rate to which the line item is linked.
            itemRef:
              $ref: '#/components/schemas/AccountingBillCreditNote/definitions/billCreditNoteLineItem/properties/itemRef'
              description: Reference to the item the line is linked to.
            trackingCategoryRefs:
              type: array
              nullable: true
              description: Reference to the tracking categories to which the line item is linked.
              items:
                $ref: '#/components/schemas/AccountingTrackingCategory/definitions/trackingCategoryRef'
            tracking:
              $ref: '#/components/schemas/AccountsReceivableTracking'
            isDirectIncome:
              type: boolean
              description: The invoice is a direct income if `True`.
          required:
            - unitAmount
            - quantity
        invoiceStatus:
          type: string
          enum:
            - Unknown
            - Draft
            - Submitted
            - PartiallyPaid
            - Paid
            - Void
          description: |-
            Current state of the invoice:

            - `Draft` - Invoice hasn't been submitted to the supplier. It may be in a pending state or is scheduled for future submission, for example by email.
            - `Submitted` - Invoice is no longer a draft. It has been processed and, or, sent to the customer. In this state, it will impact the ledger. It also has no payments made against it (amountDue == totalAmount).
            - `PartiallyPaid` - The balance paid against the invoice is positive, but less than the total invoice amount (0 < amountDue < totalAmount).
            - `Paid` - Invoice is paid in full. This includes if the invoice has been credited or overpaid (amountDue == 0).
            - `Void` - An invoice can become Void when it's deleted, refunded, written off, or cancelled. A voided invoice may still be PartiallyPaid, and so all outstanding amounts on voided invoices are removed from the accounts receivable account.
    AccountingInvoices:
      title: 'Accounting: Invoices'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingInvoice'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingJournal:
      title: 'Accounting: Journal'
      description: |
        > **Language tip:** For line items, or individual transactions, of a company's financial documents, refer to the [Journal entries](https://docs.codat.io/lending-api#/schemas/JournalEntry) data type

        > View the coverage for journals in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journals" target="_blank">Data coverage explorer</a>.

        ## Overview

        In accounting software, journals are used to record all the financial transactions of a company. Each transaction in a journal is represented by a separate [journal entry](https://docs.codat.io/lending-api#/schemas/JournalEntry). These entries are used to create the general ledger, which is then used to create the financial statements of a business.

        When a company records all their transactions in a single journal, it can become large and difficult to maintain and track. This is why large companies often use multiple journals (also known as subjournals) to categorize and manage journal entries.

        Such journals can be divided into two categories:

        - Special journals: journals used to record specific types of transactions; for example, a purchases journal, a sales journal, or a cash management journal.
        - General journals: journals used to record transactions that fall outside the scope of the special journals.

        Multiple journals or subjournals are used in the following Codat integrations:

        - [Sage Intacct](https://docs.codat.io/integrations/accounting/sage-intacct/accounting-sage-intacct)  (mandatory)
        - [Exact Online](https://docs.codat.io/integrations/accounting/exact-online/accounting-exact-online)  (mandatory)
        - [Oracle NetSuite](https://docs.codat.io/integrations/accounting/netsuite/accounting-netsuite) (optional)

        > When pushing journal entries to an accounting platform that doesn’t support multiple journals (multi-book accounting), the entries will be linked to the platform-generic journal. The Journals data type will only include one object.
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Journal ID.
        - $ref: '#/components/schemas/AccountingJournal/definitions/journalPrototype'
        - properties:
            metadata:
              $ref: '#/components/schemas/Metadata'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        journalPrototype:
          type: object
          properties:
            journalCode:
              type: string
              nullable: true
              description: Native journal number or code.
            name:
              type: string
              nullable: true
              description: |-
                Journal name.
                The maximum length for a journal name is 256 characters. All characters above that number will be truncated.
            type:
              type: string
              nullable: true
              description: The type of the journal.
            parentId:
              type: string
              nullable: true
              description: |-
                Parent journal ID.
                If the journal is a parent journal, this value is not present.
            hasChildren:
              type: boolean
              description: 'If the journal has child journals, this value is true. If it doesn’t, it is false.'
            createdOn:
              $ref: '#/components/schemas/DateTime'
              description: Journal creation date.
            status:
              $ref: '#/components/schemas/AccountingJournal/definitions/journalStatus'
        journalRef:
          title: Journal reference
          type: object
          additionalProperties: false
          description: Links journal entries to the relevant journal in accounting integrations that use multi-book accounting (multiple journals).
          properties:
            id:
              minLength: 1
              type: string
              description: GUID of the underlying journal.
            name:
              type: string
              maxLength: 256
              nullable: true
              description: Name of journal
          required:
            - id
        journalStatus:
          type: string
          description: Current journal status.
          enum:
            - Unknown
            - Active
            - Archived
    AccountingJournalEntries:
      title: 'Accounting: Journal entries'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingJournalEntry'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingJournalEntry:
      title: 'Accounting: Journal entry'
      description: |-
        > **Language tip:** For the top-level record of a company's financial transactions, refer to the [Journals](https://docs.codat.io/lending-api#/schemas/Journal) data type

        > View the coverage for journal entries in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journalEntries" target="_blank">Data coverage explorer</a>.

        ## Overview

        A journal entry report shows the entries made in a company's general ledger, or [accounts](https://docs.codat.io/lending-api#/schemas/Account), when transactions are approved. The journal line items for each journal entry should balance.

        A journal entry line item is a single transaction line on the journal entry. For example: 

        - When a journal entry is recording a receipt of cash, the credit to accounts receivable and the debit to cash are separate line items. 
        - When a company needs to recognise revenue from an annual contract on a monthly basis, on receipt of cash for month one, they make a debit to deferred income and a credit to revenue.

        In Codat a journal entry contains details of:

        - The date on which the entry was created and posted.
        - Itemised lines, including amounts and currency.
        - A reference to the associated accounts.
        - A reference to the underlying record. For example, the invoice, bill, or other data type that triggered the posting of the journal entry to the general ledger. 

        > **Pushing journal entries**  
        > Codat only supports journal entries in the base currency of the company that are pushed into accounts denominated in the same base currency.
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier of the journal entry for the company in the accounting platform.
            description:
              type: string
              nullable: true
              description: Optional description of the journal entry.
            postedOn:
              $ref: '#/components/schemas/DateTime'
              description: |-
                Date on which the journal entry was posted to the accounting platform, and had an impact on the general ledger. This may be different from the creation date.

                For example, a user creates a journal entry on Monday and saves it as draft, which has no impact on the general ledger. On Thursday, they return to the entry and post it.

                The **createdOn** date shows as Monday.
                The **postedOn** date shows as Thursday.
                Journal entries can also be backdated, so the **postedOn** date may be earlier than the **createdOn** date.
            createdOn:
              $ref: '#/components/schemas/DateTime'
              description: Date on which the journal was created in the accounting platform.
            updatedOn:
              $ref: '#/components/schemas/DateTime'
              description: Date on which the journal was last updated in the accounting platform.
            journalRef:
              $ref: '#/components/schemas/AccountingJournal/definitions/journalRef'
            journalLines:
              type: array
              nullable: true
              description: An array of journal lines.
              items:
                $ref: '#/components/schemas/AccountingJournalEntry/definitions/journalLine'
            recordRef:
              $ref: '#/components/schemas/AccountingJournalEntry/definitions/journalEntryRecordRef'
            metadata:
              $ref: '#/components/schemas/Metadata'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        journalLine:
          type: object
          properties:
            description:
              type: string
              nullable: true
              description: Description of the journal line item.
            netAmount:
              type: number
              format: decimal
              description: 'Amount for the journal line. Debit entries are considered positive, and credit entries are considered negative.'
            currency:
              type: string
              nullable: true
              description: Currency for the journal line item.
            accountRef:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountRef'
            tracking:
              description: 'List of record refs associated with the tracking information for the line (eg to a Tracking Category, or customer etc.)'
              title: Tracking
              type: object
              properties:
                recordRefs:
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountingJournalEntry/definitions/journalLine/properties/tracking/definitions/trackingRecordRef'
                  nullable: true
              definitions:
                trackingRecordRef:
                  type: object
                  title: Record reference
                  description: Links to the customer or tracking category.
                  properties:
                    id:
                      type: string
                      description: '''id'' of the underlying record or data type.'
                    dataType:
                      type: string
                      description: Name of underlying data type.
                      enum:
                        - customers
                        - suppliers
                        - trackingCategories
                      example: trackingCategories
          required:
            - netAmount
        journalEntryRecordRef:
          type: object
          title: Record reference
          description: Links a journal entry to the underlying record that created it.
          properties:
            id:
              type: string
              description: '''id'' of the underlying record or data type.'
            dataType:
              type: string
              description: Name of underlying data type.
              enum:
                - bankTransactions
                - billCreditNotes
                - billPayments
                - bills
                - creditNotes
                - directCosts
                - directIncomes
                - invoices
                - journalEntries
                - payments
                - transfers
              example: transfers
    AccountingJournals:
      title: 'Accounting: Journals'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingJournal'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingPayment:
      title: 'Accounting: Payment'
      description: "\uFEFF> **Payments or bill payments?**\n>\n>  In Codat, payments represent accounts receivable only. For accounts payable, see [bill payments](https://docs.codat.io/lending-api#/schemas/BillPayment). These include [bills](https://docs.codat.io/lending-api#/schemas/Bill) and credit notes against bills.\n\n> View the coverage for payments in the <a className=\"external\" href=\"https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=payments\" target=\"_blank\">Data coverage explorer</a>.\n\n## Overview\n\nPayments include all accounts receivable transaction data. This includes [invoices](https://docs.codat.io/lending-api#/schemas/Invoice) and [credit notes](https://docs.codat.io/lending-api#/schemas/CreditNote).\n\nA payment in Codat usually represents an allocation of money within any customer accounts receivable account. This includes, but is not strictly limited to:\n\n- A payment made against an invoice, like a credit card, cheque, or cash payment.\n- An allocation of a customer's credit note, either to an invoice or maybe a refund.\n- A payment made directly to that accounts receivable account. This might be an overpayment or a prepayment. It might also be the refund of a payment made directly to an accounts receivable account.\n\nDepending on the payments allowed by the underlying accounting package, some payment types may be combined. Please see the example for more details.\n\nIn Codat, a payment contains details of:\n\n- When the payment was recorded in the accounting system.\n- How much it is for and in what currency that amount is in.\n- Who the payment was _paid by_ – the _customer_.\n- The payment method used.\n- The breakdown of the types of payments – the _line items_.\n\nPayments is a child data type of [account transactions](https://docs.codat.io/lending-api#/schemas/AccountTransaction).\n\n## Payment types\n\n## Payment of an invoice\n\nA payment paying a single invoice has one entry in its `lines` array. This **line** has the following properties:\n\n- An _amount_ that indicates the amount of the invoice that was paid. This is always positive.\n- A **links** array containing one element with the following properties:\n    - A **type** that indicates the type of **link**, in this case an `Invoice`.\n    - An **id** that contains the ID of the invoice that was paid.\n    - An **amount** for the link. The sum of the **line.amount** and the **links.amount** must equal `0`.\n\nThe **amount** field on the **line** equals the **totalAmount** on the payment.\n\n## Payment of multiple invoices\n\nA single payment can pay multiple invoices. This can be represented in one of two formats depending on how the customer keeps their books:\n\n- The payment has multiple entries in its **lines** array, one for each invoice that is paid. Each line follows the example and rules described in [Payment of an invoice](#payment-of-an-invoice).\n- The payment has a line with multiple links to each invoice. This occurs when the proportion of the original payment allocated to each invoice is not available.\n\nEach **line** has the same properties as those described in [Payment of an invoice](#payment-of-an-invoice), with the **amount** indicating how much of the payment was allocated to the invoice. The sum of line amounts equals the **totalAmount** on the payment.\n\n## Payments and refunds on account\n\nA payment on account, that is a payment that doesn’t pay a specific invoice, has one entry in its lines array. The **line** has the following properties:\n\n- A **totalAmount** that indicates the amount paid by a customer or refunded to them by a company. A payment to the customer is always negative. A refund is always positive.\n- A **links** array containing one element with the following properties:\n- A **type** that indicates the type of link. For a payment this is `PaymentOnAccount`. For a refund this is `Refund`.\n- The **id** containing the ID of the customer.\n- The **amount** for the link is `0` – the **totalAmount** _or_ the amount of the payment or refund.\n\nIt is possible to have a payment that is part _on account_ and part _allocated_ to an invoice. Each line should follow the examples above.\n\n## Using a credit note to pay an invoice\n\nThe payment of an invoice using a credit note has one entry in its **lines** array. This **line** has the following properties:\n\n- An **amount** that indicates the amount of money moved, which in this case is `0`, as the credit note and invoice allocation must balance each other.\n- A **links** array containing two elements:\n    - The first **link** has:\n        - A **type** that indicates the type of **link**, in this case an `Invoice`.\n        - An **id** that contains the ID of the invoice that was paid.\n    - The second **link** has:\n        - A **type** that indicates the type of **link**, in this case a `CreditNote`.\n        - An **id** that contains the ID of the credit note used by this payment.\n\nThe **amount** field on the **line** equals the **totalAmount** on the payment.\n\n## Refunding a credit note\n\nA payment refunding a credit note has one entry in its **lines** array. This **line** has the following properties:\n\n- An **amount** that indicates the amount of the credit note that was refunded. This is always negative for a refund.\n- A **links** array that contains one element with the following properties:\n    - A **type** that indicates the type of **link**, in this case a `CreditNote`.\n    - An **id** that contains the ID of the credit note that was refunded.\n\nThe **totalAmount** field on the payment equals the **amount** field of the **line**. These are both negative, as this is money leaving accounts receivable.\n\n## Refunding a payment\n\nIf a payment is refunded, for example, if a customer overpaid an invoice and the overpayment is returned to the customer, there are two payment records:\n\n- One for the incoming over payment.\n- Another for the outgoing refund.\n\nThe payment issuing the refund has a negative **totalAmount**. This payment also has one entry in its lines array with the following properties:\n\n- An **amount** that indicates the amount that was refunded. This is always negative.\n- A **links** array that contains one element with the following properties:\n    - A **type** that indicates the type of **link**, in this case a `Payment`.\n    - An **id** that contains the ID of the payment that was refunded.\n\nThe **amount** field on the **line** equals the **totalAmount** on the payment and is negative, as this is money leaving accounts receivable.\n\nThe payment that was refunded has a line where the **amount** is positive and the type of the link is `Refund`. This payment may have several entries in its **lines** array if it was used to partly pay an invoice.\n\nFor example: A £1,050 payment on a £1,000 invoice with a refund of £50 has two lines:\n\n- One for £1,000 linked to the invoice that was paid.\n- Another for £50 linked to the payment that refunded the overpayment with a** type** of `Refund` and an ID that corresponds to the payment.\n\nThe **line** linked to the payment has the following properties:\n\n- An **amount** that indicates the amount that was refunded. This is positive as its money that was added to accounts receivable. It's balanced out by the negative amount of the refund.\n- A **links** array containing one element with the following properties:\n    - A **type** that indicates the type of **link**, in this case a `Refund`.\n    - An **id** that contains the ID of the payment that refunded this line.\n\n> **Support for linked payments**\n>\n> Not all accounting packages support linking payments in this way. In some platforms, you may see a payment on account and a refund on account.\n\n## Foreign currencies\n\nThere are two types of currency rate that are included in the payments data type:\n\nPayment currency rate:\n\n- Base currency of the accounts receivable account.\n- Foreign currency of the payment.\n\nPayment line link currency rate:\n\n- Base currency of the item the link represents.\n- Foreign currency of the payment.\n\nThese two rates allow the calculation of currency loss or gain for any of the transactions affected by the payment lines. The second rate is used when a payment is applied to an item in a currency that doesn't match either:\n\n- The base currency for the accounts receivable account.\n- The currency of the item.\n\n  ```json title=\"Currency rate example\"\n  {\n      \"id\": \"123\",\n      \"note\": \"\",\n      \"totalAmount\": 99.99,\n      \"currency\": \"GBP\",\n      \"lines\": [\n          {\n              \"amount\": 99.99,\n              \"links\": [\n                  {\n                      \"type\": \"Invoice\",\n                      \"id\": \"178\",\n                      \"amount\": -50,\n                      \"currencyRate\":  1.9998\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n## Example data\n\n> **Object properties**\n>\n> For the sake of brevity, the examples here may omit properties from objects. For the full object definition, see [Payments](https://api.codat.io/swagger/index.html#/Payments).\n\n## Simple examples\n\n  ```json title=\"Payment for invoice\"\n  {\n      \"totalAmount\": 1000,\n      \"lines\": [\n          {\n              \"amount\" : 1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"x\",\n                      \"amount\" : -1000\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n  ```json title=\"Allocation of credit note\"\n  {\n      \"totalAmount\": 0,\n      \"lines\": [\n          {\n              \"amount\" : 0,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"x\",\n                      \"amount\" : -1000\n                  },\n                  {\n                      \"type\" : \"CreditNote\",\n                      \"id\" : \"y\",\n                      \"amount\" : 1000\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n  ```json title=\"Payment of invoice and payment on account\"\n  {\n      \"totalAmount\": 2000,\n      \"lines\": [\n          {\n              \"amount\" : 1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"x\",\n                      \"amount\" : -1000\n                  }\n              ]\n          },\n          {\n              \"amount\" : 1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"PaymentOnAccount\",\n                      \"id\" : \"y\",\n                      \"amount\" : -1000\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n  ```json title=\"Refund of credit note\"\n  {\n      \"totalAmount\": -1000,\n      \"lines\": [\n          {\n              \"amount\" : -1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"CreditNote\",\n                      \"id\" : \"y\",\n                      \"amount\" : 1000\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n  ```json title=\"Refund on accounts receivable account\"\n  {\n      \"totalAmount\": -1000,\n      \"lines\": [\n          {\n              \"amount\" : -1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"PaymentOnAccount\",\n                      \"id\" : \"y\",\n                      \"amount\" : 1000\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n  ```json title=\"Linked refund on accounts receivable account\"\n  {\n      \"id\" : \"payment-001\",\n      \"totalAmount\": 1000,\n      \"lines\": [\n          {\n              \"amount\" : 1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"Refund\",\n                      \"id\" : \"refund-001\",\n                      \"amount\" : -1000\n                  }\n              ]\n          }\n      ]\n  }\n  {\n      \"id\" : \"refund-001\",\n      \"totalAmount\": -1000,\n      \"lines\": [\n          {\n              \"amount\" : -1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"Payment\",\n                      \"id\" : \"payment-001\",\n                      \"amount\" : 1000\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n  ```json title=\"Using a credit note and cash to pay an invoice\"\n  {\n      \"totalAmount\": 250,\n      \"lines\": [\n          {\n              \"amount\": 0,\n              \"links\": [\n                  {\n                      \"type\": \"Invoice\",\n                      \"id\": \"x\",\n                      \"amount\": -750\n                  }, \n                  {\n                      \"type\": \"CreditNote\",\n                      \"id\": \"y\",\n                      \"amount\": 750\n                  }\n              ]\n          },\n          {\n              \"amount\": 250,\n              \"links\": [\n                  {\n                      \"type\": \"Invoice\",\n                      \"id\": \"x\",\n                      \"amount\": -250\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n## Complex examples\n\n  ```json title=\"Use two credit notes and 1000 in to \"bank\" (cash, cheque etc.) to pay invoice\"\n  {\n      \"totalAmount\": 1000,\n      \"lines\": [\n          {\n              \"amount\" : 0,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"x\",\n                      \"amount\" : -1000\n                  },\n                  {\n                      \"type\" : \"CreditNote\",\n                      \"id\" : \"y\",\n                      \"amount\" : 1000\n                  }\n              ]\n          },\n          {\n              \"amount\" : 0,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"x\",\n                      \"amount\" : -1000\n                  },\n                  {\n                      \"type\" : \"CreditNote\",\n                      \"id\" : \"z\",\n                      \"amount\" : 1000\n                  }\n              ]\n          },\n          {\n              \"amount\" : 1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"x\",\n                      \"amount\" : -1000\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n  ```json title=\"Pay an invoice with two credit notes and cash, with 1000 left 'on account'\"\n  {\n      \"totalAmount\": 2000,\n      \"lines\": [\n          {\n              \"amount\" : 0,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"x\",\n                      \"amount\" : -1000\n                  },\n                  {\n                      \"type\" : \"CreditNote\",\n                      \"id\" : \"y\",\n                      \"amount\" : 1000\n                  }\n              ]\n          },\n          {\n              \"amount\" : 0,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"x\",\n                      \"amount\" : -1000\n                  },\n                  {\n                      \"type\" : \"CreditNote\",\n                      \"id\" : \"z\",\n                      \"amount\" : 1000\n                  }\n              ]\n          },\n          {\n              \"amount\" : 1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"x\",\n                      \"amount\" : -1000\n                  }\n              ]\n          },\n          {\n              \"amount\" : 1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"PaymentOnAccount\",\n                      \"id\" : \"customer-001\",\n                      \"amount\" : -1000\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n  ```json title=\"Two credit notes pay two invoices with no allocation amount specified\"\n  {\n      \"totalAmount\": 0,\n      \"lines\": [\n          {\n              \"amount\" : 0,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"w\",\n                      \"amount\" : -1000\n                  },\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"x\",\n                      \"amount\" : -1000\n                  },\n                  {\n                      \"type\" : \"CreditNote\",\n                      \"id\" : \"y\",\n                      \"amount\" : 1000\n                  },\n                  {\n                      \"type\" : \"CreditNote\",\n                      \"id\" : \"z\",\n                      \"amount\" : 1000\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n  ```json title=\"Two credit notes and cash pay three invoices with no allocation amount specified, and refund cash\"\n  {\n      \"totalAmount\": 2000,\n      \"lines\": [\n          {\n              \"amount\" : 1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"w\",\n                      \"amount\" : -1000\n                  },\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"x\",\n                      \"amount\" : -1000\n                  },\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"u\",\n                      \"amount\" : -1000\n                  },\n                  {\n                      \"type\" : \"CreditNote\",\n                      \"id\" : \"y\",\n                      \"amount\" : 1000\n                  },\n                  {\n                      \"type\" : \"CreditNote\",\n                      \"id\" : \"z\",\n                      \"amount\" : 1000\n                  }\n              ]\n          },\n          {\n              \"amount\" : 1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"Refund\",\n                      \"id\" : \"refund-001\",\n                      \"amount\" : -1000\n                  }\n              ]\n          }\n      ]\n  }\n  {\n      \"id\" : \"refund-001\",\n      \"totalAmount\": -1000,\n      \"lines\": [\n          {\n              \"amount\" : -1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"Payment\",\n                      \"id\" : \"payment-001\",\n                      \"amount\" : 1000\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\nIn this example, a payment on account is used to pay the same invoice in January and again in February.\n\n  ```json title=\"January\"\n  {\n      \"id\": \"001\",\n      \"totalAmount\": 5000,\n      \"date\" : \"1901-01-01\",\n      \"lines\": [\n          {\n              \"amount\" : 1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"Invoice-x\",\n                      \"amount\" : -1000\n                  }\n              ]\n          },\n          {\n              \"amount\" : 4000,\n              \"links\" : [\n                  {\n                      \"type\" : \"PaymentOnAccount\",\n                      \"id\" : \"PaymentOnAccount-y\",\n                      \"amount\" : -4000\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n  ```json title=\"February\"\n  {\n      \"id\": \"001\",\n      \"totalAmount\": 5000,\n      \"date\" : \"1901-02-01\",\n      \"lines\": [\n          {\n              \"amount\" : 1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"Invoice-x\",\n                      \"amount\" : -1000\n                  }\n              ]\n          },\n          {\n              \"amount\" : 1000,\n              \"links\" : [\n                  {\n                      \"type\" : \"Invoice\",\n                      \"id\" : \"Invoice-y\",\n                      \"amount\" : -1000\n                  }\n              ]\n          },\n          {\n              \"amount\" : 3000,\n              \"links\" : [\n                  {\n                      \"type\" : \"PaymentOnAccount\",\n                      \"id\" : \"PaymentOnAccount-y\",\n                      \"amount\" : -3000\n                  }\n              ]\n          }\n      ]\n  }\n  ```\n\n\n\n  ```json title=\"Two credit notes and some cash pay two invoices with no allocations specified\"\n  {\n      \"totalAmount\": 500,\n      \"lines\": [\n          {\n              \"amount\": 500,\n              \"links\": [{\n                      \"type\": \"Invoice\",\n                      \"id\": \"a\",\n                      \"amount\": -1000\n                  }, {\n                      \"type\": \"Invoice\",\n                      \"id\": \"b\",\n                      \"amount\": -1000\n                  }, {\n                      \"type\": \"CreditNote\",\n                      \"id\": \"y\",\n                      \"amount\": 750\n                  },{\n                      \"type\": \"CreditNote\",\n                      \"id\": \"z\",\n                      \"amount\": 750\n                  }\n              ]\n          }\n      ]\n  }\n  ```"
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 'Identifier for the payment, unique to the company in the accounting platform.'
            customerRef:
              $ref: '#/components/schemas/AccountingCustomer/definitions/accountingCustomerRef'
              description: Customer the payment is recorded against in the accounting platform.
            accountRef:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountRef'
              description: Account the payment is recorded against in the accounting platform.
            paymentMethodRef:
              $ref: '#/components/schemas/PaymentMethodRef'
              description: The Payment Method to which the payment is linked in the accounting platform.
            totalAmount:
              type: number
              format: decimal
              description: Amount of the payment in the payment currency. This value should never change and represents the amount of money paid into the customer's account.
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: ISO currency code recorded for the payment in the accounting platform.
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
            date:
              $ref: '#/components/schemas/DateTime'
              description: Date the payment was recorded in the accounting software.
            note:
              type: string
              nullable: true
              description: Any additional information associated with the payment.
            lines:
              type: array
              nullable: true
              description: An array of payment lines.
              items:
                $ref: '#/components/schemas/AccountingPayment/definitions/paymentLine'
            reference:
              type: string
              nullable: true
              description: Friendly reference for the payment.
            metadata:
              $ref: '#/components/schemas/Metadata'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - date
      definitions:
        paymentLine:
          title: Payment Line
          type: object
          properties:
            amount:
              type: number
              format: decimal
              description: Amount in the payment currency.
            links:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/AccountingPayment/definitions/paymentLineLink'
            allocatedOnDate:
              $ref: '#/components/schemas/DateTime'
              description: The date the payment was allocated.
          required:
            - amount
        paymentLineLink:
          title: Payment Line Link
          type: object
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/AccountingPayment/definitions/paymentLinkType'
            id:
              type: string
              description: Unique identifier of the transaction represented by the link.
            amount:
              type: number
              format: decimal
              nullable: true
              description: |-
                Amount by which the balance of the linked entity is altered, in the currency of the linked entity.  
                A negative link amount _reduces_ the outstanding amount on the accounts receivable account.  
                A positive link amount _increases_ the outstanding amount on the accounts receivable account.
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
          required:
            - type
        paymentLinkType:
          title: Payment Link Type
          type: string
          enum:
            - Unknown
            - Unlinked
            - Invoice
            - CreditNote
            - Other
            - Refund
            - Payment
            - PaymentOnAccount
            - ManualJournal
            - Discount
          description: |-
            Types of payment line links, either:  
            `Unknown`  
            `Unlinked` - Not used  
            `Invoice` - ID refers to the invoice  
            `CreditNote` - ID refers to the credit note  
            `Refund` - ID refers to the sibling payment  
            `Payment` - ID refers to the sibling payment  
            `PaymentOnAccount` - ID refers to the customer  
            `Other` - ID refers to the customer  
            `Manual Journal`  
            `Discount` - ID refers to the payment
    AccountingPaymentAllocation:
      title: 'Accounting: Payment allocation'
      type: object
      properties:
        payment:
          $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment'
        allocation:
          type: object
          properties:
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: The currency of the transaction.
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
            allocatedOnDate:
              $ref: '#/components/schemas/DateTime'
              description: The date the payment was allocated.
            totalAmount:
              type: number
              format: decimal
              description: The total amount that has been allocated.
      required:
        - payment
        - allocation
      definitions:
        paymentAllocationPayment:
          type: object
          properties:
            id:
              type: string
              description: Identifier of the allocated payment.
            note:
              type: string
              nullable: true
              description: Notes attached to the allocated payment.
            reference:
              type: string
              nullable: true
              description: Reference to the allocated payment.
            accountRef:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountRef'
              description: The account that the allocated payment is made from or to.
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: Currency the payment has been made in.
            currencyRate:
              title: Currency rate
              type: number
              format: decimal
              nullable: true
              description: |-
                Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.

                Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  

                It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.

                Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 

                For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.

                ## Examples with base currency of GBP

                | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
                | :--------------- | :------------- | :------------ | :------------------------- |
                | **USD**          | $20            | 0.781         | £15.62                     |
                | **EUR**          | €20            | 0.885         | £17.70                     |
                | **RUB**          | ₽20            | 0.011         | £0.22                      |

                ## Examples with base currency of USD

                | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
                | :--------------- | :------------- | :------------ | :------------------------- |
                | **GBP**          | £20            | 1.277         | $25.54                     |
                | **EUR**          | €20            | 1.134         | $22.68                     |
                | **RUB**          | ₽20            | 0.015         | $0.30                      |


                ### Integration-specific details

                | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
                |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
            paidOnDate:
              $ref: '#/components/schemas/DateTime'
              description: The date the payment was paid.
            totalAmount:
              type: number
              format: decimal
              description: Total amount that was paid.
    AccountingPaymentMethod:
      title: 'Accounting: Payment method'
      description: |-
        > View the coverage for payment methods in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=paymentMethods" target="_blank">Data coverage explorer</a>.

        ## Overview

        A Payment Method represents the payment method(s) used to pay a Bill. Payment Methods are referenced on [Bill Payments](https://docs.codat.io/lending-api#/schemas/BillPayment) and [Payments](https://docs.codat.io/lending-api#/schemas/Payment).
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the payment method.
            name:
              type: string
              nullable: true
              description: Name of the payment method.
            type:
              $ref: '#/components/schemas/AccountingPaymentMethod/definitions/paymentMethodType'
            status:
              $ref: '#/components/schemas/CommercePaymentMethod/allOf/1/properties/status'
            metadata:
              $ref: '#/components/schemas/Metadata'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        paymentMethodType:
          description: Method of payment.
          type: string
          enum:
            - Unknown
            - Cash
            - Check
            - CreditCard
            - DebitCard
            - BankTransfer
            - Other
    AccountingPayments:
      title: 'Accounting: Payments'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingPayment'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingProfitAndLossReport:
      title: 'Accounting: Profit and loss report'
      description: |-
        > **Language tip:** Profit and loss statement is also referred to as **income statement** under US GAAP (Generally Accepted Accounting Principles).

        > View the coverage for profit and loss in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=profitAndLoss" target="_blank">Data coverage explorer</a>.

        ## Overview

        The purpose of a profit and loss report is to present the financial performance of a company over a specified time period.

        A profit and loss report shows a company's total income and expenses for a specified period of time and whether a profit or loss has been made.

        > **Profit and loss or balance sheet?**  
        > Profit and loss reports summarise the total revenue, expenses, and profit or loss over a specified time period. A balance sheet report presents all assets, liability, and equity for a given date.


        **Structure of this report**  
        This report will reflect the structure and line descriptions that the business has set in their own accounting platform.

        **History**  
        By default, Codat pulls (up to) 24 months of profit and loss history for a company. You can adjust this to fetch more history, where available, by updating the `monthsToSync` value for `profitAndLoss` on the [data type settings endpoint](https://docs.codat.io/lending-api#/operations/post-profile-syncSettings).

        **Want to pull this in a standardised structure?**  
        Our [Enhanced Financials](https://docs.codat.io/assess/reports/enhanced-financials/financials) endpoints provide the same report under standardized headings, allowing you to pull it in the same format for all of your business customers.
      type: object
      properties:
        reports:
          type: array
          description: An array of profit and loss reports.
          items:
            $ref: '#/components/schemas/AccountingProfitAndLossReport/definitions/profitAndLossReport'
        reportBasis:
          $ref: '#/components/schemas/AccountingProfitAndLossReport/definitions/reportBasis'
        currency:
          minLength: 1
          type: string
          description: Base currency of the company in which the profit and loss report is presented.
        mostRecentAvailableMonth:
          $ref: '#/components/schemas/DateTime'
          description: Most recent available monthly report data.
        earliestAvailableMonth:
          $ref: '#/components/schemas/DateTime'
          description: Earliest available monthly report data.
      required:
        - reports
        - reportBasis
        - currency
      definitions:
        reportBasis:
          enum:
            - Unknown
            - Accrual
            - Cash
          type: string
          description: The basis of a report.
        profitAndLossReport:
          type: object
          additionalProperties: false
          properties:
            fromDate:
              $ref: '#/components/schemas/DateTime'
              description: Date from which the report data begins.
            toDate:
              $ref: '#/components/schemas/DateTime'
              description: Date on which the report data ends.
            income:
              $ref: '#/components/schemas/ReportLine'
              description: ReportLine items for income in the given date range.
            costOfSales:
              $ref: '#/components/schemas/ReportLine'
              description: ReportLine items for cost of sales in the given date range.
            grossProfit:
              type: number
              format: decimal
              description: Gross profit of the company in the given date range.
            expenses:
              $ref: '#/components/schemas/ReportLine'
              description: ReportLine items for expenses in the given date range.
            netOperatingProfit:
              type: number
              format: decimal
              description: Net operating profit of the company in the given date range.
            otherExpenses:
              $ref: '#/components/schemas/ReportLine'
              description: ReportLine items for other expenses in the given date range.
            otherIncome:
              $ref: '#/components/schemas/ReportLine'
              description: ReportLine items for other income in the given date range.
            netOtherIncome:
              type: number
              format: decimal
              description: Net other income of the company in the given date range.
            netProfit:
              type: number
              format: decimal
              description: Net profit of the company in the given date range.
          required:
            - grossProfit
            - netOperatingProfit
            - netOtherIncome
            - netProfit
    AccountingSupplier:
      title: 'Accounting: Supplier'
      description: |-
        > View the coverage for suppliers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=suppliers" target="_blank">Data coverage explorer</a>.

        ## Overview

        From the **Suppliers** endpoints, you can retrieve a list of [all the suppliers for a company](https://docs.codat.io/lending-api#/operations/list-suppliers). Suppliers' data links to accounts payable [bills](https://docs.codat.io/lending-api#/schemas/Bill).
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 'Identifier for the supplier, unique to the company in the accounting platform.'
            supplierName:
              type: string
              nullable: true
              description: 'Name of the supplier as recorded in the accounting system, typically the company name.'
            contactName:
              type: string
              nullable: true
              description: Name of the main contact for the supplier.
            emailAddress:
              type: string
              nullable: true
              description: Email address that the supplier may be contacted on.
            phone:
              type: string
              nullable: true
              description: Phone number that the supplier may be contacted on.
              examples:
                - +44 25691 154789
                - (877) 492-8687
                - 01224 658 999
            addresses:
              type: array
              nullable: true
              description: An array of Addresses.
              items:
                $ref: '#/components/schemas/AccountingAddress'
            registrationNumber:
              type: string
              nullable: true
              description: 'Company number of the supplier. In the UK, this is typically the company registration number issued by Companies House.'
            taxNumber:
              type: string
              nullable: true
              description: Supplier's company tax number.
            status:
              $ref: '#/components/schemas/AccountingSupplier/definitions/supplierStatus'
            defaultCurrency:
              type: string
              nullable: true
              description: Default currency the supplier's transactional data is recorded in.
            metadata:
              $ref: '#/components/schemas/Metadata'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - status
      definitions:
        supplierRef:
          title: Supplier reference
          description: Reference to the supplier the record relates to.
          type: object
          properties:
            id:
              minLength: 1
              type: string
              description: The supplier's unique ID
            supplierName:
              type: string
              nullable: true
              description: The supplier's name
          required:
            - id
        supplierStatus:
          description: Status of the supplier.
          type: string
          enum:
            - Unknown
            - Active
            - Archived
      examples:
        - id: C520FFD4-F6F6-4FC2-A6D2-5D7088B2B14F
          supplierName: Kelly's Industrial Supplies
          contactName: Kelly's Industrial Supplies
          emailAddress: sales@kellysupplies.com
          phone: 07999 999999
          addresses:
            - type: Billing
              line1: Unit 51
              line2: Bakersfield Industrial Estate
              city: Bakersfield
              region: California
              country: USA
              postalcode: '93308'
          registrationNumber: string
          taxNumber: string
          status: Unknown
          defaultCurrency: string
          metadata:
            isDeleted: true
          supplementalData:
            content:
              property1:
                property1: null
                property2: null
              property2:
                property1: null
                property2: null
          modifiedDate: '2022-10-23T00:00:00Z'
          sourceModifiedDate: '2022-10-23T00:00:00Z'
    AccountingSuppliers:
      title: Suppliers
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingSupplier'
        - $ref: '#/components/schemas/PagingInfo'
    AccountingTrackingCategory:
      x-internal: true
      title: 'Accounting: Tracking category'
      description: |-
        Details of a category used for tracking transactions.

        > Language tip
        >
        > Parameters used to track types of spend in various parts of an organization can be called  **dimensions**, **projects**, **classes**, or **locations** in different accounting platforms. In Codat, we refer to these as tracking categories.

        View the coverage for tracking categories in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=trackingCategories" target="_blank">Data coverage explorer</a>.

        ## Overview

        Tracking categories are used to monitor cost centres and control budgets that sit outside the standard chart of accounts. Customers may use tracking categories to group together and track the income and costs of specific departments, projects, locations or customers.

        From their accounting system, customers can: 

        - Create and maintain tracking categories and tracking category types.
        - View all tracking categories that are available for use.
        - View the relationships between the categories.
        - Assign invoices, bills, credit notes, or bill credit notes to one or more categories.
        - View the categories that a transaction belongs to.
        - View all transactions in a tracking category.

        ### Tracking categories per platform

        Review the platform-specific tracking categories that Codat supports, and the level they are assigned to in the source platform. 

        <table>
        <thead>
          <tr>
            <th>Platform</th>
            <th>Tracking category</th>
            <th>Tracking level</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><b>Dynamics 365</b></td>
            <td>Dimensions</td>
            <td>Line item</td>
          </tr>
          <tr>
            <td><b>Freshbooks</b></td>
            <td>Expense&nbsp;categories</td>
            <td>Line item</td>
          </tr>
          <tr>
            <td><b>MYOB</b></td>
            <td>Categories</td>
            <td>Transaction</td>
          </tr>
          <tr>
            <td rowspan=4><b>Netsuite</b></td>
            <td>Classes</td>
            <td>Line item</td>
          </tr>
          <tr>
            <td>Locations</td>
            <td>Line item</td>
          </tr>
          <tr>
            <td>Departments</td>
            <td>Line item</td>
          </tr>
          <tr>
            <td>Custom&nbsp;segments</td>
            <td>Line item</td>
          </tr>
          <tr>
            <td rowspan=2><b>QuickBooks Desktop</b></td>
            <td>Classes</td>
            <td>Line item or transaction level</td>
          </tr>
          <tr>
            <td>Locations</td>
            <td>Transaction</td>
          </tr>
          <tr>
            <td rowspan=2><b>QuickBooks Online</b></td>
            <td>Classes</td>
            <td>Line item or transaction level</td>
          </tr>
          <tr>
            <td>Locations</td>
            <td>Transaction</td>
          </tr>
          <tr>
            <td rowspan=3><b>Sage 200</b></td>
            <td>Cost&nbsp;centers</td>
            <td>Line item</td>
          </tr>
          <tr>
              <td>Departments</td>
            <td>Line item</td>
          </tr>
          <tr>
            <td>Analysis&nbsp;codes</td>
            <td>Transaction</td>
          </tr>
          <tr>
            <td rowspan=3><b>Sage 50</b></td>
            <td>Departments</td>
            <td>Line item</td>
          </tr>
          <tr>
             <td>Costcodes</td>
            <td>Line item</td>
          </tr>
          <tr>
            <td>Projects</td>
            <td>Line item</td>
          </tr>
          <tr>
            <td><b>Sage Intacct</b></td>
            <td>Dimensions</td>
            <td>Line item</td>
          </tr>
          <tr>
            <td><b>Xero</b></td>
            <td>Tracking&nbsp;categories</td>
            <td>Line item</td>
          </tr>
        </tbody>
        </table>

        > **Example use case**
        >
        > Monitor the budget for your annual conference using a tracking category called 'AnnualConference2020' with the **type** set to **Costing**.

        If a tracking category has a parent category, the ID of that parent category is displayed. There is also a `hasChildren` field that shows whether there are child subcategories nested beneath. 
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 'The identifier for the item, unique per tracking category.'
              nullable: true
            name:
              type: string
              description: The name of the tracking category.
              nullable: true
            status:
              $ref: '#/components/schemas/AccountingTrackingCategory/definitions/status'
            parentId:
              type: string
              description: The identifier for this item's immediate parent.
              nullable: true
            hasChildren:
              type: boolean
              description: Boolean value indicating whether this category has SubCategories.
            metadata:
              $ref: '#/components/schemas/Metadata'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        trackingCategoryRef:
          required:
            - id
          type: object
          description: References a category against which the item is tracked.
          deprecated: true
          properties:
            id:
              minLength: 1
              type: string
              description: Unique identifier to the tracking category.
            name:
              type: string
              nullable: true
              description: Name of tracking category.
        status:
          title: Tracking category status
          type: string
          description: Current state of the tracking category.
          enum:
            - Unknown
            - Active
            - Archived
      examples:
        - id: string
          name: string
          status: Unknown
          parentId: string
          hasChildren: true
          modifiedDate: '2022-10-23T00:00:00Z'
          sourceModifiedDate: '2022-10-23T00:00:00Z'
    AccountingTransfer:
      title: 'Accounting: Transfer'
      description: |-
        > View the coverage for transfers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=transfers" target="_blank">Data coverage explorer</a>.

        A transfer records the movement of money between two bank accounts, or between a bank account and a nominal account. It is a child data type of [account transactions](https://docs.codat.io/lending-api#/schemas/AccountTransaction).
      allOf:
        - properties:
            id:
              type: string
              description: Unique identifier for the transfer.
            description:
              type: string
              nullable: true
              description: Description of the transfer.
            contactRef:
              $ref: '#/components/schemas/AccountingDirectCost/definitions/directCostPrototype/properties/contactRef'
              description: 'The customer or supplier for the transfer, if available.'
            date:
              $ref: '#/components/schemas/DateTime'
              description: The day on which the transfer was made.
            from:
              $ref: '#/components/schemas/AccountingTransfer/definitions/transferAccount'
              description: The details of the accounts the transfer is moving from.
            to:
              $ref: '#/components/schemas/AccountingTransfer/definitions/transferAccount'
              description: The details of the accounts the transfer is moving to.
            trackingCategoryRefs:
              type: array
              nullable: true
              description: Reference to the tracking categories this transfer is being tracked against.
              items:
                $ref: '#/components/schemas/AccountingTrackingCategory/definitions/trackingCategoryRef'
            depositedRecordRefs:
              type: array
              nullable: true
              description: List of selected transactions to associate with the transfer. Use this field to include transactions which are posted to the _undeposited funds_ (or other holding) account within the transfer.
              items:
                $ref: '#/components/schemas/AccountsReceivableTracking/properties/recordRef'
            metadata:
              $ref: '#/components/schemas/Metadata'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        transferAccount:
          title: Transfer account
          description: Account details of the account sending or receiving the transfer.
          type: object
          properties:
            accountRef:
              $ref: '#/components/schemas/AccountingAccount/definitions/accountRef'
              description: The account that the transfer is moving from or to.
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
            amount:
              type: number
              format: decimal
              description: The amount transferred between accounts.
      type: object
    AccountingTransfers:
      title: 'Accounting: Transfers'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/AccountingTransfer'
        - $ref: '#/components/schemas/PagingInfo'
    AccountsPayableTracking:
      title: Tracking
      x-internal: true
      type: object
      description: 'Categories, and a project and customer, against which the item is tracked.'
      properties:
        categoryRefs:
          type: array
          items:
            $ref: '#/components/schemas/AccountingTrackingCategory/definitions/trackingCategoryRef'
        customerRef:
          $ref: '#/components/schemas/AccountingCustomer/definitions/accountingCustomerRef'
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        isBilledTo:
          $ref: '#/components/schemas/AccountsPayableTracking/definitions/billedToType'
        isRebilledTo:
          $ref: '#/components/schemas/AccountsPayableTracking/definitions/billedToType'
      required:
        - categoryRefs
        - isBilledTo
        - isRebilledTo
      definitions:
        billedToType:
          type: string
          description: Defines if the invoice or credit note is billed/rebilled to a project or customer.
          enum:
            - Unknown
            - NotApplicable
            - Customer
            - Project
    AccountsReceivableTracking:
      title: Tracking
      x-internal: true
      type: object
      description: 'Categories, and a project and customer, against which the item is tracked.'
      properties:
        categoryRefs:
          type: array
          items:
            $ref: '#/components/schemas/AccountingTrackingCategory/definitions/trackingCategoryRef'
        customerRef:
          $ref: '#/components/schemas/AccountingCustomer/definitions/accountingCustomerRef'
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        isBilledTo:
          $ref: '#/components/schemas/AccountsReceivableTracking/definitions/billedToType'
        isRebilledTo:
          $ref: '#/components/schemas/AccountsReceivableTracking/definitions/billedToType'
        recordRef:
          type: object
          x-internal: true
          title: Record reference
          description: |-
            Links the current record to the underlying record or data type that created it. 

            For example, if a journal entry is generated based on an invoice, this property allows you to connect the journal entry to the underlying invoice in our data model. 
          properties:
            id:
              type: string
              description: '''id'' of the underlying record or data type.'
            dataType:
              type: string
              description: Allowed name of the 'dataType'.
              examples:
                - journalEntry
                - invoice
                - accountTransaction
                - transfer
      required:
        - categoryRefs
        - isBilledTo
        - isRebilledTo
      definitions:
        billedToType:
          type: string
          enum:
            - Unknown
            - NotApplicable
            - Project
          description: Defines if the bill or bill credit note is billed/rebilled to a project.
    AgedCurrencyOutstanding:
      type: object
      title: 'Accounting: Aged currency outstanding'
      properties:
        currency:
          title: Currency
          x-internal: true
          type: string
          description: |-
            The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.

            ## Unknown currencies

            In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 

            There are only a very small number of edge cases where this currency code is returned by the Codat system.
          format: ISO4217
          examples:
            - GBP
            - USD
            - EUR
        agedOutstandingAmounts:
          type: array
          description: Array of outstanding amounts by period.
          items:
            $ref: '#/components/schemas/AgedCurrencyOutstanding/definitions/agedOutstandingAmount'
      definitions:
        agedOutstandingAmount:
          type: object
          title: Aged outstanding amount
          properties:
            fromDate:
              $ref: '#/components/schemas/DateTime'
              description: Start date of period.
            toDate:
              $ref: '#/components/schemas/DateTime'
              description: End date of period.
            amount:
              type: number
              format: decimal
              description: The amount outstanding.
            details:
              type: array
              description: Array of details.
              items:
                $ref: '#/components/schemas/AgedCurrencyOutstanding/definitions/agedOutstandingAmountDetail'
        agedOutstandingAmountDetail:
          type: object
          title: Amounts outstanding by data type
          properties:
            name:
              type: string
              description: Name of data type with outstanding amount for given period.
            amount:
              type: number
              format: decimal
              description: The amount outstanding.
    Attachments:
      x-internal: true
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AccountingAttachment'
          nullable: true
      title: Attachments
    BankingAccount:
      title: 'Banking: Bank account'
      description: |-
        This data type provides a list of all the SMB's bank accounts, with rich data like balances, account numbers, and institutions holding the accounts.

        Explore our [data coverage](https://knowledge.codat.io/supported-features/banking?view=tab-by-data-type&dataType=banking-accounts).

        Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
      type: object
      allOf:
        - type: object
          properties:
            id:
              minLength: 1
              type: string
              description: The ID of the account from the provider.
            name:
              minLength: 1
              type: string
              description: The name of the account according to the provider.
            informalName:
              type: string
              nullable: true
              description: 'The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available.'
            holder:
              type: string
              nullable: true
              description: The name of the person or company who holds the account.
            type:
              $ref: '#/components/schemas/AccountingBankAccountType'
            balance:
              $ref: '#/components/schemas/BankingAccountBalance/definitions/accountBalanceAmounts'
              description: An object containing bank balance data.
            identifiers:
              $ref: '#/components/schemas/BankingAccount/definitions/accountIdentifiers'
            currency:
              minLength: 1
              type: string
              description: The currency code for the account.
            institution:
              $ref: '#/components/schemas/BankingAccount/definitions/accountInstitution'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - id
        - name
        - type
        - balance
        - identifiers
        - currency
        - institution
      definitions:
        accountIdentifiers:
          title: Account Identifiers
          description: An object containing bank account identification information.
          type: object
          x-internal: true
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/BankingAccount/definitions/accountIdentifierType'
            subtype:
              type: string
              nullable: true
              description: Detailed account category
            number:
              type: string
              nullable: true
              description: 'The account number for the account. When combined with the`bankCode`, this is usually enough to uniquely identify an account within a jurisdiction.'
            bankCode:
              type: string
              nullable: true
              description: |-
                The local (usually national) routing number for the account.

                This is known by different names in different countries:
                * BSB code (Australia)
                * routing number (Canada, USA)
                * sort code (UK)
            iban:
              type: string
              nullable: true
              description: 'The international bank account number (IBAN) for the account, if known.'
            bic:
              type: string
              nullable: true
              description: 'The ISO 9362 code (commonly called SWIFT code, SWIFT-BIC or BIC) for the account.'
            maskedAccountNumber:
              type: string
              nullable: true
              description: A portion of the actual account `number` to help account identification where number is tokenised (Plaid only)
          required:
            - type
        accountIdentifierType:
          type: string
          x-internal: true
          description: Type of account
          enum:
            - Account
            - Card
            - Credit
            - Depository
            - Investment
            - Loan
            - Other
        accountInstitution:
          title: Account Institution
          description: The bank or other financial institution providing the account.
          x-internal: true
          type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: 'The institution''s ID, according to the provider.'
            name:
              type: string
              description: 'The institution''s name, according to the underlying provider.'
      examples:
        - results:
            - id: 1703194f-7805-4da8-bac0-2ba5da4a4216
              name: Business Current Account
              informalName: Codat
              holder: Codat Ltd
              type: Debit
              balance:
                available: -459987.97
                current: -459964.9
                limit: 5000
              identifiers:
                type: Depository
                subtype: checking
                number: '46762629'
                bankCode: 009911
                iban: GB29 LOYD 4773 2346 7626 29
                bic: LOYDGB21006
                maskedAccountNumber: LOYDGB21006
              currency: GBP
              institution:
                id: lloyds-bank
                name: Lloyds Bank
              modifiedDate: '2022-05-23T16:32:50Z'
              sourceModifiedDate: '2021-08-14T05:04:12'
    BankingAccountBalance:
      title: 'Banking: Account balance'
      description: |-
        The Banking Account Balances data type provides a list of balances for a bank account including end-of-day batch balance or running balances per transaction.

        Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.

        > **How often should I pull Account Balances?**
        >
        > Because these balances are closing balances, we recommend you pull Account Balance no more frequently than daily. If you require a live intraday balance, this can be found for each account on the [Account](https://docs.codat.io/lending-api#/schemas/Account) data type.
        > 
        > Whilst you can choose to sync hourly, this may incur usage charges from Plaid or TrueLayer.
      type: object
      allOf:
        - type: object
          properties:
            accountId:
              minLength: 1
              type: string
              description: The unique identifier of the account.
            balance:
              $ref: '#/components/schemas/BankingAccountBalance/definitions/accountBalanceAmounts'
            date:
              $ref: '#/components/schemas/DateTime'
              description: Date of the balance.
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - accountId
        - balance
        - date
      definitions:
        accountBalanceAmounts:
          title: Account Balance Amounts
          x-internal: true
          type: object
          properties:
            available:
              type: number
              format: decimal
              nullable: true
              description: 'The balance available in the account, including any pending transactions. This doesn''t include additional funds available from any overdrafts.'
            current:
              type: number
              format: decimal
              description: The balance of the account only including cleared transactions.
            limit:
              type: number
              format: decimal
              nullable: true
              description: 'The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`.'
          additionalProperties: false
          description: 'Depending on the data provided by the underlying bank, not all balances are always available.'
      examples:
        - accountBalances:
            - accountId: cce404db-27f7-4286-95db-622b53596cf4
              balance:
                available: 714374.48
                current: 714374.57
                limit: 5000
              date: '2021-03-18T00:00:00'
            - accountId: cce404db-27f7-4286-95db-622b53596cf4
              balance:
                available: 714374.48
                current: 714374.57
                limit: 5000
              date: '2021-03-19T00:00:00'
            - accountId: cce404db-27f7-4286-95db-622b53596cf4
              balance:
                available: 714195.66
                current: 714204.39
                limit: 5000
              date: '2021-03-22T00:00:00'
            - accountId: 2f593774-1075-4805-a552-84eecc7eb264
              balance:
                available: -644945.42
                current: -644925.84
                limit: 0
              date: '2022-03-09T00:00:00'
    BankingAccountBalances:
      title: 'Banking: Account balances'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/BankingAccountBalance'
        - $ref: '#/components/schemas/PagingInfo'
    BankingAccounts:
      title: 'Banking: Bank accounts'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/BankingAccount'
        - $ref: '#/components/schemas/PagingInfo'
    BankingTransaction:
      title: 'Banking: Transaction'
      description: |-
        The Banking Transactions data type provides an immutable source of up-to-date information on income and expenditure.

        Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.

        View the coverage for banking transactions in the [Data Coverage Explorer](https://knowledge.codat.io/supported-features/banking?view=tab-by-data-type&dataType=banking-transactions).
      type: object
      allOf:
        - type: object
          properties:
            id:
              minLength: 1
              type: string
              description: The unique identifier of the bank transaction.
            accountId:
              minLength: 1
              type: string
              description: The unique identifier of the bank account.
            description:
              type: string
              nullable: true
              description: The description of the bank transaction.
            amount:
              type: number
              format: decimal
              description: The amount of the bank transaction.
            currency:
              minLength: 1
              type: string
              description: The currency of the bank transaction.
            postedDate:
              $ref: '#/components/schemas/DateTime'
              description: The date the bank transaction was cleared.
            authorizedDate:
              $ref: '#/components/schemas/DateTime'
              description: The date the bank transaction was authorized.
            code:
              $ref: '#/components/schemas/BankingTransaction/definitions/transactionCode'
            merchantName:
              type: string
              nullable: true
              description: The name of the merchant.
            transactionCategoryRef:
              $ref: '#/components/schemas/BankingTransactionCategory/definitions/transactionCategoryRef'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - id
        - accountId
        - currency
      definitions:
        transactionCode:
          type: string
          x-internal: true
          description: Code to identify the underlying transaction.
          enum:
            - Unknown
            - Fee
            - Payment
            - Cash
            - Transfer
            - Interest
            - Cashback
            - Cheque
            - DirectDebit
            - Purchase
            - StandingOrder
            - Adjustment
            - Credit
            - Other
            - NotSupported
      examples:
        - id: 0130b5bb-1419-40f6-8a27-7362d0381229
          accountId: 1703194f-7805-4da8-bac0-2ba5da4a4216
          description: Payments for direct income ce149943-c157-43fc-aac7-42a716b655b6
          amount: 5062.39
          currency: GBP
          postedDate: '2021-07-06T00:00:00'
          authorizedDate: '2021-07-06T00:00:00'
          merchantName: New Look
          transactionCategoryRef:
            id: health-and-fitness-sports
          modifiedDate: '2022-05-23T16:32:50Z'
          sourceModifiedDate: '2021-06-28T10:48:12'
    BankingTransactionCategories:
      title: 'Banking: Transaction categories'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/BankingTransactionCategory'
        - $ref: '#/components/schemas/PagingInfo'
    BankingTransactionCategory:
      title: 'Banking: Transaction category'
      description: |-
        The Banking Transaction Categories data type provides a list of hierarchical categories associated with a transaction for greater contextual meaning to transaction activity.

        Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
      type: object
      allOf:
        - type: object
          description: Status of the bank transaction category.
          properties:
            id:
              minLength: 1
              type: string
              description: The unique identifier of the bank transaction category.
            name:
              minLength: 1
              type: string
              description: The name of the bank transaction category.
            parentId:
              type: string
              nullable: true
              description: The unique identifier of the parent bank transaction category.
            hasChildren:
              type: boolean
              description: A Boolean indicating whether there are other bank transaction categories beneath this one in the hierarchy.
            status:
              $ref: '#/components/schemas/BankingTransactionCategory/definitions/transactionCategoryStatus'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      required:
        - id
        - name
      definitions:
        transactionCategoryRef:
          type: object
          x-internal: true
          description: An object of bank transaction category reference data.
          properties:
            id:
              minLength: 1
              type: string
              description: The unique category reference id for the bank transaction.
            name:
              type: string
              nullable: true
              description: The category name reference for the bank transaction.
          required:
            - id
        transactionCategoryStatus:
          type: string
          description: The status of the transaction category.
          x-internal: true
          enum:
            - Unknown
            - Active
            - Archived
      examples:
        - id: auto-and-transport
          name: Auto & Transport
          hasChildren: true
          status: Active
          modifiedDate: '2022-05-23T16:32:50'
          sourceModifiedDate: '2021-04-24T07:59:10'
    BankingTransactions:
      title: 'Banking: Transactions'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/BankingTransaction'
        - $ref: '#/components/schemas/PagingInfo'
    BankStatementUploadConfiguration:
      title: Banking data upload settings
      description: Configuration settings for uploading banking data to Codat
      additionalProperties: false
      type: object
      properties:
        source:
          type: string
          enum:
            - codat
          description: The source of the banking data that determines its format
        accountId:
          type: string
          description: The ID of the account in the third-party platform
        providerId:
          type: string
          description: TrueLayer provider ID (only required if source is TrueLayer)
    ClientRateLimitReachedWebhook:
      title: Client rate limit reached webhook
      x-internal: true
      description: Webhook request body for a client that has reached their rate limit.
      type: object
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/properties/ClientId'
        ClientName:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/properties/ClientName'
        RuleId:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/properties/RuleId'
        RuleType:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/properties/RuleType'
        AlertId:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/properties/AlertId'
        Message:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/properties/Message'
        Data:
          $ref: '#/components/schemas/ClientRateLimitReachedWebhook/definitions/ClientRateLimitReachedWebhookData'
      definitions:
        ClientRateLimitReachedWebhookData:
          type: object
          title: Client rate limit reached webhook data
          properties:
            DailyQuota:
              type: integer
              description: The number of available requests per day.
            ExpiresUtc:
              $ref: '#/components/schemas/DateTime'
              description: The date time in UTC when your daily quota is reset.
      examples:
        - ClientId: bae71d36-ff47-420a-b4a6-f8c9ddf41140
          ClientName: Bank of Dave
          RuleId: 70af3071-65d9-4ec3-b3cb-5283e8d55dac
          RuleType: Rate Limit Reached
          AlertId: a9367074-b5c3-42c4-9be4-be129f43577e
          Message: The current daily rate limit quota of 1000 requests for bae71d36-ff47-420a-b4a6-f8c9ddf41140 has been reached.
          Data:
            DailyQuota: 1000
            ExpiresUtc: '2023-05-03T00:00:00Z'
    ClientRateLimitResetWebhook:
      title: Client rate limit reset webhook
      x-internal: true
      description: Webhook request body for a client that has had their rate limit reset.
      type: object
      properties:
        ClientId:
          title: Client ID
          type: string
          format: uuid
          description: Unique identifier for your client in Codat.
        ClientName:
          type: string
          description: Name of your client in Codat.
        RuleId:
          type: string
          format: uuid
          description: Unique identifier for the rule.
          deprecated: true
        RuleType:
          type: string
          x-stoplight:
            id: 34d52a089f08a
          description: The type of rule.
        AlertId:
          type: string
          format: uuid
          description: Unique identifier of the webhook event.
        Message:
          type: string
          description: A human-readable message about the webhook.
        Data:
          $ref: '#/components/schemas/ClientRateLimitResetWebhook/definitions/ClientRateLimitResetWebhookData'
      definitions:
        ClientRateLimitResetWebhookData:
          type: object
          title: Client rate limit reset webhook data
          properties:
            QuotaRemaining:
              type: integer
              description: Total number of requests remaining for your client.
              nullable: true
            ResetReason:
              type: string
              description: The reason for your rate limit quota being reset.
            DailyQuota:
              $ref: '#/components/schemas/ClientRateLimitReachedWebhook/definitions/ClientRateLimitReachedWebhookData/properties/DailyQuota'
              nullable: true
            ExpiresUtc:
              $ref: '#/components/schemas/ClientRateLimitReachedWebhook/definitions/ClientRateLimitReachedWebhookData/properties/ExpiresUtc'
              nullable: true
      examples:
        - ClientId: bae71d36-ff47-420a-b4a6-f8c9ddf41140
          ClientName: Bank of Dave
          RuleId: 70af3071-65d9-4ec3-b3cb-5283e8d55dac
          RuleType: Rate Limit Reset
          AlertId: a9367074-b5c3-42c4-9be4-be129f43577e
          Message: The current daily rate limit quota for client 30e0f9d2-52c0-4c9f-a806-bcd98a3bcd7e has been reset to 1000 requests.
          Data:
            QuotaRemaining: 1000
            ResetReason: The quota was reset because it is a new day.
            DailyQuota: 1000
            ExpiresUtc: '2023-05-03T00:00:00Z'
    CommerceAddress:
      title: 'Commerce: Address'
      x-internal: true
      type: object
      properties:
        type:
          $ref: '#/components/schemas/CommerceAddress/definitions/commerceAddressType'
        line1:
          description: The first line of the address
          type: string
        line2:
          description: The second line of the address
          type: string
        city:
          description: 'The third line of the address, or city'
          type: string
        region:
          description: 'The fourth line of the address, or region'
          type: string
        country:
          description: The country for the address
          type: string
        postalCode:
          description: The postal (or zip) code for the address
          type: string
      definitions:
        commerceAddressType:
          description: The type of the address
          type: string
          enum:
            - Billing
            - Delivery
            - Order
            - Inventory
            - Unknown
    CommerceCompanyInfo:
      title: 'Commerce: Company profile'
      description: |
        In the Codat system, company profile includes standard commercial details about 
        a linked company, such as their address, phone number, and company registration.

        Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=companyInfo) for this data type.
      type: object
      allOf:
        - type: object
          properties:
            companyName:
              type: string
              description: The name of the company
              example: Codat
            commercePlatformRef:
              type: string
              description: Identifier or reference for the company in the commerce platform
            companyLegalName:
              type: string
              description: The full legal name of the company
              example: Codat Limited
            addresses:
              type: array
              description: Addresses associated with the company
              items:
                $ref: '#/components/schemas/CommerceAddress'
            phoneNumbers:
              type: array
              description: Phone numbers associated with the company
              items:
                $ref: '#/components/schemas/PhoneNumber'
            webLinks:
              description: Weblinks associated with the company
              type: array
              items:
                $ref: '#/components/schemas/WebLink'
            registrationNumber:
              description: The registration number of the company
              type: string
              examples:
                - 10480375
            baseCurrency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
            accountBalances:
              description: The available and current cash balances for the company's accounts
              type: array
              items:
                $ref: '#/components/schemas/CommerceCompanyInfo/definitions/accountBalance'
            sourceUrls:
              description: 'URL addresses for the originating system. For example, potential use cases include ''deeplinking'' to the originating system'
              type: object
              additionalProperties:
                type: string
              example:
                url1: 'https://connect.sandbox.com/v2/customers'
                url2: 'https://connect.sandbox.com/v2/disputes'
        - $ref: '#/components/schemas/CommerceOrder/allOf/2'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        accountBalance:
          title: Account Balance
          type: object
          x-internal: true
          properties:
            available:
              description: The account's current balance
              type: number
              format: decimal
            pending:
              description: Funds that are not yet available in the balance
              type: number
              format: decimal
            reserved:
              description: Funds reserved as holdings
              format: decimal
            currency:
              description: The currency of the account
              allOf:
                - $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
    CommerceCustomer:
      title: 'Commerce: Customer'
      description: |-
        When a customer places an order with the connected commerce store their details are added to the Customers dataset. You can use the data from the Customers endpoints to calculate key metrics, such as customer churn.

        Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-customers) for this data type.
      type: object
      allOf:
        - $ref: '#/components/schemas/CommerceOrder/allOf/0'
        - type: object
          properties:
            customerName:
              type: string
              description: Name of the customer
              example: Fred Smith
            emailAddress:
              type: string
              description: Email address of the customer
              example: fred.smith@myCompany.com
            phone:
              $ref: '#/components/schemas/PhoneNumber/properties/number'
            defaultCurrency:
              allOf:
                - description: |
                    Default currency of any transactional data for the customer, 
                    for example, orders or payments
                - $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
            addresses:
              type: array
              description: Addresses of the customer
              items:
                $ref: '#/components/schemas/CommerceAddress'
            note:
              type: string
              description: Any additional information about the customer
        - $ref: '#/components/schemas/CommerceOrder/allOf/2'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        commerceCustomerRef:
          type: object
          description: Reference to the customer that placed the order.
          properties:
            id:
              description: The unique identitifer of the customer being referenced
              type: string
              examples:
                - 13d946f0-c5d5-42bc-b092-97ece17923ab
                - 9wg4lep4ush5cxs79pl8sozmsndbaukll3ind4g7buqbm1h2
                - 7110701885
                - EILBDVJVNUAGVKRQ
            name:
              description: Name of the customer being referenced.
              type: string
          required:
            - id
      examples:
        - customers:
            - id: '15'
              customerName: Daffy Duck
              emailAddress: d.duck@warnerbros.com
              defaultCurrency: GBP
              phone: (877) 492-8687
              addresses:
                - type: billing
                  line1: 301 Duck Pond
                  line2: 28 Green Street
                  city: London
                  region: England
                  country: United Kingdom
                  postalCode: WX1X 0BE
                - type: delivery
                  line1: Bread Street
                  line2: Bird Avenue
                  city: Paris
                  region: France
                  country: France
                  postalCode: WDF 123
              note: Regular customer
              createdDate: '0001-01-01T00:00:00'
              modifiedDate: null
              sourceModifiedDate: '2020-09-15T23:52:28'
            - id: '18'
              customerName: Tasmanian Devil
              emailAddress: t.devil@warnerbros.com
              defaultCurrency: GBP
              phone: +1-202-555-0181
              addresses:
                - type: billing
                  line1: 101 Fire Rooms
                  line2: Engine Street
                  city: London
                  region: England
                  country: United Kingdom
                  postalCode: WC1X 0BE
              note: Handle with care
              createdDate: '0001-01-01T00:00:00'
              modifiedDate: null
              sourceModifiedDate: '2020-04-16T02:41:52'
            - id: a99f5e0c-a4db-452f-8d2c-8fd15482b384
              customerName: Bugs Bunny
              emailAddress: b.bunny@warnerbros.com
              defaultCurrency: GBP
              phone: ''
              addresses:
                - type: billing
                  line1: 301 Carrot Street
                  line2: Orange Town
                  city: Yorkshire
                  region: England
                  country: United Kingdom
                  postalCode: WF1X 0BE
                - type: delivery
                  line1: 424 Field Street
                  line2: The Meadow
                  city: Paris
                  region: France
                  country: France
                  postalCode: WDF 123
              note: Regular customer
              createdDate: '0001-01-01T00:00:00'
              modifiedDate: null
              sourceModifiedDate: '2020-08-12T14:37:37'
    CommerceCustomers:
      title: 'Commerce: Customers'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/CommerceCustomer'
        - $ref: '#/components/schemas/PagingInfo'
    CommerceDispute:
      title: 'Commerce: Dispute'
      description: |-
        A customer may file a payment dispute with their bank or other card issuer when they're unsatisfied with their purchase or believe they have been charged incorrectly. For example:  
        - They didn't receive an order.  
        - The product they received was different to the commerce store's description.  
        - They've been the victim of online fraud.  

        You can use data from the Disputes endpoints to calculate key metrics, such as the number of chargebacks.

        Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-disputes) for this data type.
      type: object
      allOf:
        - $ref: '#/components/schemas/CommerceOrder/allOf/0'
        - type: object
          required:
            - currency
          properties:
            disputedTransactions:
              description: Link to the source event(s) which triggered this transaction.
              type: array
              items:
                $ref: '#/components/schemas/CommerceTransaction/definitions/transactionSourceRef'
            totalAmount:
              description: Total transaction amount that is under dispute.
              format: decimal
              examples:
                - 194.12
                - -283.56
                - 0
            currency:
              description: Currency of the disputed transaction.
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
            status:
              $ref: '#/components/schemas/CommerceDispute/definitions/disputeStatus'
            reason:
              description: Reason for the dispute
              type: string
              examples:
                - Unhappy with product
            dueDate:
              description: Date when the next action in the dispute resolution is due
              $ref: '#/components/schemas/DateTime'
        - $ref: '#/components/schemas/CommerceOrder/allOf/2'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        disputeStatus:
          description: Current status of the dispute
          x-internal: true
          type: string
          enum:
            - Won
            - Lost
            - Accepted
            - Processing
            - ChargeRefunded
            - EvidenceRequired
            - InquiryEvidenceRequired
            - InquiryProcessing
            - InquiryClosed
            - WaitingThirdParty
            - Unknown
          example: EvidenceRequired
      examples:
        - id: 03e608e3-bd1c-454f-8c2b-fb0133e43b95
          disputedTransactions:
            - id: e63ad857-7e12-4e64-9185-cdfd7c45d09d
              type: Order
          totalAmount: -47.66
          currency: GBP
          status: InquiryEvidenceRequired
          reason: Unhappy with product
          dueDate: '2021-03-29T14:39:55'
          createdDate: '2021-03-22T14:39:55'
          modifiedDate: '2022-02-02T11:02:45Z'
          sourceModifiedDate: '2021-03-22T14:39:55'
    CommerceDisputes:
      title: 'Commerce: Disputes'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/CommerceDispute'
        - $ref: '#/components/schemas/PagingInfo'
    CommerceLocation:
      title: 'Commerce: Location'
      type: object
      description: |-
        The Location datatype holds information on the geographic location at which stocks of products may be held, as referenced in the Products data type.

        A Location also holds information on geographic locations where orders were placed, as referenced in the Orders data type.

        Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-locations) for this data type.
      allOf:
        - $ref: '#/components/schemas/CommerceOrder/allOf/0'
        - type: object
          properties:
            name:
              description: Name of this location
              type: string
            address:
              description: Address associated with the location
              $ref: '#/components/schemas/CommerceAddress'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        locationRef:
          type: object
          description: Reference to the geographic location where the order was placed.
          properties:
            id:
              description: The unique identitifer of the location being referenced.
              type: string
              examples:
                - 13d946f0-c5d5-42bc-b092-97ece17923ab
                - 9wg4lep4ush5cxs79pl8sozmsndbaukll3ind4g7buqbm1h2
                - 7110701885
                - EILBDVJVNUAGVKRQ
            name:
              description: Name of the location being referenced.
              type: string
          required:
            - id
      examples:
        - id: '15'
          name: London Warehouse
          address:
            type: Inventory
            line1: Warner House
            line2: 98 Theobald's Road
            city: London
            region: ''
            country: United Kingdom
            postalCode: WC1X 8WB
          modifiedDate: '2020-08-12T14:37:37'
          sourceModifiedDate: '2020-08-12T14:37:37'
    CommerceLocations:
      title: 'Commerce: Locations'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/CommerceLocation'
        - $ref: '#/components/schemas/PagingInfo'
    CommerceOrder:
      title: 'Commerce: Order'
      description: |
        Orders contain the transaction details for all products sold by the company, and include details of any payments, service charges, or refunds related to each order. You can use data from the Orders endpoints to calculate key metrics, such as gross sales values and monthly recurring revenue (MRR).

        Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-orders) for this data type.
      allOf:
        - type: object
          x-stoplight:
            id: 516bf0ecc4907
          required:
            - id
          properties:
            id:
              type: string
              description: 'A unique, persistent identifier for this record'
              examples:
                - 13d946f0-c5d5-42bc-b092-97ece17923ab
                - 9wg4lep4ush5cxs79pl8sozmsndbaukll3ind4g7buqbm1h2
                - 7110701885
                - EILBDVJVNUAGVKRQ
              x-codat-validation:
                - validator: UniqueWithinConnection
        - properties:
            orderNumber:
              type: string
              description: Friendly reference for the order in the commerce or point of sale platform.
            country:
              description: |-
                The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.

                Depending on the platform the value of this property will either be an <a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes" target="_blank">ISO 3166</a> code (2-alpha or 3-alpha) or free-form text returned as a string name in our model. 

                For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/lending-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.
              type: string
              format: ISO3166 Alpha-3
              examples:
                - GBR
                - USA
                - ABW
            currency:
              allOf:
                - $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
                - description: Currency in which the order was placed.
            closedDate:
              $ref: '#/components/schemas/DateTime'
              description: 'Date on which order was closed after the product was shipped, paid for, and any refund period had elapsed.'
            totalAmount:
              description: 'Total amount of the order, including discounts, refunds, and tax, but excluding gratuities.'
              type: number
              format: decimal
            totalRefund:
              description: 'Total amount of any refunds issued on the order, including discounts and tax, but excluding gratuities. This is always negative.'
              type: number
              format: decimal
            totalTaxAmount:
              description: Total amount of tax applied to the order.
              type: number
              format: decimal
            totalDiscount:
              description: 'Total amount of any discounts applied to the order, excluding tax. This is typically positive (for discounts which decrease the amount of the order), but can also be negative (for discounts which increase the amount of the order).'
              type: number
              format: decimal
            totalGratuity:
              description: Extra amount added to the order.
              type: number
              format: decimal
            orderLineItems:
              type: array
              items:
                $ref: '#/components/schemas/CommerceOrder/definitions/orderLineItem'
            payments:
              type: array
              items:
                $ref: '#/components/schemas/CommercePayment/definitions/paymentRef'
            serviceCharges:
              type: array
              items:
                $ref: '#/components/schemas/CommerceOrder/definitions/serviceCharge'
            locationRef:
              $ref: '#/components/schemas/CommerceLocation/definitions/locationRef'
            customerRef:
              $ref: '#/components/schemas/CommerceCustomer/definitions/commerceCustomerRef'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - title: Created date
          type: object
          x-internal: true
          properties:
            createdDate:
              $ref: '#/components/schemas/DateTime'
              description: The date the entity was created.
        - title: Modified dates
          x-internal: true
          allOf:
            - title: ModifiedDate
              x-internal: true
              type: object
              properties:
                modifiedDate:
                  allOf:
                    - $ref: '#/components/schemas/DateTime'
                    - description: |-
                        The date when the record was last fetched from the data source and updated in Codat’s data cache. 

                        Use it to identify and retrieve records that have changed since your last fetch. For example, filtering `modifiedDate` to today will provide new records updated in Codat today.

                        This date is populated for all data types except for attachments, balance sheets, company information, and profit & loss reports ([read more](https://docs.codat.io/using-the-api/modified-dates#modified-date)).

                        In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>.
            - title: Source Modified Date
              x-internal: true
              type: object
              nullable: true
              properties:
                sourceModifiedDate:
                  allOf:
                    - $ref: '#/components/schemas/DateTime'
                    - description: |-
                        The date when a record was last modified in the source platform, usually by the business or a business process. For example, when payments are made against an invoice. 

                        It is not populated ([read more](https://docs.codat.io/using-the-api/modified-dates#source-modified-date)) when:
                          - Pulling attachments
                          - The integration platform does not provide modification dates for a data type
                          - A record has been deleted from the source platform and Codat doesn't have a record of when the deletion occurred
                          - A record has been voided. For certain platforms that soft delete records, `isDeleted` metadata is used to identify void records

                        In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>.
      definitions:
        orderLineItem:
          allOf:
            - $ref: '#/components/schemas/CommerceOrder/allOf/0'
            - type: object
              properties:
                quantity:
                  type: number
                  format: decimal
                  description: |
                    Number of units of the product sold.
                    For refunds, quantity is negative.
                taxPercentage:
                  type: number
                  format: decimal
                  description: Percentage rate (from 0 to 100) of any sales tax applied to the unit price.
                  examples:
                    - 0
                    - 12.5
                    - '45.00'
                totalAmount:
                  type: number
                  format: decimal
                  description: 'Total amount of the line item, including discounts and tax.'
                totalTaxAmount:
                  type: number
                  format: decimal
                  description: 'Total amount of tax applied to the line item, factoring in any discounts.'
                unitPrice:
                  type: number
                  format: decimal
                  description: 'Price per unit of goods or services, excluding discounts and tax.'
                taxes:
                  type: array
                  items:
                    $ref: '#/components/schemas/CommerceTaxComponent/definitions/taxComponentAllocation'
                  description: Taxes breakdown as applied to order lines.
                productRef:
                  $ref: '#/components/schemas/CommerceProduct/definitions/productRef'
                productVariantRef:
                  $ref: '#/components/schemas/CommerceProduct/definitions/productVariantRef'
                discountAllocations:
                  type: array
                  items:
                    $ref: '#/components/schemas/CommerceOrder/definitions/orderDiscountAllocation'
        serviceCharge:
          type: object
          properties:
            description:
              description: Service charges for this order.
              type: string
              example: A service charge
            totalAmount:
              description: 'Total amount of the service charge, including tax.'
              type: number
              format: decimal
              examples:
                - 0
                - 12.5
                - 45
            taxPercentage:
              description: Percentage rate (from 0 to 100) of any tax applied to the service charge.
              type: number
              format: decimal
              examples:
                - 0
                - 12.5
                - 45
            taxAmount:
              description: Amount of the service charge that is tax.
              type: number
              format: decimal
              examples:
                - 0
                - 12.5
                - 45
            taxes:
              description: Taxes breakdown as applied to service charges.
              type: array
              items:
                $ref: '#/components/schemas/CommerceTaxComponent/definitions/taxComponentAllocation'
            quantity:
              description: The number of times the charge is charged.
              type: integer
              examples:
                - 1
                - 12
                - 45
            type:
              $ref: '#/components/schemas/CommerceOrder/definitions/serviceChargeType'
        serviceChargeType:
          description: The type of the service charge.
          type: string
          enum:
            - Generic
            - Shipping
            - Overpayment
            - Unknown
          example: Overpayment
        orderDiscountAllocation:
          type: object
          properties:
            name:
              type: string
              description: Name of the discount in the commerce or point of sale platform.
              example: Promotional Discount
            totalAmount:
              type: number
              format: decimal
              description: 'Total amount of discount applied, excluding tax. This is typically positive (for discounts which decrease the amount of the order line), but can also be negative (for discounts which increase the amount of the order line).'
              example: 15.25
      examples:
        - id: 01e63721-1205-478e-8503-9d8bf8a93f44
          orderNumber: '99123956'
          country: CAN
          currency: CAD
          createdDate: '2021-03-28T03:00:14'
          totalAmount: 12
          totalRefund: 0
          totalTaxAmount: 2
          totalDiscount: 0
          totalGratuity: 1
          orderLineItems:
            - id: 116113a6-54d3-4624-ba73-26a77a5ffd51
              quantity: 1
              taxPercentage: 20
              totalAmount: 12
              totalTaxAmount: 2
              unitPrice: 10
              taxes:
                - taxComponentRef:
                    id: '72'
                    name: Sales Tax
                  taxAmount: ''
                - taxComponentRef:
                    id: '72'
                    name: City Tax
                  taxAmount: ''
              productRef:
                id: ac186646-41f2-4280-afea-1012c59459ab
                name: Intelligent Concrete Salad
              productVariantRef:
                id: f9ca9de5-9e31-460d-ac81-368f4e7c8fc0
                name: Small Incredible Wooden Soap
              discountAllocations: []
          payments:
            - id: defdceb6-83a3-4b7d-a74e-e9ef947d5f48
              amount: 12
              currency: CAD
              type: Paypal
              status: Unknown
              dueDate: '2021-04-04T03:00:14'
              createdDate: '2021-03-28T03:00:14'
              modifiedDate: '2022-02-02T11:02:45'
          serviceCharges:
            - description: Service Charge
              totalAmount: 1.2
              taxPercentage: 20
              taxAmount: 0.2
              taxes:
                - taxComponentRef:
                    id: '72'
                    name: Service Tax
                  taxAmount: ''
              quantity: 1
              type: Generic
          locationRef:
            id: 47bbffc7-c045-4b0f-a3bb-ecf1f669edfa
          customerRef:
            id: 2634d180-7205-43f0-a73d-84af6443a005
            name: Emmy Roberts
          modifiedDate: '2022-02-02T11:02:45Z'
          sourceModifiedDate: '2021-03-28T03:00:14'
      type: object
    CommerceOrders:
      title: 'Commerce: Orders'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/CommerceOrder'
        - $ref: '#/components/schemas/PagingInfo'
    CommercePayment:
      title: 'Commerce: Payment'
      description: |-
        Payments contain details of all payments made by customers to a company, including: amounts, currency used, payment method, payment provider, and payment status.

        Refunds are recorded as separate, negative payments. Note that a refund can only occur in relation to a payment that has been completed (i.e. has a status of `Paid`). When a customer cancels an order _before_ a payment has been completed, the payment shows as `Cancelled`.

        You can use data from the Payments endpoints to calculate key metrics, such as gross sales and monthly recurring revenue (MRR).

        Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-payments) for this data type.
      type: object
      allOf:
        - $ref: '#/components/schemas/CommerceOrder/allOf/0'
        - type: object
          properties:
            amount:
              type: number
              format: decimal
              description: Payment Amount (including gratuity)
              examples:
                - 194.12
                - -283.56
                - 0
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: Currency in which the payment was made
            paymentMethodRef:
              $ref: '#/components/schemas/PaymentMethodRef'
            status:
              $ref: '#/components/schemas/CommercePayment/definitions/paymentStatus'
            paymentProvider:
              type: string
              description: 'Service provider of the payment, if applicable.'
              examples:
                - Amazon Pay
                - Checkout.com
                - SagePay
            dueDate:
              description: Date by which payment must be made
              $ref: '#/components/schemas/DateTime'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - $ref: '#/components/schemas/CommerceOrder/allOf/2'
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      definitions:
        paymentStatus:
          type: string
          x-internal: true
          description: Status of the payment.
          enum:
            - Pending
            - Authorized
            - Paid
            - Failed
            - Cancelled
            - Unknown
        paymentType:
          type: string
          x-internal: true
          nullable: true
          description: Type of payment.
          enum:
            - Cash
            - Card
            - Invoice
            - OnlineCard
            - Swish
            - Vipps
            - Mobile
            - StoreCredit
            - Paypal
            - Custom
            - Prepaid
            - Unknown
          example: Cash
        paymentRef:
          x-internal: true
          allOf:
            - $ref: '#/components/schemas/CommerceOrder/allOf/0'
            - type: object
              properties:
                amount:
                  type: number
                  format: decimal
                  nullable: true
                  description: Payment Amount (including gratuity).
                  examples:
                    - 194.12
                    - -283.56
                    - 0
                currency:
                  $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
                  description: Currency in which the payment was made.
                type:
                  $ref: '#/components/schemas/CommercePayment/definitions/paymentType'
                status:
                  $ref: '#/components/schemas/CommercePayment/definitions/paymentStatus'
                paymentProvider:
                  type: string
                  description: 'Service provider of the payment, if applicable.'
                  examples:
                    - Amazon Pay
                    - Checkout.com
                    - SagePay
                dueDate:
                  description: Date by which payment must be made
                  $ref: '#/components/schemas/DateTime'
            - $ref: '#/components/schemas/CommerceOrder/allOf/2'
            - $ref: '#/components/schemas/CommerceOrder/allOf/3'
    CommercePaymentMethod:
      title: 'Commerce: Payment method'
      description: |-
        A Payment Method represents the payment method(s) used to make payments.

        Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-paymentMethods) for this data type.
      type: object
      allOf:
        - $ref: '#/components/schemas/CommerceOrder/allOf/0'
        - type: object
          properties:
            name:
              type: string
              description: The name of the PaymentMethod
              example: Alipay
            status:
              description: Status of the Payment Method.
              x-internal: true
              type: string
              enum:
                - Unknown
                - Active
                - Archived
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
    CommercePaymentMethods:
      title: 'Commerce: Payment methods'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/CommercePaymentMethod'
        - $ref: '#/components/schemas/PagingInfo'
    CommercePayments:
      title: 'Commerce: Payments'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/CommercePayment'
        - $ref: '#/components/schemas/PagingInfo'
    CommerceProduct:
      title: 'Commerce: Product'
      description: |
        A Product is an item in the company's inventory, and includes information about the price and quantity of all products, and variants thereof, available for sale.

        Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-products) for this data type.
      type: object
      allOf:
        - $ref: '#/components/schemas/CommerceOrder/allOf/0'
        - type: object
          properties:
            name:
              type: string
              description: Name of the product in the commerce or POS system
              examples:
                - Hard Drive
                - Windows Installation
                - Software Support (Hourly)
            description:
              type: string
              description: Description of the product recorded in the commerce or point of sale platform.
              examples:
                - 1tb Western Digital Hard Drive
                - Install of Windows 11 (Professional Edition)
                - 1 hour of support from an agent (phone or remote)
            categorization:
              type: string
              description: Retail category that the product is assigned to e.g. `Hardware`.
              examples:
                - Hardware
                - Software
                - Support Services
            isGiftCard:
              type: boolean
              description: |
                Whether the product represents a gift card or voucher that
                can be redeemed in the commerce or POS platform.
            variants:
              type: array
              items:
                $ref: '#/components/schemas/CommerceProduct/definitions/productVariant'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
      definitions:
        productRef:
          type: object
          description: Reference that links the line item to the correct product details.
          properties:
            id:
              description: The unique identifier of the product being referenced.
              type: string
              examples:
                - 13d946f0-c5d5-42bc-b092-97ece17923ab
                - 9wg4lep4ush5cxs79pl8sozmsndbaukll3ind4g7buqbm1h2
                - 7110701885
                - EILBDVJVNUAGVKRQ
            name:
              description: Name of the product being referenced.
              type: string
          required:
            - id
        productVariant:
          title: Product Variant
          description: |
            Represents a variation of a product available for sale, for example an item of clothing that may be available for sale in multiple sizes and colors.
          allOf:
            - $ref: '#/components/schemas/CommerceOrder/allOf/0'
              description: 'Identifier of the product variant, unique to the company.'
            - properties:
                name:
                  type: string
                  examples:
                    - Red Coat
                    - Black Coat
                    - Large Brown Hat
                  description: Name of the product recorded in the commerce or point of sale platform.
                isTaxEnabled:
                  type: boolean
                  description: Whether sales taxes are enabled for this product variant.
                sku:
                  type: string
                  examples:
                    - Coat-Red-Lrg
                    - Coat-Black-Md
                    - LargeBrownHat
                    - A725BA2
                  description: 'SKU (stock keeping unit) of the variant, as defined by the merchant.'
                barcode:
                  type: string
                  examples:
                    - '564158468416486458646886484'
                    - CSE370
                  description: 'Unique product number of the variant. This might be a barcode, UPC, ISBN, etc.'
                unitOfMeasure:
                  type: string
                  examples:
                    - kg
                    - m
                    - meters
                  description: 'Unit of measure for the variant, such as `kg` or `meters`.'
                vatPercentage:
                  type: number
                  format: decimal
                  examples:
                    - 12.5
                    - 0
                    - 20
                  description: VAT rate for the product variant if sales taxes are enabled.
                prices:
                  type: array
                  description: Prices for the product variants in different currencies.
                  items:
                    $ref: '#/components/schemas/CommerceProduct/definitions/productPrice'
                inventory:
                  $ref: '#/components/schemas/CommerceProduct/definitions/productInventory'
                shippingRequired:
                  type: boolean
                  description: Indicates whether or not the product requires physical delivery.
                status:
                  $ref: '#/components/schemas/CommerceProduct/definitions/productVariantStatus'
            - $ref: '#/components/schemas/CommerceOrder/allOf/2'
            - $ref: '#/components/schemas/CommerceOrder/allOf/3'
        productVariantRef:
          title: Product variant reference
          type: object
          description: Reference that links the line item to the specific version of product that has been ordered.
          properties:
            id:
              description: The unique identifier of the product variant being referenced.
              type: string
              examples:
                - 13d946f0-c5d5-42bc-b092-97ece17923ab
                - 9wg4lep4ush5cxs79pl8sozmsndbaukll3ind4g7buqbm1h2
                - 7110701885
                - EILBDVJVNUAGVKRQ
            name:
              description: Name of the product variant being referenced.
              type: string
          required:
            - id
        productPrice:
          title: Product Price Variant
          x-internal: true
          type: object
          properties:
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              nullable: true
            unitPrice:
              type: number
              format: decimal
              description: The product variant's unit price.
        productInventory:
          title: Product Inventory
          description: Information about the total inventory as well as the locations inventory is in.
          x-internal: true
          type: object
          properties:
            totalQuantity:
              type: number
              format: decimal
              nullable: true
              description: The total quantity of stock remaining across locations.
            locations:
              type: array
              items:
                $ref: '#/components/schemas/CommerceProduct/definitions/productInventoryLocation'
        productInventoryLocation:
          title: Product Inventory Location
          x-internal: true
          type: object
          properties:
            quantity:
              type: number
              format: decimal
              description: The quantity of stock remaining at location.
            locationRef:
              $ref: '#/components/schemas/CommerceLocation/definitions/locationRef'
        productVariantStatus:
          x-internal: true
          type: string
          description: The status of the product variant.
          enum:
            - Unknown
            - Published
            - Unpublished
    CommerceProductCategories:
      title: 'Commerce: Product categories'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/CommerceProductCategory'
        - $ref: '#/components/schemas/PagingInfo'
    CommerceProductCategory:
      title: 'Commerce: Product category'
      description: |-
        Product categories are used to classify a group of products together, either by type (e.g. "Furniture"), or sometimes by tax profile.

        Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-productCategories) for this data type.
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: '"102"'
              description: The unique identifier of the product category
            name:
              type: string
              example: Entertainment
              description: The name of the product category
            ancestorRefs:
              type: array
              description: A collection of parent product categories implicitly ordered with the immediate parent last in the list.
              items:
                $ref: '#/components/schemas/CommerceRecordRef'
            hasChildren:
              type: boolean
              description: A boolean indicating whether there are other product categories beneath this one in the hierarchy.
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
      examples:
        - productCategories:
            - id: '100'
              name: Entertainment
              ancestorRefs: []
              hasChildren: true
              modifiedDate: '2022-01-01T12:00:00Z'
              sourceModifiedDate: '2021-10-01T12:53:21Z'
            - id: '101'
              name: Cinema
              ancestorRefs:
                - id: '100'
                  name: Entertainment
              hasChildren: true
              modifiedDate: '2022-01-01T12:00:00Z'
              sourceModifiedDate: '2021-10-01T12:55:02Z'
            - id: '102'
              name: Movie
              ancestorRefs:
                - id: '100'
                  name: Entertainment
                - id: '101'
                  name: Cinema
              hasChildren: false
              modifiedDate: '2022-01-01T12:00:00Z'
              sourceModifiedDate: '2021-12-25T12:00:00Z'
    CommerceProducts:
      title: 'Commerce: Products'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/CommerceProduct'
        - $ref: '#/components/schemas/PagingInfo'
    CommerceRecordRef:
      title: Record Ref
      x-internal: true
      type: object
      properties:
        id:
          description: The unique identitifer of the record being referenced
          type: string
          examples:
            - 13d946f0-c5d5-42bc-b092-97ece17923ab
            - 9wg4lep4ush5cxs79pl8sozmsndbaukll3ind4g7buqbm1h2
            - 7110701885
            - EILBDVJVNUAGVKRQ
        type:
          description: The type of record being referenced.
          type: string
      required:
        - id
        - type
      description: ''
    CommerceReport:
      title: Commerce report
      description: |-
        ## Structure

        Assess reports follow a consistent structure. Reports contain four sections of information:

        ### 1. Report definition

        Information such as:

          1. The report info (e.g. enhanced_profit_and_loss).
          2. The display name of the report (e.g. Enhanced Profit and Loss).
          
        ### 2. Dimension info

        Information about the dimension contained in the reports such as:

          1. The type of dimension (e.g. datetime, recordRef).
          2. The display name of the dimension (e.g. Period, Category type, Category sub type).
          3. The details about each item within the dimension (e.g. displayName:"Jan 2022", start:"...", end:"...", id:"...", name:"...").

        ### 3. Measure info

        Information about the measures contained in the report such as:

          1. The display name of the measure (e.g. value of account, percentage change).
          2. The type of the measure (e.g. currency, percentage).
          3. The unit of the measure (e.g. %, GBP).
          
        ### 4. The data for the report

        When the *includeDisplayName* parameter is set to *true*, it shows the *dimensionDisplayName* and *itemDisplayName* to make the data human-readable. The default setting for *includeDisplayName* is *false*.


        ## Displaying the report

        Reports can be rendered as follows (ordering is implicit rather than explicit):

        ![A table showing an example of how a report can be rendered](https://files.readme.io/1fa20ca-Report1.png)

        # Data model

        ## Dimensions
      type: object
      properties:
        reportInfo:
          type: object
          additionalProperties:
            type: string
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/CommerceReport/definitions/commerceReportDimension'
        measures:
          type: array
          items:
            $ref: '#/components/schemas/CommerceReport/definitions/commerceReportMeasure'
        reportData:
          type: array
          items:
            $ref: '#/components/schemas/CommerceReport/definitions/commerceReportComponent'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/CommerceReport/definitions/commerceReportError'
      definitions:
        commerceReportMeasure:
          title: Measure
          type: object
          properties:
            displayName:
              description: The measure's display name.
              type: string
            units:
              type: string
              description: The measure's units e.g. percentage (%).
            index:
              type: integer
              description: The measure's index.
            type:
              type: string
              description: The measure's type.
        commerceReportError:
          title: Error
          type: object
          properties:
            message:
              type: string
              description: Message returned by error.
            type:
              type: string
              description: The type of error.
            details:
              description: Additional details on the error.
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
        commerceReportDimension:
          title: Dimension
          type: object
          properties:
            index:
              type: integer
              description: The dimension's index.
            displayName:
              type: string
              description: The dimension's display name.
            type:
              type: string
              description: The dimension's type.
            items:
              type: array
              items:
                type: object
                properties:
                  index:
                    type: integer
                    description: The dimension's items index.
        commerceReportComponent:
          title: Report component
          type: object
          properties:
            dimension:
              type: integer
              description: The component's dimension.
            dimensionDisplayName:
              type: string
              description: The component's display name.
            item:
              type: integer
              description: The component's item number.
            itemDisplayName:
              type: string
              description: The component's item display name.
            measures:
              type: array
              items:
                $ref: '#/components/schemas/CommerceReport/definitions/reportComponentMeasure'
            components:
              type: array
              items:
                $ref: '#/components/schemas/CommerceReport/definitions/commerceReportComponent'
        reportComponentMeasure:
          type: object
          title: Report component measure
          properties:
            index:
              type: integer
              description: The measure's index.
            measureDisplayName:
              type: string
              description: The measure's display name.
            value:
              type: number
              format: decimal
              description: The measure's value.
      x-examples:
        Example 1:
          reportInfo:
            additionalProp1: string
            additionalProp2: string
            additionalProp3: string
          dimensions:
            - index: 0
              displayName: string
              type: string
              items:
                - index: 0
          measures:
            - displayName: string
              units: string
              index: 0
              type: string
          reportData:
            - dimension: 0
              dimensionDisplayName: string
              item: 0
              itemDisplayName: string
              measures:
                - index: 0
                  measureDisplayName: string
              components:
                - string
          errors:
            - message: string
              type: DatesOutOfRange
              details:
                additionalProp1:
                  - string
                additionalProp2:
                  - string
                additionalProp3:
                  - string
    CommerceTaxComponent:
      title: 'Commerce: Tax component'
      description: |-
        The Tax Components endpoints return tax rates data from the commerce platform, including tax rate names and values. This is to support the mapping of tax rates from the commerce platform to those in the accounting platform.

        Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-disputes) for this data type.
      type: object
      allOf:
        - $ref: '#/components/schemas/CommerceOrder/allOf/0'
        - type: object
          properties:
            name:
              type: string
              description: Name of the Tax Rate Component in the source commerce platform.
              example: Sales Tax
            rate:
              description: Rate of taxation represented as a fraction of the net price (typically in the range 0.00 - 1.00).
              type: number
              format: decimal
              examples:
                - 0.15
                - 0.2
            isCompound:
              description: The Boolean flag to indicate when a Tax Rate Component compounds on a sale.
              type: boolean
              examples:
                - true
                - false
        - $ref: '#/components/schemas/CommerceOrder/allOf/3'
          required:
            - name
      definitions:
        taxComponentAllocation:
          title: Tax Component Allocation
          type: object
          properties:
            taxComponentRef:
              $ref: '#/components/schemas/CommerceTaxComponent/definitions/taxComponentRef'
            rate:
              description: Tax amount on order line sale as available from source commerce platform.
              type: number
              format: decimal
              nullable: true
        taxComponentRef:
          type: object
          description: Taxes rates reference object depending on the rates being available on source commerce package.
          properties:
            id:
              description: The unique identitifer of the tax component being referenced.
              type: string
              examples:
                - 13d946f0-c5d5-42bc-b092-97ece17923ab
                - 9wg4lep4ush5cxs79pl8sozmsndbaukll3ind4g7buqbm1h2
                - 7110701885
                - EILBDVJVNUAGVKRQ
            name:
              description: Name of the tax component being referenced.
              type: string
          required:
            - id
            - name
      examples:
        - id: 13d946f0-c5d5-42bc-b092-97ece17923ab
          name: Sales Tax (15%)
          rate: 0.15
          isCompound: true
          modifiedDate: '2022-10-23T00:00:00Z'
          sourceModifiedDate: '2022-10-23T00:00:00Z'
    CommerceTransaction:
      title: 'Commerce: Transaction'
      description: |-
        Details of all financial transactions recorded in the commerce or point of sale system are added to the Transactions data type. For example, payments, service charges, and fees.

        You can use data from the Transactions endpoints to calculate key metrics, such as:  
        - Transaction volumes  
        - Average transaction volume  
        - Average transaction value  
        - Returns  
        - Payouts

        Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-transactions) for this data type.
      type: object
      allOf:
        - $ref: '#/components/schemas/CommerceOrder/allOf/0'
        - type: object
          properties:
            totalAmount:
              description: The total transaction amount
              type: number
              format: decimal
              examples:
                - 194.12
                - -283.56
                - 0
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
            type:
              $ref: '#/components/schemas/CommerceTransaction/definitions/transactionType'
            subType:
              description: Non-standardised transaction type data from the commerce platform
              type: string
              examples:
                - CardPayment
                - Invoice payment
            transactionSourceRef:
              description: Link to the source event which triggered this transaction
              allOf:
                - $ref: '#/components/schemas/CommerceTransaction/definitions/transactionSourceRef'
            supplementalData:
              $ref: '#/components/schemas/SupplementalData'
        - allOf:
            - type: object
              x-stoplight:
                id: c590b4405180f
              allOf:
                - $ref: '#/components/schemas/CommerceOrder/allOf/2'
                - type: object
                  x-stoplight:
                    id: gdyjg7bg783br
                  properties:
                    sourceCreatedDate:
                      $ref: '#/components/schemas/DateTime'
                      description: The date on which this record was created in the originating system
            - $ref: '#/components/schemas/CommerceOrder/allOf/3'
          x-stoplight:
            id: 9e815c1766554
      definitions:
        transactionSourceRef:
          title: Transaction Source Reference
          x-internal: true
          allOf:
            - $ref: '#/components/schemas/CommerceRecordRef'
            - type: object
              properties:
                type:
                  $ref: '#/components/schemas/CommerceTransaction/definitions/transactionSourceType'
        transactionSourceType:
          x-internal: true
          type: string
          description: The type of source the transaction arose.
          enum:
            - Fee
            - Order
            - Payment
            - ServiceCharge
            - Unknown
        transactionType:
          x-internal: true
          description: |-
            The type of the platform transaction:  
            - `Unknown`  
            - `FailedPayout` — Failed transfer of funds from the seller's merchant account to their bank account.  
            - `Payment` — Credit and debit card payments.  
            - `PaymentFee` — Payment provider's fee on each card payment.  
            - `PaymentFeeRefund` — Payment provider's fee that has been refunded to the seller.  
            - `Payout` — Transfer of funds from the seller's merchant account to their bank account.  
            - `Refund` — Refunds to a customer's credit or debit card.  
            - `Transfer` — Secure transfer of funds to the seller's bank account.  
          type: string
          enum:
            - Payment
            - Refund
            - Payout
            - FailedPayout
            - Transfer
            - PaymentFee
            - PaymentFeeRefund
            - Unknown
      examples: []
    CommerceTransactions:
      title: 'Commerce: Transactions'
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/CommerceTransaction'
        - $ref: '#/components/schemas/PagingInfo'
    Companies:
      title: Companies
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/Company'
        - $ref: '#/components/schemas/PagingInfo'
    Company:
      title: Company
      description: "\uFEFFIn Codat, a company represents a business sharing access to their data. Each company can have multiple [connections](https://docs.codat.io/lending-api#/schemas/Connection) to different data sources such as one connection to [Xero](https://docs.codat.io/integrations/accounting/xero/accounting-xero) for accounting data, two connections to [Plaid](https://docs.codat.io/integrations/banking/plaid/banking-plaid) for two bank accounts and a connection to [Zettle](https://docs.codat.io/integrations/commerce/zettle/commerce-zettle) for POS data.\n\nTypically each company is one of your customers.\n\nWhen you create a company, you can specify a `name` and we will automatically generate a unique `id` for the company. You can also add a `description` to store any additional information about the company."
      type: object
      properties:
        id:
          $ref: '#/components/parameters/companyId/schema'
        name:
          type: string
          description: The name of the company
          example: Codat Ltd.
        description:
          type: string
          example: Requested early access to the new financing scheme.
          description: 'Additional information about the company. This can be used to store foreign IDs, references, etc.'
        platform:
          type: string
          deprecated: true
          example: Xero
          description: '`platformKeys` name used when creating the company.'
        redirect:
          type: string
          format: uri
          description: 'The `redirect` [Link URL](https://docs.codat.io/auth-flow/authorize-hosted-link) enabling the customer to start their auth flow journey for the company.'
          example: 'https://link.codat.io/company/27628208-459c-46a2-a705-5641ce25f739'
        lastSync:
          $ref: '#/components/schemas/DateTime'
        created:
          $ref: '#/components/schemas/DateTime'
        createdByUserName:
          type: string
          description: Name of user that created the company in Codat.
        dataConnections:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
        groups:
          type: array
          items:
            title: Group reference
            type: object
            properties:
              id:
                $ref: '#/components/schemas/Company/definitions/companyGroupAssignment/properties/groupId/allOf/0'
          description: An array of groups the company has been assigned to.
      required:
        - id
        - name
        - redirect
      definitions:
        companyGroupAssignment:
          title: Group assignment
          type: object
          properties:
            groupId:
              allOf:
                - type: string
                  format: uuid
                  example: 60d2fa12-8a04-11ee-b9d1-0242ac120002
                  description: Unique identifier for the group.
                - description: Unique identifier of the group you want to assign the company to.
      examples:
        - id: 0498e921-9b53-4396-a412-4f2f5983b0a2
          name: string
          platform: string
          redirect: 'https://link.codat.io/company/27628208-459c-46a2-a705-5641ce25f739'
          lastSync: '2022-01-01T12:00:00.000Z'
          created: '2022-01-01T12:00:00.000Z'
          createdByUserName: string
          dataConnections:
            - id: ee2eb431-c0fa-4dc9-93fa-d29781c12bcd
              integrationId: bf083d72-62c7-493e-aec9-81b4dbba7e2c
              integrationKey: dfxm
              sourceId: bdd831ce-eebd-4896-89a7-20e5ee8989ee
              platformName: Basiq
              linkUrl: 'https://link-api.codat.io/companies/86bd88cb-44ab-4dfb-b32f-87b19b14287f/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start'
              status: Linked
              lastSync: '2022-10-27T10:22:43.6464237Z'
              created: '2022-10-27T09:53:29Z'
              sourceType: Banking
          groups:
            - id: d7a6c4b4-dc87-45f6-b803-62f466398680
    CompanyRequestBody:
      title: Create company request
      x-internal: true
      type: object
      properties:
        name:
          type: string
          description: Name of company being connected.
          pattern: '^[A-Za-z0-9\s\-'',&@.,?!\s]+$'
          minLength: 1
          example: Bank of Dave
        description:
          $ref: '#/components/schemas/Company/properties/description'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Company/properties/groups/items'
          description: Reference to the groups that the company is assigned to.
      required:
        - name
    Connection:
      title: Connection
      description: "\uFEFFA connection represents a [company's](https://docs.codat.io/lending-api#/schemas/Company) connection to a data source and allows you to synchronize data (pull and/or push) with that source.\n\nA company can have multiple data connections depending on the type of data source it is connecting to. For example, a single company can link to:\n\n- [Accounting data](https://docs.codat.io/accounting-api/overview) - 1 active connection.\n- [Banking data](https://docs.codat.io/banking-api/overview) - Multiple active connections.\n- [Commerce data](https://docs.codat.io/commerce-api/overview) - Multiple active connections.\nAny combination of accounting, banking, and commerce data connections is allowed.\n\nBefore you can use a data connection to pull or push data, the company must grant you access to their business data by [linking the connection](https://docs.codat.io/auth-flow/overview)."
      type: object
      properties:
        id:
          $ref: '#/components/parameters/connectionId/schema'
        integrationId:
          type: string
          format: uuid
          example: fd321cb6-7963-4506-b873-e99593a45e30
          description: A Codat ID representing the integration.
        integrationKey:
          type: string
          description: A unique four-character ID that identifies the platform of the company's data connection. This ensures continuity if the platform changes its name in the future.
        sourceId:
          type: string
          format: uuid
          example: 35b92968-9851-4095-ad60-395c95cbcba4
          description: 'A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.'
        sourceType:
          title: Source Type
          description: The type of platform of the connection.
          type: string
          enum:
            - Accounting
            - Banking
            - BankFeed
            - Commerce
            - Expense
            - Other
            - Unknown
          example: Accounting
        platformName:
          type: string
          description: Name of integration connected to company.
        linkUrl:
          type: string
          format: uri
          description: The link URL your customers can use to authorize access to their business application.
          example: 'https://link-api.codat.io/companies/86bd88cb-44ab-4dfb-b32f-87b19b14287f/connections/2e2eb431-c1fa-4dc9-93fa-d29781c12bcd/start'
        status:
          $ref: '#/components/schemas/Connection/definitions/dataConnectionStatus'
        lastSync:
          $ref: '#/components/schemas/DateTime'
        created:
          $ref: '#/components/schemas/DateTime'
        dataConnectionErrors:
          type: array
          items:
            $ref: '#/components/schemas/Connection/definitions/dataConnectionError'
        connectionInfo:
          type: object
          additionalProperties:
            type: string
        additionalProperties: false
      required:
        - id
        - integrationId
        - integrationKey
        - sourceId
        - platformName
        - linkUrl
        - status
        - created
        - sourceType
      definitions:
        dataConnectionStatus:
          title: Data connection status
          description: The current authorization status of the data connection.
          type: string
          enum:
            - PendingAuth
            - Linked
            - Unlinked
            - Deauthorized
        dataConnectionError:
          title: Data connection error
          type: object
          properties:
            statusCode:
              type: string
              description: The HTTP status code returned by the error.
            statusText:
              type: string
              description: A non-numeric status code/text.
            errorMessage:
              type: string
              description: A brief message about the error.
            erroredOnUtc:
              $ref: '#/components/schemas/DateTime'
        dataConnectionSourceType:
          title: Source Type
          description: The type of platform of the connection.
          type: string
          enum:
            - Accounting
            - Banking
            - BankFeed
            - Commerce
            - Expense
            - Other
            - Unknown
          example: Accounting
      example:
        id: ee2eb431-c0fa-4dc9-93fa-d29781c12bcd
        integrationId: bf083d72-62c7-493e-aec9-81b4dbba7e2c
        integrationKey: dfxm
        sourceId: bdd831ce-eebd-4896-89a7-20e5ee8989ee
        platformName: Basiq
        linkUrl: 'https://link-api.codat.io/companies/86bd88cb-44ab-4dfb-b32f-87b19b14287f/connections/ee2eb431-c0fa-4dc9-93fa-d29781c12bcd/start'
        status: Linked
        lastSync: '2022-10-27T10:22:43.6464237Z'
        created: '2022-10-27T09:53:29Z'
        sourceType: Banking
    Connections:
      title: Connections
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/Connection'
        - $ref: '#/components/schemas/PagingInfo'
    DataIntegrityDetail:
      title: Data integrity detail
      type: object
      properties:
        id:
          type: string
          description: ID GUID of the transaction.
        type:
          type: string
          description: The data type of the record.
        connectionId:
          type: string
          format: uuid
          description: ID GUID representing the connection of the accounting or banking platform.
          readOnly: true
        date:
          $ref: '#/components/schemas/DateTime'
          description: The date of the transaction.
        description:
          type: string
          description: The transaction description.
        amount:
          type: number
          format: decimal
          description: The transaction value.
        currency:
          $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
          description: The currency of the transaction.
        matches:
          type: array
          items:
            $ref: '#/components/schemas/DataIntegrityDetail/definitions/dataIntegrityMatch'
      definitions:
        dataIntegrityMatch:
          type: object
          properties:
            id:
              type: string
              description: ID GUID of the transaction.
            type:
              type: string
              description: 'The data type which the data type in the URL has been matched against. For example, if you''ve matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.'
            connectionId:
              type: string
              description: ID GUID representing the connection of the accounting or banking platform.
              format: uuid
            date:
              type: string
              description: The date of the transaction.
            description:
              type: string
              description: The transaction description.
            amount:
              type: string
              description: The transaction value.
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: The currency of the transaction.
    DataIntegrityDetails:
      title: Data integrity details
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/DataIntegrityDetail'
        - $ref: '#/components/schemas/PagingInfo'
    DataIntegrityStatus:
      title: Data integrity status
      type: object
      allOf:
        - $ref: '#/components/schemas/DataIntegritySummary/definitions/dataIntegrityType'
        - type: object
          properties:
            statusInfo:
              $ref: '#/components/schemas/DataIntegrityStatus/definitions/dataIntegrityStatusInfo'
            connectionIds:
              $ref: '#/components/schemas/DataIntegrityStatus/definitions/dataIntegrityConnectionId'
            amounts:
              $ref: '#/components/schemas/DataIntegrityStatus/definitions/dataIntegrityAmounts'
            dates:
              $ref: '#/components/schemas/DataIntegrityStatus/definitions/dataIntegrityDates'
      definitions:
        dataIntegrityStatusInfo:
          type: object
          properties:
            lastMatched:
              type: string
              $ref: '#/components/schemas/DateTime'
              description: The date the matching algorithm last ran against the company’s data type specified.
              readOnly: true
            currentStatus:
              $ref: '#/components/schemas/DataIntegrityStatus/definitions/integrityStatus'
            statusMessage:
              type: string
              description: Detailed explanation supporting the status value.
        dataIntegrityConnectionId:
          type: object
          properties:
            source:
              type: array
              description: An array of strings. The connection IDs for the type specified in the url.
              items:
                type: string
            target:
              type: array
              description: An array of strings. The connection IDs for the type being matched to.
              items:
                type: string
        dataIntegrityAmounts:
          type: object
          description: 'Only returned for transactions. For accounts, there is nothing returned.'
          properties:
            min:
              type: number
              format: decimal
              description: Lowest value of transaction set.
            max:
              type: number
              format: decimal
              description: Highest value of transaction set.
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
        dataIntegrityDates:
          type: object
          description: 'Only returned for transactions. For accounts, there is nothing returned.'
          properties:
            minDate:
              $ref: '#/components/schemas/DateTime'
              description: Earliest date of transaction set.
              readOnly: true
            maxDate:
              $ref: '#/components/schemas/DateTime'
              description: Latest date of transaction set.
              readOnly: true
            minOverlappingDate:
              $ref: '#/components/schemas/DateTime'
              description: Earliest date where transactions exist in both accounting and banking platforms.
              readOnly: true
            maxOverlappingDate:
              $ref: '#/components/schemas/DateTime'
              description: Latest date where transactions exist in both account and banking platforms.
              readOnly: true
        integrityStatus:
          type: string
          enum:
            - Unknown
            - DoesNotExist
            - Error
            - Complete
          description: The current status of the most recently run matching algorithm.
      examples:
        - type: string
          statusInfo:
            lastMatched: '2021-10-24T14:15:22Z'
            currentStatus: Unknown
            statusMessage: string
          connectionIds:
            source:
              - d5a8d1b2-b38a-4e44-8641-548ad43be6bb
              - da8c9f39-8af9-4a98-964b-f1e207942837
            target:
              - 3d7ce25a-c107-44bc-8e0c-36c10bdd14e0
              - a5300eac-01fa-4a77-b5b0-ea0b86a3be69
          amounts:
            min: 130
            max: 2450
            currency: GBP
          dates:
            minDate: '2021-09-17T12:09:33.441Z'
            maxDate: '2021-12-16T12:12:53.441Z'
            minOverlappingDate: '2021-09-30T12:09:13.441Z'
            maxOverlappingDate: '2021-11-27T12:19:33.441Z'
    DataIntegrityStatuses:
      title: Data integrity statuses
      x-internal: true
      type: object
      properties:
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/DataIntegrityStatus'
    DataIntegritySummaries:
      title: Data integrity summaries
      x-internal: true
      type: object
      properties:
        summaries:
          type: array
          items:
            $ref: '#/components/schemas/DataIntegritySummary'
    DataIntegritySummary:
      title: Data integrity summary
      type: object
      allOf:
        - $ref: '#/components/schemas/DataIntegritySummary/definitions/dataIntegrityType'
        - type: object
          properties:
            byAmount:
              $ref: '#/components/schemas/DataIntegritySummary/definitions/dataIntegrityByAmount'
            byCount:
              $ref: '#/components/schemas/DataIntegritySummary/definitions/dataIntegrityByCount'
      definitions:
        dataIntegrityType:
          type: object
          properties:
            type:
              type: string
              description: 'The data type which the data type in the URL has been matched against. For example, if you''ve matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.'
        dataIntegrityByAmount:
          title: Data integrity by amount
          type: object
          properties:
            matchPercentage:
              type: number
              format: decimal
              description: The percentage of the absolute value of transactions of the type specified in the route which have a match.
            unmatched:
              type: number
              format: decimal
              description: The sum of the absolute value of transactions of the type specified in the route which don't have a match.
            matched:
              type: number
              format: decimal
              description: The sum of the absolute value of transactions of the type specified in the route which have a match.
            total:
              type: number
              format: decimal
              description: The total of unmatched and matched.
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
        dataIntegrityByCount:
          title: Data integrity by count
          type: object
          properties:
            matchPercentage:
              type: number
              format: decimal
              description: The percentage of records of the type specified in the route which have a match.
            unmatched:
              type: number
              format: decimal
              description: The number of records of the type specified in the route which don't have a match.
            matched:
              type: number
              format: decimal
              description: The number of records of the type specified in the route which do have a match.
            total:
              type: number
              format: decimal
              description: The total of unmatched and matched.
    DataStatus:
      title: Data status
      description: Describes the state of data in the Codat cache for a company and data type
      type: object
      required:
        - dataType
        - lastSuccessfulSync
        - currentStatus
      properties:
        dataType:
          title: Data types
          x-internal: true
          type: string
          description: Available data types
          enum:
            - accountTransactions
            - balanceSheet
            - bankAccounts
            - bankTransactions
            - billCreditNotes
            - billPayments
            - bills
            - cashFlowStatement
            - chartOfAccounts
            - company
            - creditNotes
            - customers
            - directCosts
            - directIncomes
            - invoices
            - itemReceipts
            - items
            - journalEntries
            - journals
            - paymentMethods
            - payments
            - profitAndLoss
            - purchaseOrders
            - salesOrders
            - suppliers
            - taxRates
            - trackingCategories
            - transfers
            - banking-accountBalances
            - banking-accounts
            - banking-transactionCategories
            - banking-transactions
            - commerce-companyInfo
            - commerce-customers
            - commerce-disputes
            - commerce-locations
            - commerce-orders
            - commerce-paymentMethods
            - commerce-payments
            - commerce-productCategories
            - commerce-products
            - commerce-taxComponents
            - commerce-transactions
          example: invoices
        lastSuccessfulSync:
          $ref: '#/components/schemas/DateTime'
        currentStatus:
          $ref: '#/components/schemas/PullOperation/properties/status'
        latestSyncId:
          type: string
          description: Unique identifier for most recent sync of data type.
          format: uuid
          example: ad474a37-2003-478e-baee-9af9f1ec2fe3
        latestSuccessfulSyncId:
          type: string
          description: Unique identifier for the most recent successful sync of data type.
          format: uuid
          example: 8220fc90-55b6-47bc-9417-48ac6ea93101
      examples:
        - dataType: string
          lastSuccessfulSync: '2022-01-01T13:00:00.000Z'
          currentStatus: string
          latestSyncId: ad474a37-2003-478e-baee-9af9f1ec2fe3
          latestSuccessfulSyncId: 8220fc90-55b6-47bc-9417-48ac6ea93101
    DataStatusResponse:
      x-internal: true
      title: Data status response
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DataStatus'
    DataType:
      x-internal: true
      $ref: '#/components/schemas/DataStatus/properties/dataType'
    DateTime:
      title: Date time
      type: string
      examples:
        - 2022-10-23T00:00:00.000Z
        - 2022-10-23T00:00:00.000Z
      description: |-
        In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

        ```
        2020-10-08T22:40:50Z
        2021-01-01T00:00:00
        ```



        When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

        - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
        - Unqualified local time: `2021-11-15T01:00:00`
        - UTC time offsets: `2021-11-15T01:00:00-05:00`

        > Time zones
        > 
        > Not all dates from Codat will contain information about time zones.  
        > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    EndUploadSessionRequest:
      title: End upload session request
      type: object
      properties:
        status:
          type: string
          enum:
            - Cancel
            - Process
          description: An indicator to cancel the dataset processing or trigger ingestion and enrichment of data.
    EnhancedCashFlowTransactions:
      title: Enhanced cash flow transactions
      description: |-
        > **Categorization engine**
        >
        > The categorization engine uses machine learning and has been fully trained against Plaid and TrueLayer banking data sources. It is not fully trained against the Basiq banking data source.

        The Enhanced Cash Flow Transactions endpoint provides a fully categorized list of banking transactions for a company. Accounts and transaction data are obtained from the company's banking data sources.
      type: object
      properties:
        reportInfo:
          $ref: '#/components/schemas/EnhancedInvoicesReport/definitions/reportInfo'
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/EnhancedCashFlowTransactions/definitions/dataSource'
        reportItems:
          type: array
          items:
            $ref: '#/components/schemas/EnhancedCashFlowTransactions/definitions/enhancedCashFlowItem'
      definitions:
        dataSource:
          type: object
          properties:
            accounts:
              description: 'An array containing bank account data for each connected banking data source that have the following data types enabled: `banking-accounts`, `banking-transactions`.'
              type: array
              items:
                $ref: '#/components/schemas/EnhancedCashFlowTransactions/definitions/accounts'
        accounts:
          title: Accounts
          type: object
          properties:
            sourceRef:
              $ref: '#/components/schemas/EnhancedCashFlowTransactions/definitions/sourceRef'
            platformName:
              description: 'Name of the banking data source, e.g. "Plaid".'
              type: string
            accountProvider:
              description: The bank or other financial institution providing the account.
              type: string
            accountName:
              description: The name of the account according to the provider.
              type: string
            accountType:
              description: 'The type of banking account, e.g. credit or debit.'
              type: string
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: The currency code for the bank account.
            currentBalance:
              description: The balance of the bank account.
              type: number
              format: decimal
        sourceRef:
          title: Report source reference
          description: A source reference containing the `sourceType` object "Banking".
          type: object
          properties:
            sourceType:
              description: The data source type.
              type: string
          examples:
            - Example:
                value:
                  sourceRef:
                    sourceType: Banking
        accountRef:
          title: Account reference
          description: An account reference containing the account id and name.
          type: object
          properties:
            id:
              description: The id of the account.
              type: string
            name:
              description: The name of the account.
              type: string
          examples:
            - Example:
                value:
                  accountRef:
                    id: 4f78a6b0-e9bb-40f2-82fd-f3a2daa1fd0a
                    name: Business Current Account
        enhancedCashFlowItem:
          type: object
          properties:
            transactions:
              description: An array of transaction data.
              type: array
              items:
                $ref: '#/components/schemas/EnhancedCashFlowTransactions/definitions/enhancedCashFlowTransaction'
        enhancedCashFlowTransaction:
          title: Cash flow transaction
          type: object
          properties:
            id:
              description: The unique identifier of the bank transaction.
              type: string
            date:
              description: The date the bank transaction was posted.
              $ref: '#/components/schemas/DateTime'
            description:
              description: The description of the bank transaction.
              type: string
            amount:
              description: The bank transaction amount.
              type: number
              format: decimal
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: The currency code for bank transaction.
            transactionCategory:
              description: Contains an array of category levels.
              $ref: '#/components/schemas/EnhancedCashFlowTransactions/definitions/transactionCategory'
            platformName:
              description: Returns the payment processor responsible for the transaction.
              type: string
            sourceRef:
              $ref: '#/components/schemas/EnhancedCashFlowTransactions/definitions/sourceRef'
            accountRef:
              $ref: '#/components/schemas/EnhancedCashFlowTransactions/definitions/accountRef'
            modifiedDate:
              description: The date the bank transaction was last modified.
              $ref: '#/components/schemas/DateTime'
        transactionCategory:
          title: Transaction category
          type: object
          properties:
            confidence:
              description: Returns the confidence of the suggested category for the transaction. The value is between 0 and 100.
              type: number
              format: decimal
            levels:
              description: The suggested category is an ordered array of category levels where each element (or level) is a subcategory of the previous element (or level).
              type: array
              items:
                type: string
          examples:
            - Example:
                value:
                  transactionCategory:
                    confidence: 92.7
                    levels:
                      - Asset
                      - Current
                      - Bank
                      - BankTransfers
                      - ShareholderTransfers
    EnhancedFinancialReport:
      title: Enhanced report
      type: object
      properties:
        reportInfo:
          $ref: '#/components/schemas/EnhancedFinancialReport/definitions/enhancedReportInfo'
        reportItems:
          type: array
          description: An array of report items.
          items:
            title: Report item
            type: object
            properties:
              date:
                $ref: '#/components/schemas/DateTime'
                description: Last date of the period.
              balance:
                type: number
                format: decimal
                description: Balance of the account as reported on the profit and loss or Balance sheet.
              accountName:
                type: string
                description: Name of the account.
              accountId:
                type: string
                description: The unique account ID.
              accountCategory:
                $ref: '#/components/schemas/EnhancedFinancialReport/definitions/enhancedReportAccountCategory'
      definitions:
        enhancedReportAccountCategory:
          title: Account category
          descrciption: 'An object containing the suggested or confirmed account categories, up to five levels.'
          type: object
          properties:
            status:
              type: string
              description: 'Returns a status of "Suggested" or "Confirmed". If an account has a confirmed category, it will replace any suggested category returned.'
            levels:
              type: array
              items:
                $ref: '#/components/schemas/EnhancedFinancialReport/definitions/accountCategoryLevel'
        accountCategoryLevel:
          title: Account category level
          description: An object containing an ordered list of account category levels.
          type: object
          properties:
            levelName:
              type: string
              description: Account category name.
            confidence:
              type: number
              format: decimal
              description: Confidence level of the category. This will only be populated where `status` is `Suggested`.
        enhancedReportInfo:
          type: object
          properties:
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
              description: Currency of the P&L/Balance sheet.
            reportName:
              type: string
              description: The name of the report.
            companyName:
              type: string
              description: Name of the company queried.
            generatedDate:
              $ref: '#/components/schemas/DateTime'
              description: Returns the YYYY-MM-DD datetime of report generation.
      examples:
        - reportInfo:
            reportName: EnhancedProfitAndLossAccounts
            companyName: ABC LTD
            generatedDate: '2022-01-01'
          reportItems:
            - date: '2022-01-01'
              balance: 70
              accountName: Sales UK
              accountId: 13931cbf-ea06-4d6e-9538-a8457fa66011
              accountCategory:
                status: Suggested
                levels:
                  - levelName: Income
                    confidence: 0.95
                  - levelName: Revenue
                    confidence: 0.9
            - date: '2022-01-01'
              balance: 30
              accountName: Sales US
              accountId: 13931cbf-ea06-4d6e-9538-a8457fa66011
              accountCategory:
                lastUpdated: '2022-01-02'
                status: Suggested
                levels:
                  - levelName: Income
                    confidence: 0.95
                  - levelName: Revenue
                    confidence: 0.9
            - date: '2022-01-01'
              balance: 70
              accountName: Amazon
              accountId: 13931cbf-ea06-4d6e-9538-a8457fa66011
              accountCategory:
                lastUpdated: '2022-01-02'
                status: Suggested
                levels:
                  - levelName: Income
                    confidence: 0.95
                  - levelName: Revenue
                    confidence: 0.95
                  - levelName: Online
                    confidence: 0.8
    EnhancedInvoicesReport:
      title: Enhanced invoices report
      description: The enhanced invoices report takes the key elements of the Invoices report verifying those marked as paid in the accounting platform have actually been paid by matching with the bank statement.
      type: object
      properties:
        reportInfo:
          $ref: '#/components/schemas/EnhancedInvoicesReport/definitions/reportInfo'
        reportItems:
          type: array
          items:
            $ref: '#/components/schemas/EnhancedInvoicesReport/definitions/enhancedInvoiceReportItem'
      definitions:
        lendingCustomerRef:
          type: object
          properties:
            id:
              minLength: 1
              type: string
              description: '`id` from the Customers data type.'
            customerName:
              type: string
              nullable: true
              description: '`customerName` from the Customer data type.'
        payment:
          title: Enhanced invoice payment item
          type: object
          properties:
            id:
              type: string
              description: 'ID of the invoice, which may be a GUID but it may be something else depending on the accounting platform.'
            date:
              $ref: '#/components/schemas/DateTime'
            paymentType:
              type: string
              description: The type of payment.
            amount:
              type: number
              format: decimal
              description: Payment amount.
            currency:
              $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
            currencyRate:
              $ref: '#/components/schemas/AccountingPaymentAllocation/definitions/paymentAllocationPayment/properties/currencyRate'
            bankingTransactionRefs:
              type: array
              items:
                $ref: '#/components/schemas/EnhancedInvoicesReport/definitions/bankingTransactionRef'
        bankingTransactionRef:
          title: Banking transaction reference
          type: object
          properties:
            id:
              type: string
              description: Unique identifier for the bank transaction.
            dataConnectionId:
              type: string
              description: Unique identifier of the bank transaction's connection.
            accountId:
              type: string
              description: Unique identifier of the bank transaction's account.
            accountName:
              type: string
              description: Name given to account.
            date:
              $ref: '#/components/schemas/DateTime'
            description:
              type: string
              description: Description given to bank transaction.
            amount:
              type: number
              description: Bank transaction amount.
              format: decimal
        invoiceStatus:
          $ref: '#/components/schemas/AccountingInvoice/definitions/invoiceStatus'
        enhancedInvoiceReportItem:
          title: Enhanced invoice report item
          type: object
          allOf:
            - type: object
              properties:
                id:
                  type: string
                  description: 'ID of the invoice, which may be a GUID but it may be something else depending on the accounting platform.'
                invoiceNumber:
                  type: string
                  description: Invoice number.
                customerRef:
                  $ref: '#/components/schemas/EnhancedInvoicesReport/definitions/lendingCustomerRef'
                issueDate:
                  $ref: '#/components/schemas/DateTime'
                dueDate:
                  $ref: '#/components/schemas/DateTime'
                status:
                  $ref: '#/components/schemas/AccountingInvoice/definitions/invoiceStatus'
                currency:
                  $ref: '#/components/schemas/AgedCurrencyOutstanding/properties/currency'
                totalAmount:
                  type: number
                  format: decimal
                  description: Invoice's total amount.
                amountDue:
                  type: number
                  format: decimal
                  description: Invoice's total amount due.
                payments:
                  type: array
                  items:
                    $ref: '#/components/schemas/EnhancedInvoicesReport/definitions/payment'
                paidOnDate:
                  $ref: '#/components/schemas/DateTime'
            - $ref: '#/components/schemas/CommerceOrder/allOf/3'
        reportInfo:
          title: Report information
          type: object
          description: 'Report additional information, which is specific to Lending API reports.'
          properties:
            pageNumber:
              type: integer
              description: The number of the page queried.
            pageSize:
              type: integer
              description: The number of transactions returned per page.
            totalResults:
              type: integer
              description: The total number of transactions available for a company for the period specified in the query string.
            reportName:
              type: string
              description: Name of the report.
            companyName:
              type: string
              description: The name of the company being queried.
            generatedDate:
              type: string
              description: Date the report was generated.
          examples:
            - Example 1:
                value:
                  pageNumber: 0
                  pageSize: 0
                  totalResults: 0
                  reportName: string
                  companyName: string
                  generatedDate: '2023-01-26T07:36:40.487Z'
    ErrorMessage:
      title: Error message
      type: object
      x-internal: true
      properties:
        statusCode:
          type: integer
          description: The HTTP status code returned by the error.
        service:
          type: string
          description: Codat's service the returned the error.
        error:
          type: string
          description: A brief description of the error.
        correlationId:
          type: string
          description: Unique identifier used to propagate to all downstream services and determine the source of the error.
        validation:
          $ref: '#/components/schemas/ErrorMessage/definitions/errorValidation'
        canBeRetried:
          type: string
          description: '`True` if the error occurred transiently and can be retried.'
        detailedErrorCode:
          type: integer
          description: Machine readable error code used to automate processes based on the code returned.
      definitions:
        errorValidation:
          title: Validation error
          type: object
          nullable: true
          description: 'A human-readable object describing validation decisions Codat has made. If an operation has failed because of validation errors, they will be detailed here.'
          properties:
            errors:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/ErrorMessage/definitions/errorValidationItem'
            warnings:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/ErrorMessage/definitions/errorValidationItem'
        errorValidationItem:
          title: Validation error item
          type: object
          properties:
            itemId:
              type: string
              nullable: true
              description: Unique identifier for a validation item.
            message:
              type: string
              nullable: true
              description: A message outlining validation item's issue.
            validatorName:
              type: string
              nullable: true
              description: Name of validator.
    ExcelStatus:
      type: object
      title: Excel status
      properties:
        lastGenerated:
          $ref: '#/components/schemas/DateTime'
          description: The date and time of when the generation of the most recent report was initiated.
        inProgress:
          type: boolean
          description: 'When true, the request was successful and the report is being generated. If false, the request was unsuccessful and the report is not being generated.'
        queued:
          type: string
          description: The date and time of when a successful request was queued for the most recent report.
        success:
          type: boolean
          description: True if the requested report was successfully queued and false if the requested report was not able to be queued.
        errorMessage:
          type: string
          description: Error details in case the report generation request was unsuccessful.
        lastInvocationId:
          type: string
          description: A unique ID generated for this request.
        reportType:
          $ref: '#/components/schemas/ExcelStatus/definitions/excelReportTypes'
        fileSize:
          type: integer
          nullable: true
          description: The file size in Bytes is populated upon successful generation of the report.
      definitions:
        excelReportTypes:
          type: string
          enum:
            - audit
            - enhancedFinancials
            - enhancedInvoices
            - enhancedCashFlow
          description: The type of the report requested in the query string.
      examples:
        Example 1:
          value:
            lastGenerated: '2023-01-25T22:36:05.125Z'
            inProgress: true
            queued: '2023-01-25T22:36:05.125Z'
            success: true
            errorMessage: string
            lastInvocationId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
            reportType: string
            fileSize: 0
    File:
      title: File
      type: object
      properties:
        fileName:
          type: string
          nullable: true
          description: The file's name.
        displayName:
          type: string
          nullable: true
          description: An optional display name for the file.
        sourceType:
          type: string
          nullable: true
          description: The source of the file uploaded.
        uploaded:
          $ref: '#/components/schemas/DateTime'
      additionalProperties: false
    Files:
      title: Files
      type: array
      items:
        $ref: '#/components/schemas/File'
    FileUpload:
      title: Attachment upload
      type: object
      x-internal: true
      required:
        - file
      properties:
        file:
          $ref: '#/components/schemas/FileUpload/definitions/codatFile'
      definitions:
        codatFile:
          type: string
          description: The file to be uploaded as an attachment.
          format: binary
    LoanSummary:
      title: Loan summary
      type: object
      properties:
        reportInfo:
          $ref: '#/components/schemas/LoanSummary/definitions/loanSummaryReportInfo'
        reportItems:
          type: array
          description: Returns a summary of all loan activity for that integration type
          items:
            $ref: '#/components/schemas/LoanSummary/definitions/loanSummaryReportItem'
      definitions:
        loanSummaryReportInfo:
          title: Loan Summary Report Info
          type: object
          properties:
            reportName:
              type: string
              description: The name of the report.
            companyName:
              type: string
              description: Name of the company queried.
            generatedDate:
              $ref: '#/components/schemas/DateTime'
              description: Returns the YYYY-MM-DD datetime of report generation.  urns the YYYY-MM-DD datetime of report generation.
        loanRef:
          title: Loan Reference
          type: object
          properties:
            id:
              type: string
              description: The id of the object being referred to.
            dataConnectionId:
              type: string
              description: The dataConnectionId the object being referred to is associated with.
              x-stoplight:
                id: vrnhmgrfndjhh
            type:
              type: string
              description: 'The object type data is referring to, e.g. Account.'
        loanSummaryRecordRef:
          title: Item reference
          type: object
          properties:
            id:
              type: string
              description: The id of the object being referred to.
            dataConnectionId:
              type: string
              description: The dataConnectionId the object being referred to is associated with.
            integrationType:
              $ref: '#/components/schemas/LoanSummary/definitions/loanSummaryIntegrationType'
            recordRefType:
              $ref: '#/components/schemas/LoanSummary/definitions/loanSummaryRecordRefType'
        loanSummaryReportItem:
          type: object
          properties:
            recordRef:
              $ref: '#/components/schemas/LoanSummary/definitions/loanSummaryRecordRef'
              description: Contains object that contains a summary of all loan transactions for that integration type.
            description:
              type: string
              description: The description of the object being referred to. E.g. the account.
            startDate:
              $ref: '#/components/schemas/DateTime'
              description: The date of the earliest loan transaction.
            totalDrawdowns:
              type: number
              format: decimal
              description: The total loan drawdowns.
            totalRepayments:
              type: number
              format: decimal
              description: The total loan repayments which includes capital plus any interest.
            balance:
              type: number
              format: decimal
              description: The loan outstanding balance.  This may not equal totalDrawdowns - totalRepayments due to interest which has been accrued.
            lenderName:
              type: string
              description: The name of lender providing the loan.
        loanSummaryIntegrationType:
          title: Integration type
          type: string
          enum:
            - Accounting
            - Banking
            - Commerce
          description: The integration type begin referred to.
        loanSummaryRecordRefType:
          title: Record reference type
          type: string
          enum:
            - accounts
            - banking-accounts
            - commerce-transactions
          description: The datatype being referred to.
      examples:
        - reportInfo:
            reportName: LoanSummaryReport
            companyName: The Coffee shop
            generatedDate: '2022-10-23T00:00:00Z'
          reportItems:
            - recordRef:
                id: string
                dataConnectionId: DE34E8E3-089F-4DF4-89E9-F7C43618FCAAA
                integrationType: Accounting
                recordRefType: accounts
              description: string
              startDate: '2021-01-01'
              totalInvestments: 100000
              totalRepayments: 83481.72
              balance: 42513.18
              lenderName: Barclays Bank
    LoanTransactions:
      title: Loan transactions
      type: object
      properties:
        reportInfo:
          $ref: '#/components/schemas/LoanTransactions/definitions/loanTransactionsReportInfo'
        reportItems:
          type: array
          description: Contains object of reporting properties. The loan ref will reference a different object depending on the integration type.
          items:
            $ref: '#/components/schemas/LoanTransactions/definitions/reportItems'
        errors:
          type: array
          description: 'If there are no errors, an empty array is returned.'
      definitions:
        loanTransactionsReportInfo:
          title: Loan Transactions Report Info
          type: object
          properties:
            pageNumber:
              type: integer
              description: The page number.
            pageSize:
              type: integer
              description: Queried page size.
            totalResults:
              type: integer
              description: The total number of transactions returned.
            reportName:
              type: string
              description: The name of the report.
            companyName:
              type: string
              description: Name of the company queried.
            generatedDate:
              $ref: '#/components/schemas/DateTime'
              description: Returns the YYYY-MM-DD datetime of report generation.
        loanRef:
          title: Loan Reference
          type: object
          properties:
            id:
              type: string
              description: The id of the object being referred to.
            dataConnectionId:
              type: string
              description: The dataConnectionId the object being referred to is associated with.
            type:
              type: string
              description: 'The object type data is referring to, e.g. Account.'
        itemRef:
          title: Item reference
          type: object
          properties:
            id:
              type: string
              description: 'The id of the object, e.g. the Journal entry.'
            dataConnectionId:
              type: string
              description: The data connection id being referenced.
            type:
              type: string
              description: The data type the loan transaction entry was extracted from.
        reportItems:
          type: object
          properties:
            loanRef:
              $ref: '#/components/schemas/LoanTransactions/definitions/loanRef'
              description: Contains object that contains all the Loan transactions for that integration type.
            itemRef:
              $ref: '#/components/schemas/LoanTransactions/definitions/itemRef'
              description: Contains object of reporting properties. The loan ref will reference a different object depending on the integration type.
            date:
              $ref: '#/components/schemas/DateTime'
              description: The date of that entry type occurred.
            amount:
              type: number
              format: decimal
              description: The loan transaction amount.
            loanTransactionType:
              description: The type of loan transaction.
              type: string
              enum:
                - Investment
                - Repayment
                - Interest
                - AccuredInterest
            lenderName:
              type: string
              description: The name of lender providing the loan.
      examples:
        - reportInfo:
            pageNumber: 1
            pageSize: 1000
            totalResults: 1
            reportName: AccountingLoanTransactions
            companyName: Supermarket store
            generatedDate: '2022-10-23T00:00:00Z'
          reportItems:
            - loanRef:
                id: '332'
                dataConnectionId: ecd2d6be-5194-40a1-838f-5577a4881aaa
                type: chartOfAccount
              itemRef:
                id: '755488'
                dataConnectionId: ecd2d6be-5194-40a1-838f-5577a4881aaa
                type: journalEntry
              date: '2020-08-02'
              amount: -455
              transactionType: Repayment
              lenderName: Barclays Bank
    Metadata:
      title: Metadata
      type: object
      x-internal: true
      properties:
        isDeleted:
          type: boolean
          description: Indicates whether the record has been deleted in the third-party system this record originated from.
          nullable: true
    PagingInfo:
      type: object
      title: Pagination information
      x-internal: true
      properties:
        pageNumber:
          type: integer
          description: Current page number.
        pageSize:
          type: integer
          description: Number of items to return in results array.
          maximum: 2000
        totalResults:
          type: integer
          description: Total number of items.
        _links:
          $ref: '#/components/schemas/PagingInfo/definitions/links'
      definitions:
        links:
          title: Hal Links
          type: object
          required:
            - self
            - current
          properties:
            self:
              $ref: '#/components/schemas/PagingInfo/definitions/halRef'
            current:
              $ref: '#/components/schemas/PagingInfo/definitions/halRef'
            next:
              $ref: '#/components/schemas/PagingInfo/definitions/halRef'
            previous:
              $ref: '#/components/schemas/PagingInfo/definitions/halRef'
          examples:
            - self:
                href: /companies
              current:
                href: /companies?page=1&pageSize=10
        halRef:
          title: Hypertext reference
          type: object
          properties:
            href:
              type: string
              format: uri-reference
              description: Uri hypertext reference.
      required:
        - pageNumber
        - pageSize
        - totalResults
        - _links
      examples:
        - pageNumber: 1
          pageSize: 10
          totalResults: 1
          _links:
            self:
              href: '/companies/{id}/data/{dataType}'
            current:
              href: '/companies/{id}/data/{dataType}?page=1&pageSize=10'
    PaymentMethodRef:
      type: object
      title: Payment method reference
      description: The payment method the record is linked to in the accounting or commerce platform.
      properties:
        id:
          description: The unique identifier of the location being referenced.
          type: string
        name:
          description: Name of the location being referenced.
          type: string
      required:
        - id
      example:
        id: EILBDVJVNUAGVKRQ
        name: AliPay
    PhoneNumber:
      title: Phone
      type: object
      x-internal: true
      properties:
        number:
          type: string
          nullable: true
          examples:
            - +44 25691 154789
            - (877) 492-8687
            - 01224 658 999
          description: A phone number.
        type:
          $ref: '#/components/schemas/PhoneNumber/definitions/phoneNumberType'
      required:
        - type
      definitions:
        phoneNumberType:
          description: The type of phone number
          type: string
          enum:
            - Primary
            - Landline
            - Mobile
            - Fax
            - Unknown
    ProjectRef:
      title: 'Accounting: Project reference'
      x-internal: true
      required:
        - id
      type: object
      properties:
        id:
          minLength: 1
          type: string
          description: Unique identifier to the project reference.
        name:
          type: string
          nullable: true
          description: The project's name.
    PullOperation:
      title: Pull operation
      description: |-
        Information about a queued, in progress or completed pull operation.
        *Formally called `dataset`*
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the pull operation.
          example: 943accd0-4247-42d8-865b-363c8629e1da
        companyId:
          type: string
          format: uuid
          description: Unique identifier of the company associated to this pull operation.
          example: 22ece347-e5f6-4896-95e0-35a4c7f17023
        connectionId:
          type: string
          format: uuid
          description: Unique identifier of the connection associated to this pull operation.
          example: 50830828-7d39-4367-b0eb-5ddb2de5faa5
        dataType:
          title: Data types
          x-internal: true
          type: string
          description: The data type you are requesting in a pull operation.
        status:
          title: Dataset status
          type: string
          description: The current status of the dataset.
          enum:
            - Initial
            - Queued
            - Fetching
            - MapQueued
            - Mapping
            - Complete
            - FetchError
            - MapError
            - InternalError
            - ProcessingQueued
            - Processing
            - ProcessingError
            - ValidationQueued
            - Validating
            - ValidationError
            - AuthError
            - Cancelled
            - NotSupported
            - RateLimitError
            - PermissionsError
            - PrerequisiteNotMet
        statusDescription:
          type: string
          nullable: true
          description: Additional information about the dataset status.
          example: 'Paused until 2022-10-23T00:00:00.000Z'
        errorMessage:
          type: string
          nullable: true
          description: A message about a transient or persistent error.
        requested:
          $ref: '#/components/schemas/DateTime'
        completed:
          $ref: '#/components/schemas/DateTime'
        progress:
          type: integer
          description: An integer signifying the progress of the pull operation.
        isCompleted:
          type: boolean
          description: '`True` if the pull operation is completed successfully. The `isCompleted` property is not queryable. To filter failed pull operations, query by `status!=Complete&&status!=NotSupported` instead.'
        isErrored:
          type: boolean
          description: '`True` if the pull operation entered an error state.'
      required:
        - id
        - companyId
        - connectionId
        - dataType
        - status
        - requested
        - progress
        - isCompleted
        - isErrored
      examples:
        - id: 97d60846-f07a-4d42-b5a0-0bdcc6ebf56b
          companyId: 4645bd78-8988-45bc-ac9e-67ba5df6e4e5
          connectionId: 51baa045-4836-4317-a42e-3542e991e581
          dataType: invoices
          status: Initial
          statusDescription: 'Paused until 2022-10-23T00:00:00.000Z'
          requested: '2022-11-14T11:18:37.2798351Z'
          progress: 10
          isCompleted: false
          isErrored: false
    PullOperations:
      title: Pull operations
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/PullOperation'
        - $ref: '#/components/schemas/PagingInfo'
    PushOperation:
      title: Push operation
      type: object
      x-internal: true
      properties:
        changes:
          type: array
          nullable: true
          description: 'Contains a single entry that communicates which record has changed and the manner in which it changed. '
          items:
            $ref: '#/components/schemas/PushOperation/definitions/pushOperationChange'
        dataType:
          $ref: '#/components/schemas/DataStatus/properties/dataType'
          description: 'The type of data being pushed, eg invoices, customers.'
        companyId:
          $ref: '#/components/parameters/companyId/schema'
        pushOperationKey:
          type: string
          format: uuid
          description: 'A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.'
        dataConnectionKey:
          $ref: '#/components/parameters/connectionId/schema'
        requestedOnUtc:
          $ref: '#/components/schemas/DateTime'
          description: The datetime when the push was requested.
        completedOnUtc:
          $ref: '#/components/schemas/DateTime'
          description: 'The datetime when the push was completed, null if Pending.'
        timeoutInMinutes:
          type: integer
          format: int32
          nullable: true
          description: Number of minutes the push operation must complete within before it times out.
        timeoutInSeconds:
          type: integer
          format: int32
          nullable: true
          deprecated: true
          description: Number of seconds the push operation must complete within before it times out.
        status:
          $ref: '#/components/schemas/PushOperation/definitions/pushOperationStatus'
        errorMessage:
          type: string
          nullable: true
          description: A message about the error.
        validation:
          $ref: '#/components/schemas/PushOperation/definitions/validation'
        statusCode:
          type: integer
          description: Push status code.
      required:
        - companyId
        - pushOperationKey
        - dataConnectionKey
        - requestedOnUtc
        - status
        - statusCode
      definitions:
        validation:
          type: object
          title: Validation
          description: 'A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.'
          properties:
            errors:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/PushOperation/definitions/validationItem'
            warnings:
              type: array
              nullable: true
              items:
                $ref: '#/components/schemas/PushOperation/definitions/validationItem'
        validationItem:
          title: Validation item
          type: object
          properties:
            itemId:
              type: string
              nullable: true
              description: Unique identifier for a validation item.
            message:
              type: string
              nullable: true
              description: A message outlining validation item's issue.
            validatorName:
              type: string
              nullable: true
              description: Name of validator.
          additionalProperties: false
        pushChangeType:
          title: Push change type
          description: Type of change being applied to record in third party platform.
          type: string
          enum:
            - Unknown
            - Created
            - Modified
            - Deleted
            - AttachmentUploaded
        pushOperationRef:
          title: Push operation reference
          x-internal: true
          type: object
          properties:
            id:
              type: string
              description: Unique identifier for a push operation.
            dataType:
              $ref: '#/components/schemas/DataStatus/properties/dataType'
              nullable: true
          additionalProperties: false
        pushOperationStatus:
          title: Push operation status
          type: string
          enum:
            - Pending
            - Failed
            - Success
            - TimedOut
          description: The current status of the push operation.
        pushOperationChange:
          type: object
          properties:
            type:
              $ref: '#/components/schemas/PushOperation/definitions/pushChangeType'
            recordRef:
              $ref: '#/components/schemas/PushOperation/definitions/pushOperationRef'
            attachmentId:
              type: string
              description: Unique identifier for the attachment created otherwise null.
              nullable: true
    PushOperations:
      title: Push operations
      x-internal: true
      allOf:
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/PushOperation'
        - $ref: '#/components/schemas/PagingInfo'
    PushOption:
      title: Push option
      x-internal: true
      required:
        - displayName
        - required
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PushOption/definitions/pushOptionType'
        displayName:
          $ref: '#/components/schemas/PushOption/definitions/pushOptionProperty/properties/displayName'
        description:
          $ref: '#/components/schemas/PushOption/definitions/pushOptionProperty/properties/description'
        required:
          $ref: '#/components/schemas/PushOption/definitions/pushOptionProperty/properties/required'
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PushOption/definitions/pushOptionProperty'
          nullable: true
        options:
          type: array
          items:
            $ref: '#/components/schemas/PushOption/definitions/pushOptionChoice'
          nullable: true
        validation:
          $ref: '#/components/schemas/PushOption/definitions/pushValidationInfo'
          nullable: true
      definitions:
        pushOptionProperty:
          title: Push Option Property
          required:
            - description
            - displayName
            - required
            - type
          type: object
          properties:
            type:
              $ref: '#/components/schemas/PushOption/definitions/pushOptionType'
            displayName:
              minLength: 1
              type: string
              description: The property's display name.
            description:
              type: string
              description: A description of the property.
            required:
              type: boolean
              description: The property is required if `True`.
            properties:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/PushOption/definitions/pushOptionProperty'
              nullable: true
            options:
              type: array
              items:
                $ref: '#/components/schemas/PushOption/definitions/pushOptionChoice'
              nullable: true
            validation:
              $ref: '#/components/schemas/PushOption/definitions/pushValidationInfo'
        pushValidationInfo:
          title: Push validation info
          type: object
          properties:
            warnings:
              type: array
              items:
                $ref: '#/components/schemas/PushOption/definitions/pushFieldValidation'
              nullable: true
            information:
              type: array
              items:
                $ref: '#/components/schemas/PushOption/definitions/pushFieldValidation'
              nullable: true
          additionalProperties: false
        pushFieldValidation:
          title: Push field validation
          required:
            - details
          type: object
          properties:
            field:
              type: string
              description: Field name that resulted in the validation issue.
            details:
              minLength: 1
              type: string
              description: Details on the validation issue.
            ref:
              type: string
              format: uri
              nullable: true
              description: Unique reference identifier for the validation issue.
          additionalProperties: false
        pushOptionType:
          title: Option Type
          description: The option type.
          enum:
            - Array
            - Object
            - String
            - Number
            - Boolean
            - DateTime
            - File
            - MultiPart
          type: string
        pushOptionChoice:
          title: Push Option Choice
          type: object
          properties:
            value:
              type: string
              minLength: 1
              description: Allowed value for field.
            type:
              $ref: '#/components/schemas/PushOption/definitions/pushOptionType'
            displayName:
              $ref: '#/components/schemas/PushOption/definitions/pushOptionProperty/properties/displayName'
            description:
              $ref: '#/components/schemas/PushOption/definitions/pushOptionProperty/properties/description'
            required:
              $ref: '#/components/schemas/PushOption/definitions/pushOptionProperty/properties/required'
    ReportLine:
      x-internal: true
      type: object
      title: 'Accounting: Report line'
      properties:
        accountId:
          type: string
          nullable: true
          description: 'Identifier for the account, unique for the company in the accounting platform.'
        name:
          type: string
          nullable: true
          description: Name of the report line item.
        value:
          type: number
          format: decimal
          description: Numerical value of the line item.
        items:
          type: array
          nullable: true
          description: An array of ReportLine items.
          items:
            $ref: '#/components/schemas/ReportLine'
      required:
        - value
    StartUploadSessionRequest:
      title: Upload session start request
      type: object
      properties:
        dataType:
          type: string
          enum:
            - banking-accounts
            - banking-transactions
          description: A key for a Codat data type.
    SupplementalData:
      title: Supplemental data
      type: object
      x-internal: true
      description: |-
        Supplemental data is additional data you can include in our standard data types. 

        It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
      properties:
        content:
          type: object
          additionalProperties:
            type: object
            additionalProperties: true
          nullable: true
    ThirdPartySchema:
      title: Third-party schema
      description: The format should be identical to the file format receieved from the third-party banking source (e.g. Plaid or TrueLayer).
      type: object
      x-speakeasy-type-override: Any
    WebLink:
      title: Weblink
      description: Weblink associated with the company.
      type: object
      properties:
        type:
          description: The type of the weblink.
          type: string
          enum:
            - Website
            - Social
            - Unknown
        url:
          description: The full URL for the weblink.
          type: string
          format: url
      example:
        type: Website
        url: 'https://codat.io'
  parameters:
    page:
      name: page
      in: query
      schema:
        type: integer
        format: int32
        minimum: 1
        example: 1
        default: 1
      description: 'Page number. [Read more](https://docs.codat.io/using-the-api/paging).'
    pageSize:
      name: pageSize
      in: query
      schema:
        type: integer
        format: int32
        default: 100
        example: 100
        minimum: 1
        maximum: 5000
      description: 'Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).'
    query:
      name: query
      in: query
      required: false
      schema:
        type: string
      example: id=e3334455-1aed-4e71-ab43-6bccf12092ee
      description: 'Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).'
    orderBy:
      name: orderBy
      in: query
      required: false
      schema:
        type: string
        example: '-modifiedDate'
      description: 'Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).'
    companyId:
      name: companyId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 8a210b68-6988-11ed-a1eb-0242ac120002
        description: Unique identifier for your SMB in Codat.
      description: Unique identifier for a company.
    connectionId:
      name: connectionId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 2e9d2c44-f675-40ba-8049-353bfcb5e171
        description: Unique identifier for a company's data connection.
      description: Unique identifier for a connection.
    dataType:
      name: dataType
      description: A key for a Codat data type.
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/DataType'
    datasetId:
      name: datasetId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        description: Unique identifier for the dataset that completed its sync.
      description: Unique identifier for the dataset that completed its sync.
    dataIntegrityDataType:
      name: dataType
      in: path
      required: true
      schema:
        type: string
        enum:
          - banking-accounts
          - banking-transactions
          - bankAccounts
          - accountTransactions
        example: banking-accounts
      description: A key for a Codat data type.
    reportDate:
      name: reportDate
      in: query
      schema:
        type: string
        example: 29-09-2020
      description: 'The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.'
    reportDateRequired:
      name: reportDate
      in: query
      required: true
      schema:
        type: string
        example: 29-09-2020
      description: 'The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.'
    periodLength:
      name: periodLength
      in: query
      required: true
      schema:
        type: integer
      description: The number of months per period. E.g. 2 = 2 months per period.
    numberOfPeriods:
      name: numberOfPeriods
      in: query
      required: false
      schema:
        type: integer
      description: 'The number of periods to return. If not provided, 12 periods will be used as the default value.'
    numberOfPeriodsRequired:
      name: numberOfPeriods
      in: query
      required: true
      schema:
        type: integer
      description: The number of periods to return. There will be no pagination as a query parameter.
    periodUnit:
      name: periodUnit
      in: query
      required: true
      schema:
        type: string
        enum:
          - Day
          - Week
          - Month
          - Year
      description: The period unit of time returned.
    includeDisplayNames:
      name: includeDisplayNames
      in: query
      schema:
        type: boolean
      description: Shows the dimensionDisplayName and itemDisplayName in measures to make the report data human-readable.
    excelReportType:
      name: reportType
      in: query
      schema:
        $ref: '#/components/schemas/ExcelStatus/definitions/excelReportTypes'
      description: The type of report you want to generate and download.
      required: true
    accountingAccountId:
      name: accountId
      in: path
      required: true
      schema:
        type: string
        examples:
          $ref: '#/components/schemas/CommerceOrder/allOf/0/properties/id/examples'
      description: Unique identifier for an account.
    accountingBillPaymentId:
      name: billPaymentId
      in: path
      required: true
      schema:
        type: string
        examples:
          $ref: '#/components/schemas/CommerceOrder/allOf/0/properties/id/examples'
      description: Unique identifier for a bill payment.
    accountingBillId:
      name: billId
      in: path
      required: true
      schema:
        type: string
        examples:
          $ref: '#/components/schemas/CommerceOrder/allOf/0/properties/id/examples'
      description: Unique identifier for a bill.
    attachmentId:
      name: attachmentId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 8a210b68-6988-11ed-a1eb-0242ac120002
      description: Unique identifier for an attachment.
    accountingDirectCostId:
      name: directCostId
      in: path
      required: true
      schema:
        type: string
        examples:
          $ref: '#/components/schemas/CommerceOrder/allOf/0/properties/id/examples'
      description: Unique identifier for a direct cost.
    accountingDirectIncomeId:
      name: directIncomeId
      in: path
      required: true
      schema:
        type: string
        examples:
          $ref: '#/components/schemas/CommerceOrder/allOf/0/properties/id/examples'
      description: Unique identifier for a direct income.
    accountingInvoiceId:
      name: invoiceId
      in: path
      required: true
      schema:
        type: string
        examples:
          $ref: '#/components/schemas/CommerceOrder/allOf/0/properties/id/examples'
      description: Unique identifier for an invoice.
    accountingSupplierId:
      name: supplierId
      in: path
      required: true
      schema:
        type: string
        examples:
          $ref: '#/components/schemas/CommerceOrder/allOf/0/properties/id/examples'
      description: Unique identifier for a supplier.
    accountingReportDate:
      name: reportDate
      in: query
      schema:
        type: string
        format: date
        example: '2022-12-31'
      description: Date the report is generated up to.
    accountingNumberOfPeriods:
      name: numberOfPeriods
      in: query
      schema:
        type: integer
        format: int32
        example: 12
      description: Number of periods to include in the report.
    accountingPeriodLengthDays:
      name: periodLengthDays
      in: query
      schema:
        type: integer
        format: int32
        example: 30
      description: The length of period in days.
    accountingPeriodLength:
      name: periodLength
      description: Number of months defining the period of interest.
      in: query
      required: true
      schema:
        type: integer
        format: int32
        example: 4
    accountingPeriodsToCompare:
      name: periodsToCompare
      description: Number of periods with `periodLength` to compare.
      in: query
      required: true
      schema:
        type: integer
        format: int32
        example: 20
    accountingStartMonth:
      name: startMonth
      in: query
      schema:
        $ref: '#/components/schemas/DateTime'
      description: The month the report starts from.
    customerId:
      name: customerId
      in: path
      required: true
      schema:
        type: string
        examples:
          $ref: '#/components/schemas/CommerceOrder/allOf/0/properties/id/examples'
      description: Unique identifier for a customer.
    timeoutInMinutes:
      name: timeoutInMinutes
      in: query
      schema:
        type: integer
        format: int32
      description: Time limit for the push operation to complete before it is timed out.
    allowSyncOnPushComplete:
      name: allowSyncOnPushComplete
      in: query
      schema:
        type: boolean
        default: true
      description: Allow a sync upon push completion.
    forceUpdate:
      name: forceUpdate
      in: query
      schema:
        type: boolean
        default: false
      description: 'When updating data in the destination platform Codat checks the `sourceModifiedDate` against the `lastupdated` date from the accounting platform, if they''re different Codat will return an error suggesting you should initiate another pull of the data. If this is set to `true` then the update will override this check.'
    pushOperationKey:
      name: pushOperationKey
      schema:
        type: string
        format: uuid
      in: path
      required: true
      description: Unique identifier for the push operation.
    paymentId:
      name: paymentId
      in: path
      required: true
      schema:
        type: string
        examples:
          $ref: '#/components/schemas/CommerceOrder/allOf/0/properties/id/examples'
      description: Unique identifier for a payment.
    productId:
      name: productId
      in: path
      required: true
      schema:
        type: string
        examples:
          $ref: '#/components/schemas/CommerceOrder/allOf/0/properties/id/examples'
      description: Unique identifier for a product.
    path:
      name: path
      description: The endpoint path of the third-party banking service that the request body originates from. Only required if the source is not `codat`.
      in: query
      required: false
      schema:
        type: string
        enum:
          - auth/get
  responses:
    BadRequest:
      description: The request made is not valid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Malformed query:
              value:
                statusCode: 400
                service: PublicApi
                error: Error processing request - not valid.
                correlationId: bc997528a9d7abb9161ef45f05d38599
                canBeRetried: Unknown
                detailedErrorCode: 0
    Malformed-Query:
      description: Your `query` parameter was not correctly formed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Malformed query:
              value:
                statusCode: 400
                service: ClientsApi
                error: Error parsing query - Malformed query.
                correlationId: bc997528a9d7abb9161ef45f05d38599
                canBeRetried: Unknown
                detailedErrorCode: 0
            Unresolved property:
              value:
                statusCode: 400
                service: PullApi
                error: Error parsing query - Could not resolve property isCompleted on Dataset
                correlationId: 98457fb9956b7f9b4b2fd4f6e23bb5c8
                canBeRetried: Unknown
                detailedErrorCode: 0
    Unauthorized:
      description: Your API request was not properly authorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Unauthorized:
              value:
                statusCode: 401
                service: PublicApi
                error: Unauthorized
                correlationId: 7eb40d6b415d7bcd99ce658268284056
                canBeRetried: Unknown
                detailedErrorCode: 0
    Payment-Required:
      description: |
        An account limit has been exceeded. The type of limit is described in the error property:

        - You have exceeded the 50-company limit that applies to a Free plan. Delete any companies you no longer need and retry the request.
        - The requested sync schedule is not allowed. You requested an hourly sync schedule but this functionality is not included in the Free plan.
        - Your Free account is older than 365 days and has expired. Contact support@codat.io.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Conflict:
              value:
                statusCode: 429
                service: PublicApi
                error: You have exceeded the 50-company limit that applies to a Free plan. We recommend that you delete any companies you no longer need and retry the request.
                correlationId: bc997528a9d7abb9161ef45f05d38599
                canBeRetried: Unknown
                detailedErrorCode: 0
    Forbidden:
      description: You are using an outdated API key or a key not associated with that resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Conflict:
              value:
                statusCode: 403
                service: PublicApi
                error: You are using an outdated API key or a key not associated with that resource.
                correlationId: bc997528a9d7abb9161ef45f05d38599
                canBeRetried: Unknown
                detailedErrorCode: 0
    Not-Found:
      description: |-
        One or more of the resources you referenced could not be found.
        This might be because your company or data connection id is wrong, or was already deleted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Data connection not found:
              value:
                statusCode: 404
                service: PublicApi
                error: Data connection a22dd66b-564a-4832-9b37-7b3ce4aeb7de not found
                correlationId: 8fa2b5f4794970a4ee73758f612e8df0
                canBeRetried: Unknown
                detailedErrorCode: 0
            Company not found:
              value:
                statusCode: 404
                service: ClientsApi
                error: No company was found with ID 846ed55c-974b-4392-a1f1-87b6fdbf3c5e
                correlationId: 0a40c2f31fc8f992fb88b0853e4166f3
                canBeRetried: Unknown
                detailedErrorCode: 0
            No data available:
              value:
                statusCode: 404
                service: PublicApi
                error: No data available for accounts for ID e5889b459f544926ac5b8e6756df2s
                correlationId: 0a40c2f31fc8f992fb88b0853e4166f3
                canBeRetried: Unknown
                detailedErrorCode: 0
    Conflict:
      description: The data type's dataset has not been requested or is still syncing.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Conflict:
              value:
                statusCode: 409
                service: PublicApi
                error: The data set has not been requested.
                correlationId: bc997528a9d7abb9161ef45f05d38599
                canBeRetried: Unknown
                detailedErrorCode: 0
    Too-Many-Requests:
      description: Too many requests were made in a given amount of time. Wait a short period and then try again.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Conflict:
              value:
                statusCode: 429
                service: PublicApi
                error: You have made too many requests in a given amount of time; please retry later.
                correlationId: bc997528a9d7abb9161ef45f05d38599
                canBeRetried: Unknown
                detailedErrorCode: 0
    Internal-Server-Error:
      description: There is a problem with our server. Please try again later.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Conflict:
              value:
                statusCode: 500
                service: PublicApi
                error: There is a problem with our server. Please try again later.
                correlationId: bc997528a9d7abb9161ef45f05d38599
                canBeRetried: Unknown
                detailedErrorCode: 0
    Service-Unavailable:
      description: The Codat API is temporarily offline for maintenance. Please try again later.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            Conflict:
              value:
                statusCode: 500
                service: PublicApi
                error: The Codat API is temporarily offline for maintenance. Please try again later.
                correlationId: bc997528a9d7abb9161ef45f05d38599
                canBeRetried: Unknown
                detailedErrorCode: 0
  securitySchemes:
    auth_header:
      name: Authorization
      description: 'The word "Basic" followed by a space and your API key. [API keys](https://docs.codat.io/lending-api#/schemas/apiKeys) are tokens used to control access to the API. You can get an API key via [the Codat Portal](https://app.codat.io/developers/api-keys), via [the API](https://docs.codat.io/codat-api#/api-keys/api-keys-list), or [read more](https://docs.codat.io/using-the-api/authentication) about authentication at Codat.'
      type: apiKey
      in: header
      x-speakeasy-example: Basic BASE_64_ENCODED(API_KEY)
  examples:
    CodatBankStatementUploadConfiguration:
      value:
        source: codat
        accountId: abc123-ABC
      summary: Settings for uploading codat data
